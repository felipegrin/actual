{"version":3,"file":"narrow.1I7NjHhw.chunk.js","sources":["../../../src/icons/v1/ArrowThickRight.tsx","../../../src/icons/v1/ArrowThinLeft.tsx","../../../src/components/SyncRefresh.tsx","../../../src/components/common/Card.tsx","../../../src/components/mobile/budget/ListItem.tsx","../../../src/components/mobile/budget/BudgetTable.jsx","../../../src/components/mobile/budget/index.tsx","../../../src/components/mobile/accounts/Accounts.jsx","../../../src/components/mobile/accounts/AccountTransactions.jsx","../../../src/components/mobile/accounts/Account.jsx"],"sourcesContent":["import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThickRight = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path d=\"M10 7H2v6h8v5l8-8-8-8v5z\" fill=\"currentColor\" />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThinLeft = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"m3.828 9 6.071-6.071-1.414-1.414L0 10l.707.707 7.778 7.778 1.414-1.414L3.828 11H20V9H3.828z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import React, { type ReactNode, useState } from 'react';\n\ntype ChildrenProps = {\n  refreshing: boolean;\n  onRefresh: () => Promise<void>;\n};\ntype SyncRefreshProps = {\n  onSync: () => Promise<void>;\n  children: (props: ChildrenProps) => ReactNode;\n};\nexport function SyncRefresh({ onSync, children }: SyncRefreshProps) {\n  const [syncing, setSyncing] = useState(false);\n\n  async function onSync_() {\n    setSyncing(true);\n    await onSync();\n    setSyncing(false);\n  }\n\n  return <>{children({ refreshing: syncing, onRefresh: onSync_ })}</>;\n}\n","import { type ComponentProps, forwardRef } from 'react';\n\nimport { theme } from '../../style';\n\nimport { View } from './View';\n\ntype CardProps = ComponentProps<typeof View>;\n\nexport const Card = forwardRef<HTMLDivElement, CardProps>(\n  ({ children, ...props }, ref) => {\n    return (\n      <View\n        {...props}\n        ref={ref}\n        style={{\n          marginTop: 15,\n          marginLeft: 5,\n          marginRight: 5,\n          borderRadius: 6,\n          backgroundColor: theme.cardBackground,\n          borderColor: theme.cardBorder,\n          boxShadow: '0 1px 2px #9594A8',\n          ...props.style,\n        }}\n      >\n        <View\n          style={{\n            borderRadius: 6,\n            overflow: 'hidden',\n          }}\n        >\n          {children}\n        </View>\n      </View>\n    );\n  },\n);\n\nCard.displayName = 'Card';\n","import React, { type ComponentProps, type ReactNode } from 'react';\n\nimport { type CSSProperties, theme } from '../../../style';\nimport { View } from '../../common/View';\n\nconst ROW_HEIGHT = 50;\n\ntype ListItemProps = ComponentProps<typeof View> & {\n  children?: ReactNode;\n  style: CSSProperties;\n};\n\nexport const ListItem = ({ children, style, ...props }: ListItemProps) => {\n  return (\n    <View\n      style={{\n        height: ROW_HEIGHT,\n        borderBottomWidth: 1,\n        borderColor: theme.tableBorder,\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingLeft: 5,\n        paddingRight: 5,\n        zIndex: 1,\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </View>\n  );\n};\n","import React, { memo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { AutoTextSize } from 'auto-text-size';\nimport memoizeOne from 'memoize-one';\n\nimport { collapseModals, pushModal } from 'loot-core/client/actions';\nimport { rolloverBudget, reportBudget } from 'loot-core/src/client/queries';\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useFeatureFlag } from '../../../hooks/useFeatureFlag';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { SvgLogo } from '../../../icons/logo';\nimport { SvgExpandArrow } from '../../../icons/v0';\nimport {\n  SvgArrowThinLeft,\n  SvgArrowThinRight,\n  SvgArrowThickRight,\n  SvgCheveronRight,\n} from '../../../icons/v1';\nimport { SvgViewShow } from '../../../icons/v2';\nimport { useResponsive } from '../../../ResponsiveProvider';\nimport { theme, styles } from '../../../style';\nimport { BalanceWithCarryover } from '../../budget/BalanceWithCarryover';\nimport { makeAmountGrey, makeBalanceAmountStyle } from '../../budget/util';\nimport { Button } from '../../common/Button2';\nimport { Card } from '../../common/Card';\nimport { Label } from '../../common/Label';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { CellValue } from '../../spreadsheet/CellValue';\nimport { useFormat } from '../../spreadsheet/useFormat';\nimport { useSheetValue } from '../../spreadsheet/useSheetValue';\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\nimport { PullToRefresh } from '../PullToRefresh';\n\nimport { ListItem } from './ListItem';\n\nconst PILL_STYLE = {\n  borderRadius: 16,\n  color: theme.pillText,\n  backgroundColor: theme.pillBackgroundLight,\n};\n\nfunction getColumnWidth({ show3Cols, isSidebar = false, offset = 0 } = {}) {\n  // If show3Cols = 35vw | 20vw | 20vw | 20vw,\n  // Else = 45vw | 25vw | 25vw,\n  if (!isSidebar) {\n    return show3Cols ? `${20 + offset}vw` : `${25 + offset}vw`;\n  }\n  return show3Cols ? `${35 + offset}vw` : `${45 + offset}vw`;\n}\n\nfunction ToBudget({ toBudget, onPress, show3Cols }) {\n  const amount = useSheetValue(toBudget);\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: sidebarColumnWidth,\n      }}\n    >\n      <Button\n        variant=\"bare\"\n        style={{ maxWidth: sidebarColumnWidth }}\n        onPress={onPress}\n      >\n        <View>\n          <Label\n            title={amount < 0 ? 'Overbudgeted' : 'To Budget'}\n            style={{\n              ...(amount < 0 ? styles.smallText : {}),\n              color: theme.formInputText,\n              flexShrink: 0,\n              textAlign: 'left',\n            }}\n          />\n          <CellValue\n            binding={toBudget}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  fontSize: 12,\n                  fontWeight: '700',\n                  color: amount < 0 ? theme.errorText : theme.formInputText,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <SvgCheveronRight\n          style={{\n            flexShrink: 0,\n            color: theme.mobileHeaderTextSubdued,\n            marginLeft: 5,\n          }}\n          width={14}\n          height={14}\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction Saved({ projected, onPress, show3Cols }) {\n  const binding = projected\n    ? reportBudget.totalBudgetedSaved\n    : reportBudget.totalSaved;\n\n  const saved = useSheetValue(binding) || 0;\n  const format = useFormat();\n  const isNegative = saved < 0;\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: sidebarColumnWidth,\n      }}\n    >\n      <Button\n        variant=\"bare\"\n        style={{ maxWidth: sidebarColumnWidth }}\n        onPress={onPress}\n      >\n        <View>\n          <View>\n            {projected ? (\n              <AutoTextSize\n                as={Label}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                title=\"Projected Savings\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  color: theme.formInputText,\n                  textAlign: 'left',\n                  fontSize: 12,\n                }}\n              />\n            ) : (\n              <Label\n                title={isNegative ? 'Overspent' : 'Saved'}\n                style={{\n                  color: theme.formInputText,\n                  textAlign: 'left',\n                }}\n              />\n            )}\n          </View>\n\n          <CellValue\n            binding={binding}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  fontSize: 12,\n                  fontWeight: '700',\n                  color: projected\n                    ? theme.warningText\n                    : isNegative\n                      ? theme.errorTextDark\n                      : theme.formInputText,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <SvgCheveronRight\n          style={{\n            flexShrink: 0,\n            color: theme.mobileHeaderTextSubdued,\n            marginLeft: 5,\n          }}\n          width={14}\n          height={14}\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction BudgetCell({\n  name,\n  binding,\n  style,\n  categoryId,\n  month,\n  onBudgetAction,\n  ...props\n}) {\n  const dispatch = useDispatch();\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\n\n  const categoryBudgetMenuModal = `${budgetType}-budget-menu`;\n\n  const onOpenCategoryBudgetMenu = () => {\n    dispatch(\n      pushModal(categoryBudgetMenuModal, {\n        categoryId,\n        month,\n        onUpdateBudget: amount => {\n          onBudgetAction(month, 'budget-amount', {\n            category: categoryId,\n            amount,\n          });\n        },\n        onCopyLastMonthAverage: () => {\n          onBudgetAction(month, 'copy-single-last', {\n            category: categoryId,\n          });\n        },\n        onSetMonthsAverage: numberOfMonths => {\n          if (\n            numberOfMonths !== 3 &&\n            numberOfMonths !== 6 &&\n            numberOfMonths !== 12\n          ) {\n            return;\n          }\n\n          onBudgetAction(month, `set-single-${numberOfMonths}-avg`, {\n            category: categoryId,\n          });\n        },\n        onApplyBudgetTemplate: () => {\n          onBudgetAction(month, 'apply-single-category-template', {\n            category: categoryId,\n          });\n        },\n      }),\n    );\n  };\n\n  return (\n    <CellValue\n      binding={binding}\n      type=\"financial\"\n      getStyle={makeAmountGrey}\n      data-testid={name}\n      onPointerUp={e => {\n        e.stopPropagation();\n        onOpenCategoryBudgetMenu();\n      }}\n      {...props}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction ExpenseGroupPreview({ group, pending, style }) {\n  return (\n    <Card\n      style={{\n        marginTop: 7,\n        marginBottom: 7,\n        opacity: pending ? 1 : 0.4,\n      }}\n    >\n      <ExpenseGroupHeader group={group} blank={true} />\n\n      {group.categories.map((cat, index) => (\n        <ExpenseCategory\n          key={cat.id}\n          category={cat}\n          blank={true}\n          index={index}\n        />\n      ))}\n    </Card>\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction ExpenseCategoryPreview({ name, pending, style }) {\n  return (\n    <ListItem\n      style={{\n        flex: 1,\n        borderColor: 'transparent',\n        borderRadius: 4,\n      }}\n    >\n      <Text style={styles.smallText}>{name}</Text>\n    </ListItem>\n  );\n}\n\nconst ExpenseCategory = memo(function ExpenseCategory({\n  type,\n  category,\n  isHidden,\n  goal,\n  longGoal,\n  budgeted,\n  spent,\n  balance,\n  carryover,\n  index,\n  // gestures,\n  blank,\n  style,\n  month,\n  onEdit,\n  onBudgetAction,\n  show3Cols,\n  showBudgetedCol,\n}) {\n  const opacity = blank ? 0 : 1;\n\n  const isGoalTemplatesEnabled = useFeatureFlag('goalTemplatesEnabled');\n  const goalTemp = useSheetValue(goal);\n  const goalValue = isGoalTemplatesEnabled ? goalTemp : null;\n\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\n  const dispatch = useDispatch();\n\n  const onCarryover = carryover => {\n    onBudgetAction(month, 'carryover', {\n      category: category.id,\n      flag: carryover,\n    });\n    dispatch(collapseModals(`${budgetType}-balance-menu`));\n  };\n\n  const catBalance = useSheetValue(\n    type === 'rollover'\n      ? rolloverBudget.catBalance(category.id)\n      : reportBudget.catBalance(category.id),\n  );\n  const budgetedtmp = useSheetValue(budgeted);\n  const balancetmp = useSheetValue(balance);\n  const isLongGoal = useSheetValue(longGoal) === 1;\n  const budgetedValue = isGoalTemplatesEnabled\n    ? isLongGoal\n      ? balancetmp\n      : budgetedtmp\n    : null;\n\n  const onTransfer = () => {\n    dispatch(\n      pushModal('transfer', {\n        title: category.name,\n        month,\n        amount: catBalance,\n        onSubmit: (amount, toCategoryId) => {\n          onBudgetAction(month, 'transfer-category', {\n            amount,\n            from: category.id,\n            to: toCategoryId,\n          });\n          dispatch(collapseModals(`${budgetType}-balance-menu`));\n        },\n        showToBeBudgeted: true,\n      }),\n    );\n  };\n\n  const onCover = () => {\n    dispatch(\n      pushModal('cover', {\n        title: category.name,\n        month,\n        category: category.id,\n        onSubmit: fromCategoryId => {\n          onBudgetAction(month, 'cover-overspending', {\n            to: category.id,\n            from: fromCategoryId,\n          });\n          dispatch(collapseModals(`${budgetType}-balance-menu`));\n        },\n      }),\n    );\n  };\n\n  const onOpenBalanceMenu = () => {\n    dispatch(\n      pushModal(`${budgetType}-balance-menu`, {\n        categoryId: category.id,\n        month,\n        onCarryover,\n        ...(budgetType === 'rollover' && { onTransfer, onCover }),\n      }),\n    );\n  };\n\n  const listItemRef = useRef();\n  const format = useFormat();\n  const navigate = useNavigate();\n  const onShowActivity = () => {\n    navigate(`/categories/${category.id}?month=${month}`);\n  };\n\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n  const columnWidth = getColumnWidth({ show3Cols });\n\n  const content = (\n    <ListItem\n      style={{\n        backgroundColor: 'transparent',\n        borderBottomWidth: 0,\n        borderTopWidth: index > 0 ? 1 : 0,\n        opacity: isHidden ? 0.5 : undefined,\n        ...style,\n      }}\n      data-testid=\"row\"\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'flex-start',\n        }}\n      >\n        <Button\n          variant=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPress={() => onEdit?.(category.id)}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"category-name\"\n            >\n              {category.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'row',\n          opacity,\n        }}\n      >\n        <View\n          style={{\n            ...(!show3Cols && !showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <BudgetCell\n            name=\"budgeted\"\n            binding={budgeted}\n            categoryId={category.id}\n            month={month}\n            onBudgetAction={onBudgetAction}\n            formatter={value => (\n              <Button\n                variant=\"bare\"\n                style={{\n                  ...PILL_STYLE,\n                  maxWidth: columnWidth,\n                }}\n              >\n                <AutoTextSize\n                  key={`${value}|${show3Cols}|${showBudgetedCol}`}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    textAlign: 'right',\n                    fontSize: 12,\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              </Button>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...(!show3Cols && showBudgetedCol && { display: 'none' }),\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <CellValue\n            name=\"spent\"\n            binding={spent}\n            getStyle={makeAmountGrey}\n            type=\"financial\"\n            onPointerUp={e => {\n              e.stopPropagation();\n              onShowActivity();\n            }}\n            formatter={value => (\n              <Button\n                variant=\"bare\"\n                style={{\n                  ...PILL_STYLE,\n                  maxWidth: columnWidth,\n                }}\n              >\n                <AutoTextSize\n                  key={`${value}|${show3Cols}|${showBudgetedCol}`}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    textAlign: 'right',\n                    fontSize: 12,\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              </Button>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...styles.noTapHighlight,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <span\n            role=\"button\"\n            onPointerUp={e => {\n              e.stopPropagation();\n              onOpenBalanceMenu();\n            }}\n          >\n            <BalanceWithCarryover\n              carryover={carryover}\n              balance={balance}\n              goal={goal}\n              budgeted={budgeted}\n              longGoal={longGoal}\n              formatter={value => (\n                <Button\n                  variant=\"bare\"\n                  style={{\n                    ...PILL_STYLE,\n                    maxWidth: columnWidth,\n                  }}\n                >\n                  <AutoTextSize\n                    key={value}\n                    as={Text}\n                    minFontSizePx={6}\n                    maxFontSizePx={12}\n                    mode=\"oneline\"\n                    style={{\n                      maxWidth: columnWidth,\n                      ...makeBalanceAmountStyle(\n                        value,\n                        goalValue,\n                        budgetedValue,\n                      ),\n                      textAlign: 'right',\n                      fontSize: 12,\n                    }}\n                  >\n                    {format(value, 'financial')}\n                  </AutoTextSize>\n                </Button>\n              )}\n              carryoverIndicator={({ style }) => (\n                <View\n                  style={{\n                    position: 'absolute',\n                    right: '-3px',\n                    top: '-5px',\n                    borderRadius: '50%',\n                    backgroundColor: style?.color ?? theme.pillText,\n                  }}\n                >\n                  <SvgArrowThickRight\n                    width={11}\n                    height={11}\n                    style={{ color: theme.pillBackgroundLight }}\n                  />\n                </View>\n              )}\n            />\n          </span>\n        </View>\n      </View>\n    </ListItem>\n  );\n\n  return <View>{content}</View>;\n\n  // <Draggable\n  //   id={category.id}\n  //   type=\"category\"\n  //   preview={({ pending, style }) => (\n  //     <BudgetCategoryPreview\n  //       name={category.name}\n  //       pending={pending}\n  //       style={style}\n  //     />\n  //   )}\n  //   gestures={gestures}\n  // >\n  //   <Droppable\n  //     type=\"category\"\n  //     getActiveStatus={(x, y, { layout }, { id }) => {\n  //       let pos = (y - layout.y) / layout.height;\n  //       return pos < 0.5 ? 'top' : 'bottom';\n  //     }}\n  //     onDrop={(id, type, droppable, status) =>\n  //       props.onReorder(id.replace('category:', ''), {\n  //         aroundCategory: {\n  //           id: category.id,\n  //           position: status\n  //         }\n  //       })\n  //     }\n  //   >\n  //     {() => content}\n  //   </Droppable>\n  // </Draggable>\n});\n\nconst ExpenseGroupHeader = memo(function ExpenseGroupHeader({\n  group,\n  budgeted,\n  spent,\n  balance,\n  editMode,\n  onEdit,\n  blank,\n  show3Cols,\n  showBudgetedCol,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const opacity = blank ? 0 : 1;\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({\n    show3Cols,\n    isSidebar: true,\n    offset: -3.5,\n  });\n  const columnWidth = getColumnWidth({ show3Cols });\n\n  const content = (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: theme.tableRowHeaderBackground,\n        opacity: !!group.hidden ? 0.5 : undefined,\n        paddingLeft: 0,\n      }}\n      data-testid={`expense-group-header-${group.name}`}\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          variant=\"bare\"\n          style={({ isPressed, isHovered }) => ({\n            flexShrink: 0,\n            color: theme.pageTextSubdued,\n            ...styles.noTapHighlight,\n            ...(isPressed || isHovered\n              ? { backgroundColor: 'transparent' }\n              : {}),\n          })}\n          onPress={() => onToggleCollapse?.(group.id)}\n        >\n          <SvgExpandArrow\n            width={8}\n            height={8}\n            style={{\n              flexShrink: 0,\n              transition: 'transform .1s',\n              transform: collapsed ? 'rotate(-90deg)' : '',\n            }}\n          />\n        </Button>\n        <Button\n          variant=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPress={() => onEdit?.(group.id)}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n                fontWeight: '500',\n              }}\n              data-testid=\"group-name\"\n            >\n              {group.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          opacity,\n          paddingRight: 5,\n        }}\n      >\n        <View\n          style={{\n            ...(!show3Cols && !showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={budgeted}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...(!show3Cols && showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={spent}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n\n      {/* {editMode && (\n        <View>\n          <Button\n            onPointerUp={() => onAddCategory(group.id, group.is_income)}\n            style={{ padding: 10 }}\n          >\n            <Add width={15} height={15} />\n          </Button>\n        </View>\n      )} */}\n    </ListItem>\n  );\n\n  if (!editMode) {\n    return content;\n  }\n\n  return content;\n  // <Droppable\n  //   type=\"category\"\n  //   getActiveStatus={(x, y, { layout }, { id }) => {\n  //     return 'bottom';\n  //   }}\n  //   onDrop={(id, type, droppable, status) =>\n  //     props.onReorderCategory(id, { inGroup: group.id })\n  //   }\n  // >\n  //   {() => content}\n  // </Droppable>\n});\n\nconst IncomeGroupHeader = memo(function IncomeGroupHeader({\n  group,\n  budgeted,\n  balance,\n  onEdit,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -13.5 });\n  const columnWidth = getColumnWidth();\n\n  return (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: theme.tableRowHeaderBackground,\n        opacity: !!group.hidden ? 0.5 : undefined,\n        paddingLeft: 0,\n      }}\n      innerRef={listItemRef}\n      data-testid={`income-group-header-${group.name}`}\n    >\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          variant=\"bare\"\n          style={({ isPressed, isHovered }) => ({\n            flexShrink: 0,\n            color: theme.pageTextSubdued,\n            ...styles.noTapHighlight,\n            ...(isPressed || isHovered\n              ? { backgroundColor: 'transparent' }\n              : {}),\n          })}\n          onPress={() => onToggleCollapse?.(group.id)}\n        >\n          <SvgExpandArrow\n            width={8}\n            height={8}\n            style={{\n              flexShrink: 0,\n              transition: 'transform .1s',\n              transform: collapsed ? 'rotate(-90deg)' : '',\n            }}\n          />\n        </Button>\n        <Button\n          variant=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPress={() => onEdit?.(group.id)}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"group-name\"\n            >\n              {group.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          paddingRight: 5,\n        }}\n      >\n        {budgeted && (\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              width: columnWidth,\n            }}\n          >\n            <CellValue\n              binding={budgeted}\n              type=\"financial\"\n              formatter={value => (\n                <AutoTextSize\n                  key={value}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    paddingLeft: 5,\n                    textAlign: 'right',\n                    fontSize: 12,\n                    fontWeight: '500',\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              )}\n            />\n          </View>\n        )}\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                  fontSize: 12,\n                  fontWeight: '500',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </ListItem>\n  );\n});\n\nconst IncomeCategory = memo(function IncomeCategory({\n  index,\n  category,\n  budgeted,\n  balance,\n  month,\n  style,\n  onEdit,\n  onBudgetAction,\n}) {\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -10 });\n  const columnWidth = getColumnWidth();\n\n  return (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        borderBottomWidth: 0,\n        borderTopWidth: index > 0 ? 1 : 0,\n        opacity: !!category.hidden ? 0.5 : undefined,\n        ...style,\n      }}\n      data-testid=\"row\"\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          variant=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPress={() => onEdit?.(category.id)}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"category-name\"\n            >\n              {category.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n        }}\n      >\n        {budgeted && (\n          <View\n            style={{\n              width: columnWidth,\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n            }}\n          >\n            <BudgetCell\n              name=\"budgeted\"\n              binding={budgeted}\n              categoryId={category.id}\n              month={month}\n              onBudgetAction={onBudgetAction}\n              formatter={value => (\n                <Button\n                  variant=\"bare\"\n                  style={{ ...PILL_STYLE, maxWidth: columnWidth }}\n                >\n                  <AutoTextSize\n                    key={value}\n                    as={Text}\n                    minFontSizePx={6}\n                    maxFontSizePx={12}\n                    mode=\"oneline\"\n                    style={{\n                      maxWidth: columnWidth,\n                      textAlign: 'right',\n                      fontSize: 12,\n                    }}\n                  >\n                    {format(value, 'financial')}\n                  </AutoTextSize>\n                </Button>\n              )}\n            />\n          </View>\n        )}\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n            paddingRight: 5,\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  textAlign: 'right',\n                  fontSize: 12,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </ListItem>\n  );\n});\n\n// export function BudgetAccessoryView() {\n//   let emitter = useContext(AmountAccessoryContext);\n\n//   return (\n//     <View>\n//       <View\n//         style={{\n//           flexDirection: 'row',\n//           justifyContent: 'flex-end',\n//           alignItems: 'stretch',\n//           backgroundColor: colorsm.tableBackground,\n//           padding: 5,\n//           height: 45\n//         }}\n//       >\n//         <MathOperations emitter={emitter} />\n//         <View style={{ flex: 1 }} />\n//         <Button\n//           onPointerUp={() => emitter.emit('moveUp')}\n//           style={{ marginRight: 5 }}\n//           data-testid=\"up\"\n//         >\n//           <ArrowThinUp width={13} height={13} />\n//         </Button>\n//         <Button\n//           onPointerUp={() => emitter.emit('moveDown')}\n//           style={{ marginRight: 5 }}\n//           data-testid=\"down\"\n//         >\n//           <ArrowThinDown width={13} height={13} />\n//         </Button>\n//         <Button onPointerUp={() => emitter.emit('done')} data-testid=\"done\">\n//           Done\n//         </Button>\n//       </View>\n//     </View>\n//   );\n// }\n\nconst ExpenseGroup = memo(function ExpenseGroup({\n  type,\n  group,\n  editMode,\n  onEditGroup,\n  onEditCategory,\n  // gestures,\n  month,\n  // onReorderCategory,\n  // onReorderGroup,\n  onAddCategory,\n  onBudgetAction,\n  showBudgetedCol,\n  show3Cols,\n  showHiddenCategories,\n  collapsed,\n  onToggleCollapse,\n}) {\n  function editable(content) {\n    if (!editMode) {\n      return content;\n    }\n\n    return content;\n    // <Draggable\n    //   id={group.id}\n    //   type=\"group\"\n    //   preview={({ pending, style }) => (\n    //     <BudgetGroupPreview group={group} pending={pending} style={style} />\n    //   )}\n    //   gestures={gestures}\n    // >\n    //   <Droppable\n    //     type=\"group\"\n    //     getActiveStatus={(x, y, { layout }, { id }) => {\n    //       let pos = (y - layout.y) / layout.height;\n    //       return pos < 0.5 ? 'top' : 'bottom';\n    //     }}\n    //     onDrop={(id, type, droppable, status) => {\n    //       onReorderGroup(id, group.id, status);\n    //     }}\n    //   >\n    //     {() => content}\n    //   </Droppable>\n    // </Draggable>\n  }\n\n  return editable(\n    <Card\n      style={{\n        marginTop: 4,\n        marginBottom: 4,\n      }}\n    >\n      <ExpenseGroupHeader\n        group={group}\n        showBudgetedCol={showBudgetedCol}\n        budgeted={\n          type === 'report'\n            ? reportBudget.groupBudgeted(group.id)\n            : rolloverBudget.groupBudgeted(group.id)\n        }\n        spent={\n          type === 'report'\n            ? reportBudget.groupSumAmount(group.id)\n            : rolloverBudget.groupSumAmount(group.id)\n        }\n        balance={\n          type === 'report'\n            ? reportBudget.groupBalance(group.id)\n            : rolloverBudget.groupBalance(group.id)\n        }\n        show3Cols={show3Cols}\n        editMode={editMode}\n        onAddCategory={onAddCategory}\n        onEdit={onEditGroup}\n        collapsed={collapsed}\n        onToggleCollapse={onToggleCollapse}\n        // onReorderCategory={onReorderCategory}\n      />\n\n      {group.categories\n        .filter(\n          category => !collapsed && (!category.hidden || showHiddenCategories),\n        )\n        .map((category, index) => {\n          return (\n            <ExpenseCategory\n              key={category.id}\n              index={index}\n              show3Cols={show3Cols}\n              type={type}\n              category={category}\n              isHidden={!!category.hidden || group.hidden}\n              goal={\n                type === 'report'\n                  ? reportBudget.catGoal(category.id)\n                  : rolloverBudget.catGoal(category.id)\n              }\n              longGoal={\n                type === 'report'\n                  ? reportBudget.catLongGoal(category.id)\n                  : rolloverBudget.catLongGoal(category.id)\n              }\n              budgeted={\n                type === 'report'\n                  ? reportBudget.catBudgeted(category.id)\n                  : rolloverBudget.catBudgeted(category.id)\n              }\n              spent={\n                type === 'report'\n                  ? reportBudget.catSumAmount(category.id)\n                  : rolloverBudget.catSumAmount(category.id)\n              }\n              balance={\n                type === 'report'\n                  ? reportBudget.catBalance(category.id)\n                  : rolloverBudget.catBalance(category.id)\n              }\n              carryover={\n                type === 'report'\n                  ? reportBudget.catCarryover(category.id)\n                  : rolloverBudget.catCarryover(category.id)\n              }\n              style={{\n                backgroundColor: theme.tableBackground,\n              }}\n              showBudgetedCol={showBudgetedCol}\n              editMode={editMode}\n              onEdit={onEditCategory}\n              // gestures={gestures}\n              month={month}\n              // onReorder={onReorderCategory}\n              onBudgetAction={onBudgetAction}\n            />\n          );\n        })}\n    </Card>,\n  );\n});\n\nfunction IncomeGroup({\n  type,\n  group,\n  month,\n  onAddCategory,\n  showHiddenCategories,\n  editMode,\n  onEditGroup,\n  onEditCategory,\n  onBudgetAction,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const columnWidth = getColumnWidth();\n  return (\n    <View>\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'flex-end',\n          marginTop: 50,\n          marginBottom: 5,\n          marginRight: 15,\n        }}\n      >\n        {type === 'report' && (\n          <Label title=\"Budgeted\" style={{ width: columnWidth }} />\n        )}\n        <Label title=\"Received\" style={{ width: columnWidth }} />\n      </View>\n\n      <Card style={{ marginTop: 0 }}>\n        <IncomeGroupHeader\n          group={group}\n          budgeted={\n            type === 'report' ? reportBudget.groupBudgeted(group.id) : null\n          }\n          balance={\n            type === 'report'\n              ? reportBudget.groupSumAmount(group.id)\n              : rolloverBudget.groupSumAmount(group.id)\n          }\n          onAddCategory={onAddCategory}\n          editMode={editMode}\n          onEdit={onEditGroup}\n          collapsed={collapsed}\n          onToggleCollapse={onToggleCollapse}\n        />\n\n        {group.categories\n          .filter(\n            category =>\n              !collapsed && (!category.hidden || showHiddenCategories),\n          )\n          .map((category, index) => {\n            return (\n              <IncomeCategory\n                key={category.id}\n                index={index}\n                category={category}\n                month={month}\n                type={type}\n                budgeted={\n                  type === 'report'\n                    ? reportBudget.catBudgeted(category.id)\n                    : null\n                }\n                balance={\n                  type === 'report'\n                    ? reportBudget.catSumAmount(category.id)\n                    : rolloverBudget.catSumAmount(category.id)\n                }\n                style={{\n                  backgroundColor: theme.tableBackground,\n                }}\n                editMode={editMode}\n                onEdit={onEditCategory}\n                onBudgetAction={onBudgetAction}\n              />\n            );\n          })}\n      </Card>\n    </View>\n  );\n}\n\nfunction BudgetGroups({\n  type,\n  categoryGroups,\n  onEditGroup,\n  onEditCategory,\n  editMode,\n  gestures,\n  month,\n  onSaveCategory,\n  onDeleteCategory,\n  onAddCategory,\n  onReorderCategory,\n  onReorderGroup,\n  onBudgetAction,\n  showBudgetedCol,\n  show3Cols,\n  showHiddenCategories,\n}) {\n  const separateGroups = memoizeOne(groups => {\n    return {\n      incomeGroup: groups.find(group => group.is_income),\n      expenseGroups: groups.filter(group => !group.is_income),\n    };\n  });\n\n  const { incomeGroup, expenseGroups } = separateGroups(categoryGroups);\n  const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\n    useLocalPref('budget.collapsed');\n\n  const onToggleCollapse = id => {\n    setCollapsedGroupIdsPref(\n      collapsedGroupIds.includes(id)\n        ? collapsedGroupIds.filter(collapsedId => collapsedId !== id)\n        : [...collapsedGroupIds, id],\n    );\n  };\n\n  return (\n    <View\n      data-testid=\"budget-groups\"\n      style={{ flex: '1 0 auto', overflowY: 'auto', paddingBottom: 15 }}\n    >\n      {expenseGroups\n        .filter(group => !group.hidden || showHiddenCategories)\n        .map(group => {\n          return (\n            <ExpenseGroup\n              key={group.id}\n              type={type}\n              group={group}\n              showBudgetedCol={showBudgetedCol}\n              gestures={gestures}\n              month={month}\n              editMode={editMode}\n              onEditGroup={onEditGroup}\n              onEditCategory={onEditCategory}\n              onSaveCategory={onSaveCategory}\n              onDeleteCategory={onDeleteCategory}\n              onAddCategory={onAddCategory}\n              onReorderCategory={onReorderCategory}\n              onReorderGroup={onReorderGroup}\n              onBudgetAction={onBudgetAction}\n              show3Cols={show3Cols}\n              showHiddenCategories={showHiddenCategories}\n              collapsed={collapsedGroupIds.includes(group.id)}\n              onToggleCollapse={onToggleCollapse}\n            />\n          );\n        })}\n\n      {incomeGroup && (\n        <IncomeGroup\n          type={type}\n          group={incomeGroup}\n          month={month}\n          onAddCategory={onAddCategory}\n          onSaveCategory={onSaveCategory}\n          onDeleteCategory={onDeleteCategory}\n          showHiddenCategories={showHiddenCategories}\n          editMode={editMode}\n          onEditGroup={onEditGroup}\n          onEditCategory={onEditCategory}\n          onBudgetAction={onBudgetAction}\n          collapsed={collapsedGroupIds.includes(incomeGroup.id)}\n          onToggleCollapse={onToggleCollapse}\n        />\n      )}\n    </View>\n  );\n}\n\nexport function BudgetTable({\n  type,\n  categoryGroups,\n  month,\n  monthBounds,\n  // editMode,\n  onPrevMonth,\n  onNextMonth,\n  onSaveGroup,\n  onDeleteGroup,\n  onAddCategory,\n  onSaveCategory,\n  onDeleteCategory,\n  onReorderCategory,\n  onReorderGroup,\n  onShowBudgetSummary,\n  onBudgetAction,\n  onRefresh,\n  onEditGroup,\n  onEditCategory,\n  onOpenBudgetPageMenu,\n  onOpenBudgetMonthMenu,\n}) {\n  const { width } = useResponsive();\n  const show3Cols = width >= 360;\n\n  // let editMode = false; // neuter editMode -- sorry, not rewriting drag-n-drop right now\n\n  const [showSpentColumn = false, setShowSpentColumnPref] = useLocalPref(\n    'mobile.showSpentColumn',\n  );\n\n  function toggleSpentColumn() {\n    setShowSpentColumnPref(!showSpentColumn);\n  }\n\n  const [showHiddenCategories = false] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n  const noBackgroundColorStyle = {\n    backgroundColor: 'transparent',\n    color: 'white',\n  };\n\n  return (\n    <Page\n      padding={0}\n      header={\n        <MobilePageHeader\n          title={\n            <MonthSelector\n              month={month}\n              monthBounds={monthBounds}\n              onOpenMonthMenu={onOpenBudgetMonthMenu}\n              onPrevMonth={onPrevMonth}\n              onNextMonth={onNextMonth}\n            />\n          }\n          leftContent={\n            <Button\n              variant=\"bare\"\n              style={({ isPressed, isHovered }) => ({\n                color: theme.mobileHeaderText,\n                margin: 10,\n                ...(isPressed || isHovered ? noBackgroundColorStyle : {}),\n              })}\n              onPress={onOpenBudgetPageMenu}\n            >\n              <SvgLogo width=\"20\" height=\"20\" />\n              <SvgCheveronRight\n                style={{ flexShrink: 0, color: theme.mobileHeaderTextSubdued }}\n                width=\"14\"\n                height=\"14\"\n              />\n            </Button>\n          }\n        />\n      }\n    >\n      <BudgetTableHeader\n        type={type}\n        month={month}\n        show3Cols={show3Cols}\n        showSpentColumn={showSpentColumn}\n        toggleSpentColumn={toggleSpentColumn}\n        onShowBudgetSummary={onShowBudgetSummary}\n      />\n      <PullToRefresh onRefresh={onRefresh}>\n        <View\n          data-testid=\"budget-table\"\n          style={{\n            backgroundColor: theme.pageBackground,\n            paddingBottom: MOBILE_NAV_HEIGHT,\n          }}\n        >\n          <BudgetGroups\n            type={type}\n            categoryGroups={categoryGroups}\n            showBudgetedCol={!showSpentColumn}\n            show3Cols={show3Cols}\n            showHiddenCategories={showHiddenCategories}\n            month={month}\n            // gestures={gestures}\n            // editMode={editMode}\n            onEditGroup={onEditGroup}\n            onEditCategory={onEditCategory}\n            onSaveCategory={onSaveCategory}\n            onDeleteCategory={onDeleteCategory}\n            onAddCategory={onAddCategory}\n            onSaveGroup={onSaveGroup}\n            onDeleteGroup={onDeleteGroup}\n            onReorderCategory={onReorderCategory}\n            onReorderGroup={onReorderGroup}\n            onBudgetAction={onBudgetAction}\n          />\n        </View>\n      </PullToRefresh>\n    </Page>\n  );\n}\n\nfunction BudgetTableHeader({\n  show3Cols,\n  type,\n  month,\n  onShowBudgetSummary,\n  showSpentColumn,\n  toggleSpentColumn,\n}) {\n  const format = useFormat();\n  const buttonStyle = {\n    padding: 0,\n    backgroundColor: 'transparent',\n    borderRadius: 'unset',\n  };\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n  const columnWidth = getColumnWidth({ show3Cols });\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        flexShrink: 0,\n        padding: '10px 15px',\n        paddingLeft: 10,\n        backgroundColor: theme.tableRowHeaderBackground,\n        borderBottomWidth: 1,\n        borderColor: theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: sidebarColumnWidth,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n        }}\n      >\n        {type === 'report' ? (\n          <Saved\n            projected={month >= monthUtils.currentMonth()}\n            onPress={onShowBudgetSummary}\n            show3Cols={show3Cols}\n          />\n        ) : (\n          <ToBudget\n            toBudget={rolloverBudget.toBudget}\n            onPress={onShowBudgetSummary}\n            show3Cols={show3Cols}\n          />\n        )}\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n        }}\n      >\n        {(show3Cols || !showSpentColumn) && (\n          <View\n            style={{\n              width: columnWidth,\n              alignItems: 'flex-end',\n            }}\n          >\n            <Button\n              variant=\"bare\"\n              isDisabled={show3Cols}\n              onPress={toggleSpentColumn}\n              style={buttonStyle}\n            >\n              <View style={{ alignItems: 'flex-end' }}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  {!show3Cols && (\n                    <SvgViewShow\n                      width={12}\n                      height={12}\n                      style={{\n                        color: theme.pageTextSubdued,\n                        marginRight: 5,\n                      }}\n                    />\n                  )}\n                  <Label\n                    title=\"Budgeted\"\n                    style={{ color: theme.formInputText }}\n                  />\n                </View>\n                <CellValue\n                  binding={\n                    type === 'report'\n                      ? reportBudget.totalBudgetedExpense\n                      : rolloverBudget.totalBudgeted\n                  }\n                  type=\"financial\"\n                  formatter={value => (\n                    <AutoTextSize\n                      key={value}\n                      as={Text}\n                      minFontSizePx={6}\n                      maxFontSizePx={12}\n                      mode=\"oneline\"\n                      style={{\n                        maxWidth: columnWidth,\n                        color: theme.formInputText,\n                        paddingLeft: 5,\n                        textAlign: 'right',\n                        fontSize: 12,\n                        fontWeight: '500',\n                      }}\n                    >\n                      {format(value, 'financial')}\n                    </AutoTextSize>\n                  )}\n                />\n              </View>\n            </Button>\n          </View>\n        )}\n        {(show3Cols || showSpentColumn) && (\n          <View\n            style={{\n              width: columnWidth,\n              alignItems: 'flex-end',\n            }}\n          >\n            <Button\n              variant=\"bare\"\n              isDisabled={show3Cols}\n              onPress={toggleSpentColumn()}\n              style={buttonStyle}\n            >\n              <View style={{ alignItems: 'flex-end' }}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  {!show3Cols && (\n                    <SvgViewShow\n                      width={12}\n                      height={12}\n                      style={{\n                        color: theme.pageTextSubdued,\n                        marginRight: 5,\n                      }}\n                    />\n                  )}\n                  <Label title=\"Spent\" style={{ color: theme.formInputText }} />\n                </View>\n                <CellValue\n                  binding={\n                    type === 'report'\n                      ? reportBudget.totalSpent\n                      : rolloverBudget.totalSpent\n                  }\n                  type=\"financial\"\n                  formatter={value => (\n                    <AutoTextSize\n                      key={value}\n                      as={Text}\n                      minFontSizePx={6}\n                      maxFontSizePx={12}\n                      mode=\"oneline\"\n                      style={{\n                        maxWidth: columnWidth,\n                        color: theme.formInputText,\n                        paddingLeft: 5,\n                        textAlign: 'right',\n                        fontSize: 12,\n                        fontWeight: '500',\n                      }}\n                    >\n                      {format(value, 'financial')}\n                    </AutoTextSize>\n                  )}\n                />\n              </View>\n            </Button>\n          </View>\n        )}\n        <View\n          style={{\n            width: columnWidth,\n            alignItems: 'flex-end',\n          }}\n        >\n          <Label title=\"Balance\" style={{ color: theme.formInputText }} />\n          <CellValue\n            binding={\n              type === 'report'\n                ? reportBudget.totalLeftover\n                : rolloverBudget.totalBalance\n            }\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  color: theme.formInputText,\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                  fontSize: 12,\n                  fontWeight: '500',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nfunction MonthSelector({\n  month,\n  monthBounds,\n  onOpenMonthMenu,\n  onPrevMonth,\n  onNextMonth,\n}) {\n  const prevEnabled = month > monthBounds.start;\n  const nextEnabled = month < monthUtils.subMonths(monthBounds.end, 1);\n\n  const arrowButtonStyle = {\n    padding: 10,\n    margin: 2,\n  };\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n      }}\n    >\n      <Button\n        variant=\"bare\"\n        onPress={() => {\n          if (prevEnabled) {\n            onPrevMonth();\n          }\n        }}\n        style={({ isHovered }) => ({\n          ...styles.noTapHighlight,\n          ...arrowButtonStyle,\n          opacity: prevEnabled ? 1 : 0.6,\n          color: theme.mobileHeaderText,\n          ...(isHovered\n            ? {\n                color: theme.mobileHeaderText,\n                background: theme.mobileHeaderTextHover,\n              }\n            : {}),\n        })}\n      >\n        <SvgArrowThinLeft width=\"15\" height=\"15\" style={{ margin: -5 }} />\n      </Button>\n      <Text\n        style={{\n          color: theme.mobileHeaderText,\n          textAlign: 'center',\n          fontSize: 16,\n          fontWeight: 500,\n          margin: '0 5px',\n          ...styles.underlinedText,\n        }}\n        onPointerUp={e => {\n          e.stopPropagation();\n          onOpenMonthMenu?.(month);\n        }}\n      >\n        {monthUtils.format(month, 'MMMM ‘yy')}\n      </Text>\n      <Button\n        variant=\"bare\"\n        onPress={() => {\n          if (nextEnabled) {\n            onNextMonth();\n          }\n        }}\n        style={({ isHovered }) => ({\n          ...styles.noTapHighlight,\n          ...arrowButtonStyle,\n          opacity: nextEnabled ? 1 : 0.6,\n          color: theme.mobileHeaderText,\n          ...(isHovered\n            ? {\n                color: theme.mobileHeaderText,\n                background: theme.mobileHeaderTextHover,\n              }\n            : {}),\n        })}\n      >\n        <SvgArrowThinRight width=\"15\" height=\"15\" style={{ margin: -5 }} />\n      </Button>\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  applyBudgetAction,\n  collapseModals,\n  createCategory,\n  createGroup,\n  deleteCategory,\n  deleteGroup,\n  getCategories,\n  moveCategory,\n  moveCategoryGroup,\n  pushModal,\n  updateCategory,\n  updateGroup,\n  sync,\n} from 'loot-core/client/actions';\nimport { useSpreadsheet } from 'loot-core/src/client/SpreadsheetProvider';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport * as monthUtils from 'loot-core/src/shared/months';\nimport {\n  type CategoryEntity,\n  type CategoryGroupEntity,\n} from 'loot-core/src/types/models';\n\nimport { useCategories } from '../../../hooks/useCategories';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { AnimatedLoading } from '../../../icons/AnimatedLoading';\nimport { theme } from '../../../style';\nimport { prewarmMonth } from '../../budget/util';\nimport { View } from '../../common/View';\nimport { NamespaceContext } from '../../spreadsheet/NamespaceContext';\nimport { SyncRefresh } from '../../SyncRefresh';\n\nimport { BudgetTable } from './BudgetTable';\n\ntype BudgetInnerProps = {\n  categories: CategoryEntity[];\n  categoryGroups: CategoryGroupEntity[];\n  budgetType: 'rollover' | 'report';\n  spreadsheet: ReturnType<typeof useSpreadsheet>;\n};\n\nfunction BudgetInner(props: BudgetInnerProps) {\n  const { categoryGroups, categories, budgetType, spreadsheet } = props;\n\n  const currMonth = monthUtils.currentMonth();\n  const [startMonth = currMonth, setStartMonthPref] =\n    useLocalPref('budget.startMonth');\n  const [bounds, setBounds] = useState({\n    start: startMonth,\n    end: startMonth,\n  });\n  const [initialized, setInitialized] = useState(false);\n  // const [editMode, setEditMode] = useState(false);\n\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useSyncedPref('hideFraction');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function init() {\n      const { start, end } = await send('get-budget-bounds');\n      setBounds({ start, end });\n\n      await prewarmMonth(budgetType, spreadsheet, startMonth);\n\n      setInitialized(true);\n    }\n\n    init();\n\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (\n        type === 'success' &&\n        (tables.includes('categories') ||\n          tables.includes('category_mapping') ||\n          tables.includes('category_groups'))\n      ) {\n        // TODO: is this loading every time?\n        dispatch(getCategories());\n      }\n    });\n\n    return () => unlisten();\n  }, [budgetType, startMonth, dispatch, spreadsheet]);\n\n  const onBudgetAction = async (month, type, args) => {\n    dispatch(applyBudgetAction(month, type, args));\n  };\n\n  const onShowBudgetSummary = () => {\n    if (budgetType === 'report') {\n      dispatch(\n        pushModal('report-budget-summary', {\n          month: startMonth,\n        }),\n      );\n    } else {\n      dispatch(\n        pushModal('rollover-budget-summary', {\n          month: startMonth,\n          onBudgetAction,\n        }),\n      );\n    }\n  };\n\n  const onOpenNewCategoryGroupModal = () => {\n    dispatch(\n      pushModal('new-category-group', {\n        onValidate: name => (!name ? 'Name is required.' : null),\n        onSubmit: async name => {\n          dispatch(collapseModals('budget-page-menu'));\n          dispatch(createGroup(name));\n        },\n      }),\n    );\n  };\n\n  const onOpenNewCategoryModal = (groupId, isIncome) => {\n    dispatch(\n      pushModal('new-category', {\n        onValidate: name => (!name ? 'Name is required.' : null),\n        onSubmit: async name => {\n          dispatch(collapseModals('category-group-menu'));\n          dispatch(createCategory(name, groupId, isIncome, false));\n        },\n      }),\n    );\n  };\n\n  const onSaveGroup = group => {\n    dispatch(updateGroup(group));\n  };\n\n  const onDeleteGroup = async groupId => {\n    const group = categoryGroups?.find(g => g.id === groupId);\n\n    if (!group) {\n      return;\n    }\n\n    let mustTransfer = false;\n    for (const category of group.categories ?? []) {\n      if (await send('must-category-transfer', { id: category.id })) {\n        mustTransfer = true;\n        break;\n      }\n    }\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          group: groupId,\n          onDelete: transferCategory => {\n            dispatch(collapseModals('category-group-menu'));\n            dispatch(deleteGroup(groupId, transferCategory));\n          },\n        }),\n      );\n    } else {\n      dispatch(collapseModals('category-group-menu'));\n      dispatch(deleteGroup(groupId));\n    }\n  };\n\n  const onToggleGroupVisibility = groupId => {\n    const group = categoryGroups.find(g => g.id === groupId);\n    onSaveGroup({\n      ...group,\n      hidden: !!!group.hidden,\n    });\n    dispatch(collapseModals('category-group-menu'));\n  };\n\n  const onSaveCategory = category => {\n    dispatch(updateCategory(category));\n  };\n\n  const onDeleteCategory = async categoryId => {\n    const mustTransfer = await send('must-category-transfer', {\n      id: categoryId,\n    });\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          category: categoryId,\n          onDelete: transferCategory => {\n            if (categoryId !== transferCategory) {\n              dispatch(collapseModals('category-menu'));\n              dispatch(deleteCategory(categoryId, transferCategory));\n            }\n          },\n        }),\n      );\n    } else {\n      dispatch(collapseModals('category-menu'));\n      dispatch(deleteCategory(categoryId));\n    }\n  };\n\n  const onToggleCategoryVisibility = categoryId => {\n    const category = categories.find(c => c.id === categoryId);\n    onSaveCategory({\n      ...category,\n      hidden: !!!category.hidden,\n    });\n    dispatch(collapseModals('category-menu'));\n  };\n\n  const onReorderCategory = (id, { inGroup, aroundCategory }) => {\n    let groupId, targetId;\n\n    if (inGroup) {\n      groupId = inGroup;\n    } else if (aroundCategory) {\n      const { id: originalCatId, position } = aroundCategory;\n\n      let catId = originalCatId;\n      const group = categoryGroups.find(group =>\n        group.categories?.find(cat => cat.id === catId),\n      );\n\n      if (position === 'bottom') {\n        const idx = group?.categories?.findIndex(cat => cat.id === catId) ?? -1;\n        catId = group?.categories\n          ? idx < group.categories.length - 1\n            ? group.categories[idx + 1].id\n            : null\n          : null;\n      }\n\n      groupId = group?.id;\n      targetId = catId;\n    }\n\n    dispatch(moveCategory(id, groupId, targetId));\n  };\n\n  const onReorderGroup = (id, targetId, position) => {\n    if (position === 'bottom') {\n      const idx = categoryGroups.findIndex(group => group.id === targetId);\n      targetId =\n        idx < categoryGroups.length - 1 ? categoryGroups[idx + 1].id : null;\n    }\n\n    dispatch(moveCategoryGroup(id, targetId));\n  };\n\n  const onPrevMonth = async () => {\n    const month = monthUtils.subMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  };\n\n  const onNextMonth = async () => {\n    const month = monthUtils.addMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  };\n\n  // const onOpenMonthActionMenu = () => {\n  //   const options = [\n  //     'Copy last month’s budget',\n  //     'Set budgets to zero',\n  //     'Set budgets to 3 month average',\n  //     budgetType === 'report' && 'Apply to all future budgets',\n  //   ].filter(Boolean);\n\n  //   props.showActionSheetWithOptions(\n  //     {\n  //       options,\n  //       cancelButtonIndex: options.length - 1,\n  //       title: 'Actions',\n  //     },\n  //     idx => {\n  //       switch (idx) {\n  //         case 0:\n  //           setEditMode(true);\n  //           break;\n  //         case 1:\n  //           onBudgetAction('copy-last');\n  //           break;\n  //         case 2:\n  //           onBudgetAction('set-zero');\n  //           break;\n  //         case 3:\n  //           onBudgetAction('set-3-avg');\n  //           break;\n  //         case 4:\n  //           if (budgetType === 'report') {\n  //             onBudgetAction('set-all-future');\n  //           }\n  //           break;\n  //         default:\n  //       }\n  //     },\n  //   );\n  // };\n\n  const onSaveNotes = async (id, notes) => {\n    await send('notes-save', { id, note: notes });\n  };\n\n  const onOpenCategoryGroupNotesModal = id => {\n    const group = categoryGroups.find(g => g.id === id);\n    dispatch(\n      pushModal('notes', {\n        id,\n        name: group.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onOpenCategoryNotesModal = id => {\n    const category = categories.find(c => c.id === id);\n    dispatch(\n      pushModal('notes', {\n        id,\n        name: category.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onOpenCategoryGroupMenuModal = id => {\n    const group = categoryGroups.find(g => g.id === id);\n    dispatch(\n      pushModal('category-group-menu', {\n        groupId: group.id,\n        onSave: onSaveGroup,\n        onAddCategory: onOpenNewCategoryModal,\n        onEditNotes: onOpenCategoryGroupNotesModal,\n        onDelete: onDeleteGroup,\n        onToggleVisibility: onToggleGroupVisibility,\n      }),\n    );\n  };\n\n  const onOpenCategoryMenuModal = id => {\n    const category = categories.find(c => c.id === id);\n    dispatch(\n      pushModal('category-menu', {\n        categoryId: category.id,\n        onSave: onSaveCategory,\n        onEditNotes: onOpenCategoryNotesModal,\n        onDelete: onDeleteCategory,\n        onToggleVisibility: onToggleCategoryVisibility,\n        onBudgetAction,\n      }),\n    );\n  };\n\n  const [showHiddenCategories, setShowHiddenCategoriesPref] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n\n  const onToggleHiddenCategories = () => {\n    setShowHiddenCategoriesPref(!showHiddenCategories);\n    dispatch(collapseModals('budget-page-menu'));\n  };\n\n  const onOpenBudgetMonthNotesModal = month => {\n    dispatch(\n      pushModal('notes', {\n        id: `budget-${month}`,\n        name: monthUtils.format(month, 'MMMM ‘yy'),\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onSwitchBudgetFile = () => {\n    dispatch(pushModal('budget-list'));\n  };\n\n  const onOpenBudgetMonthMenu = month => {\n    dispatch(\n      pushModal(`${budgetType}-budget-month-menu`, {\n        month,\n        onBudgetAction,\n        onEditNotes: onOpenBudgetMonthNotesModal,\n      }),\n    );\n  };\n\n  const onOpenBudgetPageMenu = () => {\n    dispatch(\n      pushModal('budget-page-menu', {\n        onAddCategoryGroup: onOpenNewCategoryGroupModal,\n        onToggleHiddenCategories,\n        onSwitchBudgetFile,\n      }),\n    );\n  };\n\n  if (!categoryGroups || !initialized) {\n    return (\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: theme.mobilePageBackground,\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: 25,\n        }}\n      >\n        <AnimatedLoading width={25} height={25} />\n      </View>\n    );\n  }\n\n  return (\n    <NamespaceContext.Provider value={monthUtils.sheetForMonth(startMonth)}>\n      <SyncRefresh\n        onSync={async () => {\n          dispatch(sync());\n        }}\n      >\n        {({ onRefresh }) => (\n          <BudgetTable\n            // This key forces the whole table rerender when the number\n            // format changes\n            key={`${numberFormat}${hideFraction}`}\n            categoryGroups={categoryGroups}\n            type={budgetType}\n            month={startMonth}\n            monthBounds={bounds}\n            // editMode={editMode}\n            onShowBudgetSummary={onShowBudgetSummary}\n            onPrevMonth={onPrevMonth}\n            onNextMonth={onNextMonth}\n            onSaveGroup={onSaveGroup}\n            onDeleteGroup={onDeleteGroup}\n            onAddCategory={onOpenNewCategoryModal}\n            onSaveCategory={onSaveCategory}\n            onDeleteCategory={onDeleteCategory}\n            onReorderCategory={onReorderCategory}\n            onReorderGroup={onReorderGroup}\n            onBudgetAction={onBudgetAction}\n            onRefresh={onRefresh}\n            onEditGroup={onOpenCategoryGroupMenuModal}\n            onEditCategory={onOpenCategoryMenuModal}\n            onOpenBudgetPageMenu={onOpenBudgetPageMenu}\n            onOpenBudgetMonthMenu={onOpenBudgetMonthMenu}\n          />\n        )}\n      </SyncRefresh>\n    </NamespaceContext.Provider>\n  );\n}\n\nexport function Budget() {\n  const { list: categories, grouped: categoryGroups } = useCategories();\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\n  const spreadsheet = useSpreadsheet();\n  useSetThemeColor(theme.mobileViewTheme);\n  return (\n    <BudgetInner\n      categoryGroups={categoryGroups}\n      categories={categories}\n      budgetType={budgetType}\n      spreadsheet={spreadsheet}\n    />\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { replaceModal, syncAndDownload } from 'loot-core/src/client/actions';\nimport * as queries from 'loot-core/src/client/queries';\n\nimport { useAccounts } from '../../../hooks/useAccounts';\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { SvgAdd } from '../../../icons/v1';\nimport { theme, styles } from '../../../style';\nimport { makeAmountFullStyle } from '../../budget/util';\nimport { Button } from '../../common/Button2';\nimport { Text } from '../../common/Text';\nimport { TextOneLine } from '../../common/TextOneLine';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { CellValue } from '../../spreadsheet/CellValue';\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\nimport { PullToRefresh } from '../PullToRefresh';\n\nfunction AccountHeader({ name, amount, style = {} }) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        marginTop: 10,\n        marginRight: 10,\n        color: theme.pageTextLight,\n        width: '100%',\n        ...style,\n      }}\n    >\n      <View style={{ flex: 1 }}>\n        <Text\n          style={{\n            ...styles.text,\n            fontSize: 14,\n          }}\n          data-testid=\"name\"\n        >\n          {name}\n        </Text>\n      </View>\n      <CellValue\n        binding={amount}\n        style={{ ...styles.text, fontSize: 14 }}\n        type=\"financial\"\n      />\n    </View>\n  );\n}\n\nfunction AccountCard({\n  account,\n  updated,\n  connected,\n  pending,\n  failed,\n  getBalanceQuery,\n  onSelect,\n}) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        backgroundColor: theme.tableBackground,\n        boxShadow: `0 1px 1px ${theme.mobileAccountShadow}`,\n        borderRadius: 6,\n        marginTop: 10,\n        marginRight: 10,\n        width: '100%',\n      }}\n      data-testid=\"account\"\n    >\n      <Button\n        onPress={() => onSelect(account.id)}\n        style={({ isPressed }) => ({\n          flexDirection: 'row',\n          border: '1px solid ' + theme.pillBorder,\n          flex: 1,\n          alignItems: 'center',\n          borderRadius: 6,\n          ...(isPressed && {\n            opacity: 0.1,\n          }),\n        })}\n      >\n        <View\n          style={{\n            flex: 1,\n            margin: '10px 0',\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            {account.bankId && (\n              <View\n                style={{\n                  backgroundColor: pending\n                    ? theme.sidebarItemBackgroundPending\n                    : failed\n                      ? theme.sidebarItemBackgroundFailed\n                      : theme.sidebarItemBackgroundPositive,\n                  marginRight: '8px',\n                  width: 8,\n                  flexShrink: 0,\n                  height: 8,\n                  borderRadius: 8,\n                  opacity: connected ? 1 : 0,\n                }}\n              />\n            )}\n            <TextOneLine\n              style={{\n                ...styles.text,\n                fontSize: 17,\n                fontWeight: 600,\n                color: updated ? theme.mobileAccountText : theme.pillText,\n                paddingRight: 30,\n              }}\n              data-testid=\"account-name\"\n            >\n              {account.name}\n            </TextOneLine>\n          </View>\n        </View>\n        <CellValue\n          binding={getBalanceQuery(account)}\n          type=\"financial\"\n          style={{ fontSize: 16, color: 'inherit' }}\n          getStyle={makeAmountFullStyle}\n          data-testid=\"account-balance\"\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction EmptyMessage() {\n  return (\n    <View style={{ flex: 1, padding: 30 }}>\n      <Text style={styles.text}>\n        For Actual to be useful, you need to add an account. You can link an\n        account to automatically download transactions, or manage it locally\n        yourself.\n      </Text>\n    </View>\n  );\n}\n\nfunction AccountList({\n  accounts,\n  updatedAccounts,\n  getBalanceQuery,\n  getOnBudgetBalance,\n  getOffBudgetBalance,\n  onAddAccount,\n  onSelectAccount,\n  onSync,\n}) {\n  const failedAccounts = useFailedAccounts();\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\n  const budgetedAccounts = accounts.filter(account => account.offbudget === 0);\n  const offbudgetAccounts = accounts.filter(account => account.offbudget === 1);\n  const noBackgroundColorStyle = {\n    backgroundColor: 'transparent',\n    color: 'white',\n  };\n\n  return (\n    <Page\n      header={\n        <MobilePageHeader\n          title=\"Accounts\"\n          rightContent={\n            <Button\n              variant=\"bare\"\n              style={({ isHovered, isPressed }) => ({\n                color: theme.mobileHeaderText,\n                margin: 10,\n                ...(isHovered || isPressed ? noBackgroundColorStyle : {}),\n              })}\n              onPress={onAddAccount}\n            >\n              <SvgAdd width={20} height={20} />\n            </Button>\n          }\n        />\n      }\n      padding={0}\n      style={{\n        paddingBottom: MOBILE_NAV_HEIGHT,\n      }}\n    >\n      {accounts.length === 0 && <EmptyMessage />}\n      <PullToRefresh onRefresh={onSync}>\n        <View style={{ margin: 10 }}>\n          {budgetedAccounts.length > 0 && (\n            <AccountHeader name=\"For Budget\" amount={getOnBudgetBalance()} />\n          )}\n          {budgetedAccounts.map(acct => (\n            <AccountCard\n              account={acct}\n              key={acct.id}\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\n              connected={!!acct.bank}\n              pending={syncingAccountIds.includes(acct.id)}\n              failed={failedAccounts && failedAccounts.has(acct.id)}\n              getBalanceQuery={getBalanceQuery}\n              onSelect={onSelectAccount}\n            />\n          ))}\n\n          {offbudgetAccounts.length > 0 && (\n            <AccountHeader\n              name=\"Off Budget\"\n              amount={getOffBudgetBalance()}\n              style={{ marginTop: 30 }}\n            />\n          )}\n          {offbudgetAccounts.map(acct => (\n            <AccountCard\n              account={acct}\n              key={acct.id}\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\n              connected={!!acct.bank}\n              pending={syncingAccountIds.includes(acct.id)}\n              failed={failedAccounts && failedAccounts.has(acct.id)}\n              getBalanceQuery={getBalanceQuery}\n              onSelect={onSelectAccount}\n            />\n          ))}\n        </View>\n      </PullToRefresh>\n    </Page>\n  );\n}\n\nexport function Accounts() {\n  const dispatch = useDispatch();\n  const accounts = useAccounts();\n  const updatedAccounts = useSelector(state => state.queries.updatedAccounts);\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useSyncedPref('hideFraction');\n\n  const navigate = useNavigate();\n\n  const onSelectAccount = id => {\n    navigate(`/accounts/${id}`);\n  };\n\n  const onAddAccount = () => {\n    dispatch(replaceModal('add-account'));\n  };\n\n  const onSync = () => {\n    dispatch(syncAndDownload());\n  };\n\n  useSetThemeColor(theme.mobileViewTheme);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <AccountList\n        // This key forces the whole table rerender when the number\n        // format changes\n        key={numberFormat + hideFraction}\n        accounts={accounts.filter(account => !account.closed)}\n        updatedAccounts={updatedAccounts}\n        getBalanceQuery={queries.accountBalance}\n        getOnBudgetBalance={queries.budgetedAccountBalance}\n        getOffBudgetBalance={queries.offbudgetAccountBalance}\n        onAddAccount={onAddAccount}\n        onSelectAccount={onSelectAccount}\n        onSync={onSync}\n      />\n    </View>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useDebounceCallback } from 'usehooks-ts';\n\nimport {\n  collapseModals,\n  getPayees,\n  markAccountRead,\n  openAccountCloseModal,\n  pushModal,\n  reopenAccount,\n  syncAndDownload,\n  updateAccount,\n} from 'loot-core/client/actions';\nimport {\n  SchedulesProvider,\n  useDefaultSchedulesQueryTransform,\n} from 'loot-core/client/data-hooks/schedules';\nimport * as queries from 'loot-core/client/queries';\nimport { pagedQuery } from 'loot-core/client/query-helpers';\nimport { listen, send } from 'loot-core/platform/client/fetch';\nimport { isPreviewId } from 'loot-core/shared/transactions';\n\nimport { useDateFormat } from '../../../hooks/useDateFormat';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { usePreviewTransactions } from '../../../hooks/usePreviewTransactions';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { styles, theme } from '../../../style';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { MobileBackButton } from '../MobileBackButton';\nimport { AddTransactionButton } from '../transactions/AddTransactionButton';\nimport { TransactionListWithBalances } from '../transactions/TransactionListWithBalances';\n\nexport function AccountTransactions({ account, pending, failed }) {\n  const schedulesTransform = useDefaultSchedulesQueryTransform(account.id);\n  return (\n    <Page\n      header={\n        <MobilePageHeader\n          title={\n            <AccountName account={account} pending={pending} failed={failed} />\n          }\n          leftContent={<MobileBackButton />}\n          rightContent={<AddTransactionButton accountId={account.id} />}\n        />\n      }\n      padding={0}\n    >\n      <SchedulesProvider transform={schedulesTransform}>\n        <TransactionListWithPreviews account={account} />\n      </SchedulesProvider>\n    </Page>\n  );\n}\n\nfunction AccountName({ account, pending, failed }) {\n  const dispatch = useDispatch();\n\n  const onSave = account => {\n    dispatch(updateAccount(account));\n  };\n\n  const onSaveNotes = async (id, notes) => {\n    await send('notes-save', { id, note: notes });\n  };\n\n  const onEditNotes = id => {\n    dispatch(\n      pushModal('notes', {\n        id: `account-${id}`,\n        name: account.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onCloseAccount = () => {\n    dispatch(openAccountCloseModal(account.id));\n  };\n\n  const onReopenAccount = () => {\n    dispatch(reopenAccount(account.id));\n  };\n\n  const onClick = () => {\n    dispatch(\n      pushModal('account-menu', {\n        accountId: account.id,\n        onSave,\n        onEditNotes,\n        onCloseAccount,\n        onReopenAccount,\n      }),\n    );\n  };\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {account.bankId && (\n        <div\n          style={{\n            margin: 'auto',\n            marginRight: 5,\n            width: 8,\n            height: 8,\n            borderRadius: 8,\n            flexShrink: 0,\n            backgroundColor: pending\n              ? theme.sidebarItemBackgroundPending\n              : failed\n                ? theme.sidebarItemBackgroundFailed\n                : theme.sidebarItemBackgroundPositive,\n            transition: 'transform .3s',\n          }}\n        />\n      )}\n      <Text\n        style={{ ...styles.underlinedText, ...styles.lineClamp(2) }}\n        onClick={onClick}\n      >\n        {`${account.closed ? 'Closed: ' : ''}${account.name}`}\n      </Text>\n    </View>\n  );\n}\n\nfunction TransactionListWithPreviews({ account }) {\n  const [currentQuery, setCurrentQuery] = useState();\n  const [isSearching, setIsSearching] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [transactions, setTransactions] = useState([]);\n  const prependTransactions = usePreviewTransactions();\n  const allTransactions = useMemo(\n    () =>\n      !isSearching ? prependTransactions.concat(transactions) : transactions,\n    [isSearching, prependTransactions, transactions],\n  );\n\n  const dateFormat = useDateFormat() || 'MM/dd/yyyy';\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onRefresh = async () => {\n    await dispatch(syncAndDownload(account.id));\n  };\n\n  const makeRootQuery = useCallback(\n    () => queries.makeTransactionsQuery(account.id).options({ splits: 'none' }),\n    [account.id],\n  );\n\n  const paged = useRef(null);\n\n  const updateQuery = useCallback(query => {\n    paged.current?.unsubscribe();\n    setIsLoading(true);\n    paged.current = pagedQuery(\n      query.options({ splits: 'none' }).select('*'),\n      data => {\n        setTransactions(data);\n        setIsLoading(false);\n      },\n      { pageCount: 50 },\n    );\n  }, []);\n\n  const fetchTransactions = useCallback(() => {\n    const query = makeRootQuery();\n    setCurrentQuery(query);\n    updateQuery(query);\n  }, [makeRootQuery, updateQuery]);\n\n  const refetchTransactions = () => {\n    paged.current?.run();\n  };\n\n  useEffect(() => {\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (type === 'applied') {\n        if (\n          tables.includes('transactions') ||\n          tables.includes('category_mapping') ||\n          tables.includes('payee_mapping')\n        ) {\n          refetchTransactions();\n        }\n\n        if (tables.includes('payees') || tables.includes('payee_mapping')) {\n          dispatch(getPayees());\n        }\n      }\n    });\n\n    fetchTransactions();\n    dispatch(markAccountRead(account.id));\n    return () => unlisten();\n  }, [account.id, dispatch, fetchTransactions]);\n\n  const updateSearchQuery = useDebounceCallback(\n    useCallback(\n      searchText => {\n        if (searchText === '' && currentQuery) {\n          updateQuery(currentQuery);\n        } else if (searchText && currentQuery) {\n          updateQuery(\n            queries.makeTransactionSearchQuery(\n              currentQuery,\n              searchText,\n              dateFormat,\n            ),\n          );\n        }\n\n        setIsSearching(searchText !== '');\n      },\n      [currentQuery, dateFormat, updateQuery],\n    ),\n    150,\n  );\n\n  const onSearch = text => {\n    updateSearchQuery(text);\n  };\n\n  const onOpenTransaction = transaction => {\n    if (!isPreviewId(transaction.id)) {\n      navigate(`/transactions/${transaction.id}`);\n    } else {\n      dispatch(\n        pushModal('scheduled-transaction-menu', {\n          transactionId: transaction.id,\n          onPost: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/post-transaction', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n          onSkip: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/skip-next-date', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n        }),\n      );\n    }\n  };\n\n  const onLoadMore = () => {\n    paged.current?.fetchNext();\n  };\n\n  const balance = queries.accountBalance(account);\n  const balanceCleared = queries.accountBalanceCleared(account);\n  const balanceUncleared = queries.accountBalanceUncleared(account);\n\n  return (\n    <TransactionListWithBalances\n      isLoading={isLoading}\n      transactions={allTransactions}\n      balance={balance}\n      balanceCleared={balanceCleared}\n      balanceUncleared={balanceUncleared}\n      onLoadMore={onLoadMore}\n      searchPlaceholder={`Search ${account.name}`}\n      onSearch={onSearch}\n      onOpenTransaction={onOpenTransaction}\n      onRefresh={onRefresh}\n    />\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { useAccount } from '../../../hooks/useAccount';\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { theme, styles } from '../../../style';\nimport { Button } from '../../common/Button';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\n\nimport { AccountTransactions } from './AccountTransactions';\n\nexport function Account() {\n  const failedAccounts = useFailedAccounts();\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\n\n  const navigate = useNavigate();\n\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useSyncedPref('hideFraction');\n\n  const { id: accountId } = useParams();\n\n  useSetThemeColor(theme.mobileViewTheme);\n\n  const account = useAccount(accountId);\n\n  if (!account) {\n    return null;\n  }\n\n  if (\n    accountId === 'budgeted' ||\n    accountId === 'offbudget' ||\n    accountId === 'uncategorized'\n  ) {\n    return (\n      <View style={{ flex: 1, padding: 30 }}>\n        <Text style={(styles.text, { textAlign: 'center' })}>\n          There is no Mobile View at the moment\n        </Text>\n        <Button\n          type=\"normal\"\n          style={{ fontSize: 15, marginLeft: 10, marginTop: 10 }}\n          onClick={() => navigate('/accounts')}\n        >\n          Go back to Mobile Accounts\n        </Button>\n      </View>\n    );\n  }\n\n  return (\n    <AccountTransactions\n      // This key forces the whole table rerender when the number\n      // format changes\n      key={numberFormat + hideFraction}\n      account={account}\n      pending={syncingAccountIds.includes(account.id)}\n      failed={failedAccounts && failedAccounts.has(account.id)}\n    />\n  );\n}\n"],"names":["SvgArrowThickRight","props","_jsx","svg","xmlns","viewBox","style","color","path","d","fill","SvgArrowThinLeft","SyncRefresh","onSync","children","syncing","setSyncing","useState","onSync_","_Fragment","refreshing","onRefresh","Card","ref","View","marginTop","marginLeft","marginRight","borderRadius","backgroundColor","theme","cardBackground","borderColor","cardBorder","boxShadow","overflow","displayName","ROW_HEIGHT","ListItem","height","borderBottomWidth","tableBorder","flexDirection","alignItems","paddingLeft","paddingRight","zIndex","PILL_STYLE","pillText","pillBackgroundLight","getColumnWidth","show3Cols","isSidebar","offset","ToBudget","toBudget","onPress","amount","useSheetValue","format","useFormat","sidebarColumnWidth","justifyContent","width","Button","variant","maxWidth","Label","title","styles","smallText","formInputText","flexShrink","textAlign","CellValue","binding","type","formatter","value","AutoTextSize","as","Text","minFontSizePx","maxFontSizePx","mode","fontSize","fontWeight","errorText","SvgCheveronRight","mobileHeaderTextSubdued","Saved","projected","reportBudget","totalBudgetedSaved","totalSaved","saved","isNegative","warningText","errorTextDark","BudgetCell","name","categoryId","month","onBudgetAction","dispatch","useDispatch","budgetType","useSyncedPref","categoryBudgetMenuModal","onOpenCategoryBudgetMenu","pushModal","onUpdateBudget","category","onCopyLastMonthAverage","onSetMonthsAverage","numberOfMonths","onApplyBudgetTemplate","getStyle","makeAmountGrey","data-testid","onPointerUp","e","stopPropagation","ExpenseCategory","memo","isHidden","goal","longGoal","budgeted","spent","balance","carryover","index","blank","onEdit","showBudgetedCol","opacity","isGoalTemplatesEnabled","useFeatureFlag","goalTemp","goalValue","onCarryover","id","flag","collapseModals","catBalance","rolloverBudget","budgetedtmp","balancetmp","isLongGoal","budgetedValue","onTransfer","onSubmit","toCategoryId","from","to","showToBeBudgeted","onCover","fromCategoryId","onOpenBalanceMenu","listItemRef","useRef","navigate","useNavigate","onShowActivity","columnWidth","content","borderTopWidth","undefined","innerRef","flex","lineClamp","tableTextSubdued","display","noTapHighlight","span","role","BalanceWithCarryover","makeBalanceAmountStyle","carryoverIndicator","position","right","top","ExpenseGroupHeader","group","editMode","collapsed","onToggleCollapse","tableRowHeaderBackground","hidden","isPressed","isHovered","pageTextSubdued","SvgExpandArrow","transition","transform","IncomeGroupHeader","IncomeCategory","ExpenseGroup","onEditGroup","onEditCategory","onAddCategory","showHiddenCategories","editable","marginBottom","groupBudgeted","groupSumAmount","groupBalance","categories","filter","map","catGoal","catLongGoal","catBudgeted","catSumAmount","catCarryover","tableBackground","IncomeGroup","BudgetGroups","categoryGroups","gestures","onSaveCategory","onDeleteCategory","onReorderCategory","onReorderGroup","separateGroups","memoizeOne","groups","incomeGroup","find","is_income","expenseGroups","collapsedGroupIds","setCollapsedGroupIdsPref","useLocalPref","includes","collapsedId","overflowY","paddingBottom","BudgetTable","monthBounds","onPrevMonth","onNextMonth","onSaveGroup","onDeleteGroup","onShowBudgetSummary","onOpenBudgetPageMenu","onOpenBudgetMonthMenu","useResponsive","showSpentColumn","setShowSpentColumnPref","toggleSpentColumn","noBackgroundColorStyle","Page","padding","header","MobilePageHeader","MonthSelector","onOpenMonthMenu","leftContent","mobileHeaderText","margin","SvgLogo","BudgetTableHeader","PullToRefresh","pageBackground","MOBILE_NAV_HEIGHT","buttonStyle","monthUtils","isDisabled","SvgViewShow","totalBudgetedExpense","totalBudgeted","totalSpent","totalLeftover","totalBalance","prevEnabled","start","nextEnabled","end","arrowButtonStyle","background","mobileHeaderTextHover","underlinedText","SvgArrowThinRight","BudgetInner","spreadsheet","currMonth","startMonth","setStartMonthPref","bounds","setBounds","initialized","setInitialized","_numberFormat","numberFormat","hideFraction","useEffect","init","send","prewarmMonth","unlisten","listen","tables","getCategories","args","applyBudgetAction","onOpenNewCategoryGroupModal","onValidate","createGroup","onOpenNewCategoryModal","groupId","isIncome","createCategory","updateGroup","g","mustTransfer","onDelete","transferCategory","deleteGroup","onToggleGroupVisibility","updateCategory","deleteCategory","onToggleCategoryVisibility","c","inGroup","aroundCategory","targetId","originalCatId","catId","cat","idx","findIndex","length","moveCategory","moveCategoryGroup","onSaveNotes","notes","note","onOpenCategoryGroupNotesModal","onSave","onOpenCategoryNotesModal","onOpenCategoryGroupMenuModal","onEditNotes","onToggleVisibility","onOpenCategoryMenuModal","setShowHiddenCategoriesPref","onToggleHiddenCategories","onOpenBudgetMonthNotesModal","onSwitchBudgetFile","onAddCategoryGroup","mobilePageBackground","AnimatedLoading","NamespaceContext","Provider","sync","Budget","list","grouped","useCategories","useSpreadsheet","useSetThemeColor","mobileViewTheme","AccountHeader","pageTextLight","text","AccountCard","account","updated","connected","pending","failed","getBalanceQuery","onSelect","mobileAccountShadow","border","pillBorder","bankId","sidebarItemBackgroundPending","sidebarItemBackgroundFailed","sidebarItemBackgroundPositive","TextOneLine","mobileAccountText","makeAmountFullStyle","EmptyMessage","AccountList","accounts","updatedAccounts","getOnBudgetBalance","getOffBudgetBalance","onAddAccount","onSelectAccount","failedAccounts","useFailedAccounts","syncingAccountIds","useSelector","state","accountsSyncing","budgetedAccounts","offbudget","offbudgetAccounts","rightContent","SvgAdd","acct","bank","has","Accounts","useAccounts","queries","replaceModal","syncAndDownload","closed","AccountTransactions","schedulesTransform","useDefaultSchedulesQueryTransform","AccountName","MobileBackButton","AddTransactionButton","accountId","SchedulesProvider","TransactionListWithPreviews","updateAccount","onCloseAccount","openAccountCloseModal","onReopenAccount","reopenAccount","onClick","div","currentQuery","setCurrentQuery","isSearching","setIsSearching","isLoading","setIsLoading","transactions","setTransactions","prependTransactions","usePreviewTransactions","allTransactions","useMemo","concat","dateFormat","useDateFormat","makeRootQuery","useCallback","options","splits","paged","updateQuery","query","current","unsubscribe","pagedQuery","select","data","pageCount","fetchTransactions","refetchTransactions","run","getPayees","markAccountRead","updateSearchQuery","useDebounceCallback","searchText","onSearch","onOpenTransaction","transaction","isPreviewId","transactionId","onPost","parts","split","onSkip","onLoadMore","fetchNext","balanceCleared","balanceUncleared","TransactionListWithBalances","searchPlaceholder","Account","useParams","useAccount"],"mappings":"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"}