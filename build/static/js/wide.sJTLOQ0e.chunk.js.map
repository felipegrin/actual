{"version":3,"file":"wide.sJTLOQ0e.chunk.js","sources":["../../../src/icons/v0/LeftArrow2.tsx","../../../src/icons/v1/ArrowDown.tsx","../../../src/icons/v1/ArrowUp.tsx","../../../src/icons/v2/ArrowButtonRight1.tsx","../../../src/icons/v2/ArrowsExpand3.tsx","../../../src/icons/v2/ArrowsShrink3.tsx","../../../src/icons/v2/DownloadThickBottom.tsx","../../../src/icons/v2/Hyperlink2.tsx","../../../src/icons/v2/Pencil1.tsx","../../../src/components/budget/MonthPicker.tsx","../../../src/components/budget/BudgetPageHeader.tsx","../../../src/components/budget/RenderMonths.tsx","../../../src/components/budget/SidebarCategory.tsx","../../../src/components/budget/ExpenseCategory.tsx","../../../src/components/budget/SidebarGroup.tsx","../../../src/components/budget/ExpenseGroup.tsx","../../../src/components/budget/IncomeCategory.tsx","../../../src/components/budget/IncomeGroup.tsx","../../../src/components/budget/IncomeHeader.tsx","../../../src/components/budget/BudgetCategories.jsx","../../../src/components/budget/BudgetSummaries.tsx","../../../src/components/budget/BudgetTotals.tsx","../../../src/components/budget/BudgetTable.jsx","../../../src/components/budget/DynamicBudgetTable.tsx","../../../src/components/budget/index.tsx","../../../src/components/schedules/index.tsx","../../../src/components/gocardless/GoCardlessLink.tsx","../../../../loot-core/src/client/transfer.ts","../../../src/hooks/useSplitsExpanded.jsx","../../../src/components/transactions/TransactionsTable.jsx","../../../src/components/transactions/TransactionList.jsx","../../../src/components/filters/FilterMenu.tsx","../../../src/components/filters/NameFilter.tsx","../../../src/components/filters/SavedFilterMenuButton.tsx","../../../src/components/filters/FiltersStack.tsx","../../../src/components/transactions/SelectedTransactionsButton.jsx","../../../src/components/accounts/Balance.jsx","../../../src/components/accounts/Reconcile.jsx","../../../src/components/accounts/Header.jsx","../../../src/components/accounts/Account.jsx"],"sourcesContent":["import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgLeftArrow2 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 91 51\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M30.256 48.614a3.14 3.14 0 0 0-.989-2.153L10.803 29.063h76.915a3.2 3.2 0 0 0 .315 0c1.584-.084 2.95-1.64 2.867-3.266-.082-1.625-1.598-3.028-3.182-2.943H10.803L29.267 5.49c1.284-1.099 1.456-3.057.385-4.373a2.972 2.972 0 0 0-4.48-.187L.971 23.695a3.163 3.163 0 0 0 0 4.56l24.2 22.766a2.98 2.98 0 0 0 2.205.84c1.669-.08 2.958-1.534 2.88-3.247Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowDown = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"m9 16.172-6.071-6.071-1.414 1.414L10 20l.707-.707 7.778-7.778-1.414-1.414L11 16.172V0H9z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowUp = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M9 3.828 2.929 9.899 1.515 8.485 10 0l.707.707 7.778 7.778-1.414 1.414L11 3.828V20H9V3.828z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowButtonRight1 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M13.584 12a2.643 2.643 0 0 1-.775 1.875l-9.541 9.541a1.768 1.768 0 0 1-2.5-2.5l8.739-8.739a.25.25 0 0 0 0-.354L.768 3.084a1.768 1.768 0 0 1 2.5-2.5l9.541 9.541A2.643 2.643 0 0 1 13.584 12Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M23.75 12a2.643 2.643 0 0 1-.775 1.875l-9.541 9.541a1.768 1.768 0 0 1-2.5-2.5l8.739-8.739a.25.25 0 0 0 0-.354l-8.739-8.739a1.768 1.768 0 0 1 2.5-2.5l9.541 9.541A2.643 2.643 0 0 1 23.75 12Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowsExpand3 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M19.611 2.571h-3.754a1.286 1.286 0 1 1 0-2.571h6.857A1.286 1.286 0 0 1 24 1.286v6.857a1.286 1.286 0 0 1-2.571 0V4.39L15.48 10.34a1.286 1.286 0 0 1-1.817-1.817l5.948-5.95ZM1.286 14.571a1.286 1.286 0 0 1 1.285 1.286v3.754l5.949-5.946a1.286 1.286 0 0 1 1.817 1.817L4.39 21.429h3.753a1.285 1.285 0 1 1 0 2.571H1.286A1.286 1.286 0 0 1 0 22.714v-6.857a1.286 1.286 0 0 1 1.286-1.286Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowsShrink3 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M14.143 1.714A1.286 1.286 0 0 1 15.429 3v3.753L21.806.377a1.286 1.286 0 0 1 1.817 1.817l-6.376 6.377H21a1.286 1.286 0 1 1 0 2.572h-6.857a1.286 1.286 0 0 1-1.286-1.286V3a1.286 1.286 0 0 1 1.286-1.286ZM9.857 22.286A1.285 1.285 0 0 1 8.571 21v-3.753l-6.377 6.376a1.286 1.286 0 0 1-1.817-1.817l6.376-6.377H3a1.286 1.286 0 0 1 0-2.572h6.857a1.286 1.286 0 0 1 1.286 1.286V21a1.286 1.286 0 0 1-1.286 1.286Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgDownloadThickBottom = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M8.616 1.741A1.455 1.455 0 0 1 10.07.287h3.392a1.455 1.455 0 0 1 1.453 1.454v8.228a.25.25 0 0 0 .25.25h2.9a1.138 1.138 0 0 1 .827 2l-6.1 6.1a1.489 1.489 0 0 1-2.056 0l-6.1-6.1a1.137 1.137 0 0 1 .827-2h2.9a.249.249 0 0 0 .25-.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M0 19.677a4.039 4.039 0 0 0 4.035 4.035h15.93A4.039 4.039 0 0 0 24 19.677V17.8a1.225 1.225 0 0 0-2.449 0v1.874a1.588 1.588 0 0 1-1.586 1.586H4.035a1.588 1.588 0 0 1-1.586-1.586V17.8A1.225 1.225 0 0 0 0 17.8Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgHyperlink2 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M12.406 14.905a1 1 0 0 0-.543 1.307 1 1 0 0 1-.217 1.09l-2.828 2.829a2 2 0 0 1-2.828 0L3.868 18.01a2 2 0 0 1 0-2.829L6.7 12.353a1.013 1.013 0 0 1 1.091-.217 1 1 0 0 0 .763-1.849 3.034 3.034 0 0 0-3.268.652l-2.832 2.828a4.006 4.006 0 0 0 0 5.657l2.122 2.121a4 4 0 0 0 5.656 0l2.829-2.828a3.008 3.008 0 0 0 .651-3.27 1 1 0 0 0-1.306-.542Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M7.757 16.241a1.011 1.011 0 0 0 1.414 0l7.779-7.778a1 1 0 0 0-1.414-1.414l-7.779 7.778a1 1 0 0 0 0 1.414Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m21.546 4.574-2.121-2.121a4.006 4.006 0 0 0-5.657 0l-2.829 2.828a3.006 3.006 0 0 0-.651 3.269 1 1 0 1 0 1.849-.764 1 1 0 0 1 .217-1.086l2.828-2.828a2 2 0 0 1 2.829 0l2.121 2.121a2 2 0 0 1 0 2.829L17.3 11.645a1.015 1.015 0 0 1-1.091.217 1 1 0 0 0-.765 1.849 3.026 3.026 0 0 0 3.27-.651l2.828-2.828a4.007 4.007 0 0 0 .004-5.658Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgPencil1 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M15.067 3.986a.5.5 0 0 0-.354-.148.5.5 0 0 0-.354.147L3.437 14.91a.5.5 0 0 0 0 .707l4.948 4.948a.5.5 0 0 0 .707 0L20.009 9.648a.5.5 0 0 0 0-.706ZM2.43 16.8a.5.5 0 0 0-.489-.127.5.5 0 0 0-.351.364L.084 23.314a.5.5 0 0 0 .133.47.507.507 0 0 0 .47.132l6.272-1.5a.5.5 0 0 0 .237-.84ZM23.2 2.924 21.077.8a2.5 2.5 0 0 0-3.532 0l-1.418 1.417a.5.5 0 0 0 0 .707l4.95 4.949a.5.5 0 0 0 .707 0L23.2 6.454a2.5 2.5 0 0 0 0-3.53Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","// @ts-strict-ignore\nimport { type CSSProperties, useState } from 'react';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport { styles, theme } from '../../style';\nimport { View } from '../common/View';\n\nimport { type BoundsProps } from './MonthsContext';\n\ntype MonthPickerProps = {\n  startMonth: string;\n  numDisplayed: number;\n  monthBounds: BoundsProps;\n  style: CSSProperties;\n  onSelect: (month: string) => void;\n};\n\nexport const MonthPicker = ({\n  startMonth,\n  numDisplayed,\n  monthBounds,\n  style,\n  onSelect,\n}: MonthPickerProps) => {\n  const [hoverId, setHoverId] = useState(null);\n  const [targetMonthCount, setTargetMonthCount] = useState(12);\n\n  const currentMonth = monthUtils.currentMonth();\n  const firstSelectedMonth = startMonth;\n\n  const lastSelectedMonth = monthUtils.addMonths(\n    firstSelectedMonth,\n    numDisplayed - 1,\n  );\n\n  const range = monthUtils.rangeInclusive(\n    monthUtils.subMonths(\n      firstSelectedMonth,\n      targetMonthCount / 2 - numDisplayed / 2,\n    ),\n    monthUtils.addMonths(\n      lastSelectedMonth,\n      targetMonthCount / 2 - numDisplayed / 2,\n    ),\n  );\n\n  const firstSelectedIndex =\n    Math.floor(range.length / 2) - Math.floor(numDisplayed / 2);\n  const lastSelectedIndex = firstSelectedIndex + numDisplayed - 1;\n\n  const [size, setSize] = useState('small');\n  const containerRef = useResizeObserver(rect => {\n    setSize(rect.width <= 400 ? 'small' : 'big');\n    setTargetMonthCount(\n      Math.min(Math.max(Math.floor(rect.width / 50), 12), 24),\n    );\n  });\n\n  const yearHeadersShown = [];\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        ...style,\n      }}\n    >\n      <View\n        innerRef={containerRef}\n        style={{\n          flexDirection: 'row',\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {range.map((month, idx) => {\n          const monthName = monthUtils.format(month, 'MMM');\n          const selected =\n            idx >= firstSelectedIndex && idx <= lastSelectedIndex;\n\n          const lastHoverId = hoverId + numDisplayed - 1;\n          const hovered =\n            hoverId === null ? false : idx >= hoverId && idx <= lastHoverId;\n\n          const current = currentMonth === month;\n          const year = monthUtils.getYear(month);\n\n          let showYearHeader = false;\n\n          if (!yearHeadersShown.includes(year)) {\n            yearHeadersShown.push(year);\n            showYearHeader = true;\n          }\n\n          const isMonthBudgeted =\n            month >= monthBounds.start && month <= monthBounds.end;\n\n          return (\n            <View\n              key={month}\n              style={{\n                padding: '3px 3px',\n                width: size === 'big' ? '35px' : '20px',\n                textAlign: 'center',\n                userSelect: 'none',\n                cursor: 'default',\n                borderRadius: 2,\n                border: 'none',\n                ...(!isMonthBudgeted && {\n                  textDecoration: 'line-through',\n                  color: theme.pageTextSubdued,\n                }),\n                ...styles.smallText,\n                ...(selected && {\n                  backgroundColor: theme.tableBorderHover,\n                  color: theme.buttonPrimaryText,\n                }),\n                ...((hovered || selected) && {\n                  borderRadius: 0,\n                  cursor: 'pointer',\n                }),\n                ...(hoverId !== null &&\n                  !hovered &&\n                  selected && {\n                    filter: 'brightness(65%)',\n                  }),\n                ...(hovered &&\n                  !selected && {\n                    backgroundColor: theme.buttonBareBackgroundHover,\n                  }),\n                ...(!hovered &&\n                  !selected &&\n                  current && {\n                    backgroundColor: theme.buttonBareBackgroundHover,\n                    filter: 'brightness(120%)',\n                  }),\n                ...(hovered &&\n                  selected &&\n                  current && {\n                    filter: 'brightness(120%)',\n                  }),\n                ...(hovered &&\n                  selected && {\n                    backgroundColor: theme.tableBorderHover,\n                  }),\n                ...((idx === firstSelectedIndex ||\n                  (idx === hoverId && !selected)) && {\n                  borderTopLeftRadius: 2,\n                  borderBottomLeftRadius: 2,\n                }),\n                ...((idx === lastSelectedIndex ||\n                  (idx === lastHoverId && !selected)) && {\n                  borderTopRightRadius: 2,\n                  borderBottomRightRadius: 2,\n                }),\n                ...(current && { fontWeight: 'bold' }),\n              }}\n              onClick={() => onSelect(month)}\n              onMouseEnter={() => setHoverId(idx)}\n              onMouseLeave={() => setHoverId(null)}\n            >\n              {size === 'small' ? monthName[0] : monthName}\n              {showYearHeader && (\n                <View\n                  style={{\n                    position: 'absolute',\n                    top: -14,\n                    left: 0,\n                    fontSize: 10,\n                    fontWeight: 'bold',\n                    color: isMonthBudgeted\n                      ? theme.pageText\n                      : theme.pageTextSubdued,\n                  }}\n                >\n                  {year}\n                </View>\n              )}\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n","// @ts-strict-ignore\nimport React, { type ComponentProps, memo } from 'react';\n\nimport { View } from '../common/View';\n\nimport { MonthPicker } from './MonthPicker';\nimport { getScrollbarWidth } from './util';\n\ntype BudgetPageHeaderProps = {\n  startMonth: string;\n  onMonthSelect: (month: string) => void;\n  numMonths: number;\n  monthBounds: ComponentProps<typeof MonthPicker>['monthBounds'];\n};\n\nexport const BudgetPageHeader = memo<BudgetPageHeaderProps>(\n  ({ startMonth, onMonthSelect, numMonths, monthBounds }) => {\n    return (\n      <View style={{ marginLeft: 200 + 5, flexShrink: 0 }}>\n        <View style={{ marginRight: 5 + getScrollbarWidth() }}>\n          <MonthPicker\n            startMonth={startMonth}\n            numDisplayed={numMonths}\n            monthBounds={monthBounds}\n            style={{ paddingTop: 5 }}\n            onSelect={month => onMonthSelect(month)}\n          />\n        </View>\n      </View>\n    );\n  },\n);\n\nBudgetPageHeader.displayName = 'BudgetPageHeader';\n","// @ts-strict-ignore\nimport React, {\n  useContext,\n  type CSSProperties,\n  type ComponentType,\n} from 'react';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\n\nimport { MonthsContext } from './MonthsContext';\n\ntype RenderMonthsProps = {\n  component?: ComponentType<{ month: string; editing: boolean }>;\n  editingMonth?: string;\n  args?: object;\n  style?: CSSProperties;\n};\n\nexport function RenderMonths({\n  component: Component,\n  editingMonth,\n  args,\n  style,\n}: RenderMonthsProps) {\n  const { months } = useContext(MonthsContext);\n\n  return months.map((month, index) => {\n    const editing = editingMonth === month;\n\n    return (\n      <NamespaceContext.Provider\n        key={index}\n        value={monthUtils.sheetForMonth(month)}\n      >\n        <View\n          style={{\n            flex: 1,\n            borderLeft: '1px solid ' + theme.tableBorder,\n            ...style,\n          }}\n        >\n          <Component month={month} editing={editing} {...args} />\n        </View>\n      </NamespaceContext.Provider>\n    );\n  }) as unknown as JSX.Element;\n}\n","// @ts-strict-ignore\nimport React, { type CSSProperties, type Ref, useRef, useState } from 'react';\n\nimport {\n  type CategoryGroupEntity,\n  type CategoryEntity,\n} from 'loot-core/src/types/models';\n\nimport { SvgCheveronDown } from '../../icons/v1';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { View } from '../common/View';\nimport { NotesButton } from '../NotesButton';\nimport { InputCell } from '../table';\n\ntype SidebarCategoryProps = {\n  innerRef: Ref<HTMLDivElement>;\n  category: CategoryEntity;\n  categoryGroup?: CategoryGroupEntity;\n  dragPreview?: boolean;\n  dragging?: boolean;\n  editing: boolean;\n  style?: CSSProperties;\n  borderColor?: string;\n  isLast?: boolean;\n  onEditName: (id: string) => void;\n  onSave: (category: CategoryEntity) => void;\n  onDelete: (id: string) => Promise<void>;\n  onHideNewCategory?: () => void;\n};\n\nexport function SidebarCategory({\n  innerRef,\n  category,\n  categoryGroup,\n  dragPreview,\n  dragging,\n  editing,\n  style,\n  isLast,\n  onEditName,\n  onSave,\n  onDelete,\n  onHideNewCategory,\n}: SidebarCategoryProps) {\n  const temporary = category.id === 'new';\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n\n  const displayed = (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        opacity: category.hidden || categoryGroup?.hidden ? 0.33 : undefined,\n        backgroundColor: 'transparent',\n      }}\n    >\n      <div\n        data-testid=\"category-name\"\n        style={{\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          minWidth: 0,\n        }}\n      >\n        {category.name}\n      </div>\n      <View style={{ flexShrink: 0, marginLeft: 5 }} ref={triggerRef}>\n        <Button\n          variant=\"bare\"\n          className=\"hover-visible\"\n          style={{ color: 'currentColor', padding: 3 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          <SvgCheveronDown\n            width={14}\n            height={14}\n            style={{ color: 'currentColor' }}\n          />\n        </Button>\n\n        <Popover\n          triggerRef={triggerRef}\n          placement=\"bottom start\"\n          isOpen={menuOpen}\n          onOpenChange={() => setMenuOpen(false)}\n          style={{ width: 200 }}\n        >\n          <Menu\n            onMenuSelect={type => {\n              if (type === 'rename') {\n                onEditName(category.id);\n              } else if (type === 'delete') {\n                onDelete(category.id);\n              } else if (type === 'toggle-visibility') {\n                onSave({ ...category, hidden: !category.hidden });\n              }\n              setMenuOpen(false);\n            }}\n            items={[\n              { name: 'rename', text: 'Rename' },\n              !categoryGroup?.hidden && {\n                name: 'toggle-visibility',\n                text: category.hidden ? 'Show' : 'Hide',\n              },\n              { name: 'delete', text: 'Delete' },\n            ]}\n          />\n        </Popover>\n      </View>\n      <View style={{ flex: 1 }} />\n      <View style={{ flexShrink: 0 }}>\n        <NotesButton\n          id={category.id}\n          style={dragging && { color: 'currentColor' }}\n          defaultColor={theme.pageTextLight}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <View\n      innerRef={innerRef}\n      style={{\n        width: 300,\n        overflow: 'hidden',\n        '& .hover-visible': {\n          display: 'none',\n        },\n        ...(!dragging &&\n          !dragPreview && {\n            '&:hover .hover-visible': {\n              display: 'flex',\n            },\n          }),\n        ...(dragging && { color: theme.formInputTextPlaceholderSelected }),\n        // The zIndex here forces the the view on top of a row below\n        // it that may be \"collapsed\" and show a border on top\n        ...(dragPreview && {\n          backgroundColor: theme.tableBackground,\n          zIndex: 10000,\n          borderRadius: 6,\n          overflow: 'hidden',\n        }),\n        ...style,\n      }}\n      onKeyDown={e => {\n        if (e.key === 'Enter') {\n          onEditName(null);\n          e.stopPropagation();\n        }\n      }}\n    >\n      <InputCell\n        value={category.name}\n        formatter={() => displayed}\n        width=\"flex\"\n        exposed={editing || temporary}\n        onUpdate={value => {\n          if (temporary) {\n            if (value === '') {\n              onHideNewCategory();\n            } else if (value !== '') {\n              onSave({ ...category, name: value });\n            }\n          } else {\n            if (value !== category.name) {\n              onSave({ ...category, name: value });\n            }\n          }\n        }}\n        onBlur={() => onEditName(null)}\n        style={{ paddingLeft: 13, ...(isLast && { borderBottomWidth: 0 }) }}\n        inputProps={{\n          placeholder: temporary ? 'New Category Name' : '',\n        }}\n      />\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport {\n  type CategoryGroupEntity,\n  type CategoryEntity,\n} from 'loot-core/src/types/models';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type DragState,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n} from '../sort';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarCategory } from './SidebarCategory';\n\ntype ExpenseCategoryProps = {\n  cat: CategoryEntity;\n  categoryGroup?: CategoryGroupEntity;\n  editingCell: { id: string; cell: string } | null;\n  dragState: DragState<CategoryEntity>;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName?: ComponentProps<typeof SidebarCategory>['onEditName'];\n  onEditMonth?: (id: string, month: string) => void;\n  onSave?: ComponentProps<typeof SidebarCategory>['onSave'];\n  onDelete?: ComponentProps<typeof SidebarCategory>['onDelete'];\n  onDragChange: OnDragChangeCallback<CategoryEntity>;\n  onBudgetAction: (month: number, action: string, arg: unknown) => void;\n  onShowActivity: (id: string, month: string) => void;\n  onReorder: OnDropCallback;\n};\n\nexport function ExpenseCategory({\n  cat,\n  categoryGroup,\n  editingCell,\n  dragState,\n  MonthComponent,\n  onEditName,\n  onEditMonth,\n  onSave,\n  onDelete,\n  onBudgetAction,\n  onShowActivity,\n  onDragChange,\n  onReorder,\n}: ExpenseCategoryProps) {\n  let dragging = dragState && dragState.item === cat;\n\n  if (dragState && dragState.item.id === cat.cat_group) {\n    dragging = true;\n  }\n\n  const { dragRef } = useDraggable({\n    type: 'category',\n    onDragChange,\n    item: cat,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'category',\n    id: cat.id,\n    onDrop: onReorder,\n  });\n\n  return (\n    <Row\n      innerRef={dropRef}\n      collapsed={true}\n      style={{\n        backgroundColor: theme.tableBackground,\n        opacity: cat.hidden || categoryGroup?.hidden ? 0.5 : undefined,\n      }}\n    >\n      <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n\n      <View style={{ flex: 1, flexDirection: 'row' }}>\n        <SidebarCategory\n          innerRef={dragRef}\n          category={cat}\n          categoryGroup={categoryGroup}\n          dragPreview={dragging && dragState.preview}\n          dragging={dragging && !dragState.preview}\n          editing={\n            editingCell &&\n            editingCell.cell === 'name' &&\n            editingCell.id === cat.id\n          }\n          onEditName={onEditName}\n          onSave={onSave}\n          onDelete={onDelete}\n        />\n\n        <RenderMonths\n          component={MonthComponent}\n          editingMonth={\n            editingCell && editingCell.id === cat.id && editingCell.cell\n          }\n          args={{\n            category: cat,\n            onEdit: onEditMonth,\n            onBudgetAction,\n            onShowActivity,\n          }}\n        />\n      </View>\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type CSSProperties, useRef, useState } from 'react';\nimport { type ConnectDragSource } from 'react-dnd';\n\nimport { SvgExpandArrow } from '../../icons/v0';\nimport { SvgCheveronDown } from '../../icons/v1';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { NotesButton } from '../NotesButton';\nimport { InputCell } from '../table';\n\ntype SidebarGroupProps = {\n  group: {\n    id: string;\n    hidden: number;\n    categories: object[];\n    is_income: number;\n    name: string;\n    sort_order: number;\n    tombstone: number;\n  };\n  editing?: boolean;\n  collapsed: boolean;\n  dragPreview?: boolean;\n  innerRef?: ConnectDragSource;\n  style?: CSSProperties;\n  onEdit?: (id: string) => void;\n  onSave?: (group: object) => Promise<void>;\n  onDelete?: (id: string) => Promise<void>;\n  onShowNewCategory?: (groupId: string) => void;\n  onHideNewGroup?: () => void;\n  onToggleCollapse?: (id: string) => void;\n};\n\nexport function SidebarGroup({\n  group,\n  editing,\n  collapsed,\n  dragPreview,\n  innerRef,\n  style,\n  onEdit,\n  onSave,\n  onDelete,\n  onShowNewCategory,\n  onHideNewGroup,\n  onToggleCollapse,\n}: SidebarGroupProps) {\n  const temporary = group.id === 'new';\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n\n  const displayed = (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n      }}\n      onClick={() => {\n        onToggleCollapse(group.id);\n      }}\n    >\n      {!dragPreview && (\n        <SvgExpandArrow\n          width={8}\n          height={8}\n          style={{\n            marginRight: 5,\n            marginLeft: 5,\n            flexShrink: 0,\n            transition: 'transform .1s',\n            transform: collapsed ? 'rotate(-90deg)' : '',\n          }}\n        />\n      )}\n      <div\n        style={{\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          minWidth: 0,\n        }}\n      >\n        {dragPreview && <Text style={{ fontWeight: 500 }}>Group: </Text>}\n        {group.name}\n      </div>\n      {!dragPreview && (\n        <>\n          <View style={{ marginLeft: 5, flexShrink: 0 }} ref={triggerRef}>\n            <Button\n              variant=\"bare\"\n              className=\"hover-visible\"\n              onPress={() => setMenuOpen(true)}\n              style={{ padding: 3 }}\n            >\n              <SvgCheveronDown width={14} height={14} />\n            </Button>\n\n            <Popover\n              triggerRef={triggerRef}\n              placement=\"bottom start\"\n              isOpen={menuOpen}\n              onOpenChange={() => setMenuOpen(false)}\n              style={{ width: 200 }}\n            >\n              <Menu\n                onMenuSelect={type => {\n                  if (type === 'rename') {\n                    onEdit(group.id);\n                  } else if (type === 'add-category') {\n                    onShowNewCategory(group.id);\n                  } else if (type === 'delete') {\n                    onDelete(group.id);\n                  } else if (type === 'toggle-visibility') {\n                    onSave({ ...group, hidden: !group.hidden });\n                  }\n                  setMenuOpen(false);\n                }}\n                items={[\n                  { name: 'add-category', text: 'Add category' },\n                  { name: 'rename', text: 'Rename' },\n                  !group.is_income && {\n                    name: 'toggle-visibility',\n                    text: group.hidden ? 'Show' : 'Hide',\n                  },\n                  onDelete && { name: 'delete', text: 'Delete' },\n                ]}\n              />\n            </Popover>\n          </View>\n          <View style={{ flex: 1 }} />\n          <View style={{ flexShrink: 0 }}>\n            <NotesButton\n              id={group.id}\n              style={dragPreview && { color: 'currentColor' }}\n              defaultColor={theme.pageTextLight}\n            />\n          </View>\n        </>\n      )}\n    </View>\n  );\n\n  return (\n    <View\n      innerRef={innerRef}\n      style={{\n        ...style,\n        width: 300,\n        backgroundColor: theme.tableRowHeaderBackground,\n        overflow: 'hidden',\n        '& .hover-visible': {\n          display: 'none',\n        },\n        ...(!dragPreview && {\n          '&:hover .hover-visible': {\n            display: 'flex',\n          },\n        }),\n        ...(dragPreview && {\n          paddingLeft: 10,\n          zIndex: 10000,\n          borderRadius: 6,\n          overflow: 'hidden',\n        }),\n      }}\n      onKeyDown={e => {\n        if (e.key === 'Enter') {\n          onEdit(null);\n          e.stopPropagation();\n        }\n      }}\n    >\n      <InputCell\n        value={group.name}\n        formatter={() => displayed}\n        width=\"flex\"\n        exposed={editing}\n        onUpdate={value => {\n          if (temporary) {\n            if (value === '') {\n              onHideNewGroup();\n            } else if (value !== '') {\n              onSave({ id: group.id, name: value });\n            }\n          } else {\n            onSave({ id: group.id, name: value });\n          }\n        }}\n        onBlur={() => onEdit(null)}\n        style={{ fontWeight: 600 }}\n        inputProps={{\n          style: { marginLeft: 20 },\n          placeholder: temporary ? 'New Group Name' : '',\n        }}\n      />\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n  type DragState,\n} from '../sort';\nimport { Row, ROW_HEIGHT } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarGroup } from './SidebarGroup';\n\ntype ExpenseGroupProps = {\n  group: ComponentProps<typeof SidebarGroup>['group'];\n  collapsed: boolean;\n  editingCell: { id: string; cell: string } | null;\n  dragState: DragState<ComponentProps<typeof SidebarGroup>['group']>;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName?: ComponentProps<typeof SidebarGroup>['onEdit'];\n  onSave?: ComponentProps<typeof SidebarGroup>['onSave'];\n  onDelete?: ComponentProps<typeof SidebarGroup>['onDelete'];\n  onDragChange: OnDragChangeCallback<\n    ComponentProps<typeof SidebarGroup>['group']\n  >;\n  onReorderGroup: OnDropCallback;\n  onReorderCategory: OnDropCallback;\n  onToggleCollapse?: ComponentProps<typeof SidebarGroup>['onToggleCollapse'];\n  onShowNewCategory?: ComponentProps<typeof SidebarGroup>['onShowNewCategory'];\n};\n\nexport function ExpenseGroup({\n  group,\n  collapsed,\n  editingCell,\n  dragState,\n  MonthComponent,\n  onEditName,\n  onSave,\n  onDelete,\n  onDragChange,\n  onReorderGroup,\n  onReorderCategory,\n  onToggleCollapse,\n  onShowNewCategory,\n}: ExpenseGroupProps) {\n  const dragging = dragState && dragState.item === group;\n\n  const { dragRef } = useDraggable({\n    type: 'group',\n    onDragChange,\n    item: group,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'group',\n    id: group.id,\n    onDrop: onReorderGroup,\n  });\n\n  const { dropRef: catDropRef, dropPos: catDropPos } = useDroppable({\n    types: 'category',\n    id: group.id,\n    onDrop: onReorderCategory,\n    onLongHover: () => {\n      if (collapsed) {\n        onToggleCollapse(group.id);\n      }\n    },\n  });\n\n  return (\n    <Row\n      collapsed={true}\n      style={{\n        fontWeight: 600,\n        opacity: group.hidden ? 0.33 : undefined,\n        backgroundColor: theme.tableRowHeaderBackground,\n      }}\n    >\n      {dragState && !dragState.preview && dragState.type === 'group' && (\n        <View\n          innerRef={dropRef}\n          style={{\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            height: collapsed\n              ? ROW_HEIGHT - 1\n              : (1 + group.categories.length) * (ROW_HEIGHT - 1) + 1,\n            zIndex: 10000,\n          }}\n        >\n          <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n        </View>\n      )}\n\n      <DropHighlight pos={catDropPos} offset={{ top: 1 }} />\n\n      <View\n        innerRef={catDropRef}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          opacity: dragging && !dragState.preview ? 0.3 : 1,\n        }}\n      >\n        <SidebarGroup\n          innerRef={dragRef}\n          group={group}\n          editing={\n            editingCell &&\n            editingCell.cell === 'name' &&\n            editingCell.id === group.id\n          }\n          dragPreview={dragging && dragState.preview}\n          collapsed={collapsed}\n          onToggleCollapse={onToggleCollapse}\n          onEdit={onEditName}\n          onSave={onSave}\n          onDelete={onDelete}\n          onShowNewCategory={onShowNewCategory}\n        />\n        <RenderMonths component={MonthComponent} args={{ group }} />\n      </View>\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport { type CategoryEntity } from 'loot-core/src/types/models';\n\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n} from '../sort';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarCategory } from './SidebarCategory';\n\ntype IncomeCategoryProps = {\n  cat: CategoryEntity;\n  isLast?: boolean;\n  editingCell: { id: string; cell: string } | null;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName: ComponentProps<typeof SidebarCategory>['onEditName'];\n  onEditMonth?: (id: string, month: string) => void;\n  onSave: ComponentProps<typeof SidebarCategory>['onSave'];\n  onDelete: ComponentProps<typeof SidebarCategory>['onDelete'];\n  onDragChange: OnDragChangeCallback<CategoryEntity>;\n  onBudgetAction: (month: string, action: string, arg: unknown) => void;\n  onReorder: OnDropCallback;\n  onShowActivity: (id: string, month: string) => void;\n};\n\nexport function IncomeCategory({\n  cat,\n  isLast,\n  editingCell,\n  MonthComponent,\n  onEditName,\n  onEditMonth,\n  onSave,\n  onDelete,\n  onDragChange,\n  onBudgetAction,\n  onReorder,\n  onShowActivity,\n}: IncomeCategoryProps) {\n  const { dragRef } = useDraggable({\n    type: 'income-category',\n    onDragChange,\n    item: cat,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'income-category',\n    id: cat.id,\n    onDrop: onReorder,\n  });\n\n  return (\n    <Row\n      innerRef={dropRef}\n      collapsed={true}\n      style={{\n        opacity: cat.hidden ? 0.5 : undefined,\n      }}\n    >\n      <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n\n      <SidebarCategory\n        innerRef={dragRef}\n        category={cat}\n        isLast={isLast}\n        editing={\n          editingCell &&\n          editingCell.cell === 'name' &&\n          editingCell.id === cat.id\n        }\n        onEditName={onEditName}\n        onSave={onSave}\n        onDelete={onDelete}\n      />\n      <RenderMonths\n        component={MonthComponent}\n        editingMonth={\n          editingCell && editingCell.id === cat.id && editingCell.cell\n        }\n        args={{\n          category: cat,\n          onEdit: onEditMonth,\n          isLast,\n          onShowActivity,\n          onBudgetAction,\n        }}\n      />\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React from 'react';\n\nimport { theme } from '../../style';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarGroup } from './SidebarGroup';\n\ntype IncomeGroupProps = {\n  group: {\n    id: string;\n    hidden: number;\n    categories: object[];\n    is_income: number;\n    name: string;\n    sort_order: number;\n    tombstone: number;\n  };\n  editingCell: { id: string; cell: string } | null;\n  collapsed: boolean;\n  MonthComponent: () => JSX.Element;\n  onEditName: (id: string) => void;\n  onSave: (group: object) => Promise<void>;\n  onToggleCollapse: (id: string) => void;\n  onShowNewCategory: (groupId: string) => void;\n};\n\nexport function IncomeGroup({\n  group,\n  editingCell,\n  collapsed,\n  MonthComponent,\n  onEditName,\n  onSave,\n  onToggleCollapse,\n  onShowNewCategory,\n}: IncomeGroupProps) {\n  return (\n    <Row\n      collapsed={true}\n      style={{\n        fontWeight: 600,\n        backgroundColor: theme.tableRowHeaderBackground,\n      }}\n    >\n      <SidebarGroup\n        group={group}\n        collapsed={collapsed}\n        editing={\n          editingCell &&\n          editingCell.cell === 'name' &&\n          editingCell.id === group.id\n        }\n        onEdit={onEditName}\n        onSave={onSave}\n        onToggleCollapse={onToggleCollapse}\n        onShowNewCategory={onShowNewCategory}\n      />\n      <RenderMonths component={MonthComponent} args={{ group }} />\n    </Row>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '../common/Button2';\nimport { View } from '../common/View';\n\nimport { RenderMonths } from './RenderMonths';\n\ntype IncomeHeaderProps = {\n  MonthComponent?: () => JSX.Element;\n  onShowNewGroup: () => void;\n};\n\nexport function IncomeHeader({\n  MonthComponent,\n  onShowNewGroup,\n}: IncomeHeaderProps) {\n  return (\n    <View style={{ flexDirection: 'row', flex: 1 }}>\n      <View\n        style={{\n          width: 200,\n          alignItems: 'flex-start',\n          justifyContent: 'flex-start',\n        }}\n      >\n        <Button onPress={onShowNewGroup} style={{ fontSize: 12, margin: 10 }}>\n          Add Group\n        </Button>\n      </View>\n      <RenderMonths\n        component={MonthComponent}\n        style={{ border: 0, justifyContent: 'flex-end' }}\n      />\n    </View>\n  );\n}\n","import React, { memo, useState, useMemo } from 'react';\n\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { theme, styles } from '../../style';\nimport { View } from '../common/View';\nimport { DropHighlightPosContext } from '../sort';\nimport { Row } from '../table';\n\nimport { ExpenseCategory } from './ExpenseCategory';\nimport { ExpenseGroup } from './ExpenseGroup';\nimport { IncomeCategory } from './IncomeCategory';\nimport { IncomeGroup } from './IncomeGroup';\nimport { IncomeHeader } from './IncomeHeader';\nimport { SidebarCategory } from './SidebarCategory';\nimport { SidebarGroup } from './SidebarGroup';\nimport { separateGroups } from './util';\n\nexport const BudgetCategories = memo(\n  ({\n    categoryGroups,\n    editingCell,\n    dataComponents,\n    onBudgetAction,\n    onShowActivity,\n    onEditName,\n    onEditMonth,\n    onSaveCategory,\n    onSaveGroup,\n    onDeleteCategory,\n    onDeleteGroup,\n    onReorderCategory,\n    onReorderGroup,\n  }) => {\n    const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\n      useLocalPref('budget.collapsed');\n    const [showHiddenCategories] = useLocalPref('budget.showHiddenCategories');\n    function onCollapse(value) {\n      setCollapsedGroupIdsPref(value);\n    }\n\n    const [isAddingGroup, setIsAddingGroup] = useState(false);\n    const [newCategoryForGroup, setNewCategoryForGroup] = useState(null);\n    const items = useMemo(() => {\n      const [expenseGroups, incomeGroup] = separateGroups(categoryGroups);\n\n      let items = Array.prototype.concat.apply(\n        [],\n        expenseGroups.map(group => {\n          if (group.hidden && !showHiddenCategories) {\n            return [];\n          }\n\n          const groupCategories = group.categories.filter(\n            cat => showHiddenCategories || !cat.hidden,\n          );\n\n          const items = [{ type: 'expense-group', value: { ...group } }];\n\n          if (newCategoryForGroup === group.id) {\n            items.push({ type: 'new-category' });\n          }\n\n          return [\n            ...items,\n            ...(collapsedGroupIds.includes(group.id)\n              ? []\n              : groupCategories\n            ).map(cat => ({\n              type: 'expense-category',\n              value: cat,\n              group,\n            })),\n          ];\n        }),\n      );\n\n      if (isAddingGroup) {\n        items.push({ type: 'new-group' });\n      }\n\n      if (incomeGroup) {\n        items = items.concat(\n          [\n            { type: 'income-separator' },\n            { type: 'income-group', value: incomeGroup },\n            newCategoryForGroup === incomeGroup.id && { type: 'new-category' },\n            ...(collapsedGroupIds.includes(incomeGroup.id)\n              ? []\n              : incomeGroup.categories.filter(\n                  cat => showHiddenCategories || !cat.hidden,\n                )\n            ).map(cat => ({\n              type: 'income-category',\n              value: cat,\n            })),\n          ].filter(x => x),\n        );\n      }\n\n      return items;\n    }, [\n      categoryGroups,\n      collapsedGroupIds,\n      newCategoryForGroup,\n      isAddingGroup,\n      showHiddenCategories,\n    ]);\n\n    const [dragState, setDragState] = useState(null);\n    const [savedCollapsed, setSavedCollapsed] = useState(null);\n\n    // TODO: If we turn this into a reducer, we could probably memoize\n    // each item in the list for better perf\n    function onDragChange(newDragState) {\n      const { state } = newDragState;\n\n      if (state === 'start-preview') {\n        setDragState({\n          type: newDragState.type,\n          item: newDragState.item,\n          preview: true,\n        });\n      } else if (state === 'start') {\n        if (dragState) {\n          setDragState({\n            ...dragState,\n            preview: false,\n          });\n          setSavedCollapsed(collapsedGroupIds);\n        }\n      } else if (state === 'hover') {\n        setDragState({\n          ...dragState,\n          hoveredId: newDragState.id,\n          hoveredPos: newDragState.pos,\n        });\n      } else if (state === 'end') {\n        setDragState(null);\n        onCollapse(savedCollapsed || []);\n      }\n    }\n\n    function onToggleCollapse(id) {\n      if (collapsedGroupIds.includes(id)) {\n        onCollapse(collapsedGroupIds.filter(id_ => id_ !== id));\n      } else {\n        onCollapse([...collapsedGroupIds, id]);\n      }\n    }\n\n    function onShowNewGroup() {\n      setIsAddingGroup(true);\n    }\n\n    function onHideNewGroup() {\n      setIsAddingGroup(false);\n    }\n\n    function _onSaveGroup(group) {\n      onSaveGroup?.(group);\n      if (group.id === 'new') {\n        onHideNewGroup();\n      }\n    }\n\n    function onShowNewCategory(groupId) {\n      onCollapse(collapsedGroupIds.filter(c => c !== groupId));\n      setNewCategoryForGroup(groupId);\n    }\n\n    function onHideNewCategory() {\n      setNewCategoryForGroup(null);\n    }\n\n    function _onSaveCategory(category) {\n      onSaveCategory?.(category);\n      if (category.id === 'new') {\n        onHideNewCategory();\n      }\n    }\n\n    return (\n      <View\n        style={{\n          marginBottom: 10,\n          backgroundColor: theme.tableBackground,\n          overflow: 'hidden',\n          boxShadow: styles.cardShadow,\n          borderRadius: '0 0 4px 4px',\n          flex: 1,\n        }}\n      >\n        {items.map((item, idx) => {\n          let content;\n          switch (item.type) {\n            case 'new-group':\n              content = (\n                <Row\n                  style={{ backgroundColor: theme.tableRowHeaderBackground }}\n                >\n                  <SidebarGroup\n                    group={{ id: 'new', name: '' }}\n                    editing={true}\n                    onSave={_onSaveGroup}\n                    onHideNewGroup={onHideNewGroup}\n                    onEdit={onEditName}\n                  />\n                </Row>\n              );\n              break;\n            case 'new-category':\n              content = (\n                <Row>\n                  <SidebarCategory\n                    category={{\n                      name: '',\n                      cat_group: newCategoryForGroup,\n                      is_income:\n                        newCategoryForGroup ===\n                        categoryGroups.find(g => g.is_income).id,\n                      id: 'new',\n                    }}\n                    editing={true}\n                    onSave={_onSaveCategory}\n                    onHideNewCategory={onHideNewCategory}\n                    onEditName={onEditName}\n                  />\n                </Row>\n              );\n              break;\n\n            case 'expense-group':\n              content = (\n                <ExpenseGroup\n                  group={item.value}\n                  editingCell={editingCell}\n                  collapsed={collapsedGroupIds.includes(item.value.id)}\n                  MonthComponent={dataComponents.ExpenseGroupComponent}\n                  dragState={dragState}\n                  onEditName={onEditName}\n                  onSave={_onSaveGroup}\n                  onDelete={onDeleteGroup}\n                  onDragChange={onDragChange}\n                  onReorderGroup={onReorderGroup}\n                  onReorderCategory={onReorderCategory}\n                  onToggleCollapse={onToggleCollapse}\n                  onShowNewCategory={onShowNewCategory}\n                />\n              );\n              break;\n            case 'expense-category':\n              content = (\n                <ExpenseCategory\n                  cat={item.value}\n                  categoryGroup={item.group}\n                  editingCell={editingCell}\n                  MonthComponent={dataComponents.ExpenseCategoryComponent}\n                  dragState={dragState}\n                  onEditName={onEditName}\n                  onEditMonth={onEditMonth}\n                  onSave={_onSaveCategory}\n                  onDelete={onDeleteCategory}\n                  onDragChange={onDragChange}\n                  onReorder={onReorderCategory}\n                  onBudgetAction={onBudgetAction}\n                  onShowActivity={onShowActivity}\n                />\n              );\n              break;\n            case 'income-separator':\n              content = (\n                <View\n                  style={{\n                    height: styles.incomeHeaderHeight,\n                    backgroundColor: theme.tableBackground,\n                  }}\n                >\n                  <IncomeHeader\n                    MonthComponent={dataComponents.IncomeHeaderComponent}\n                    onShowNewGroup={onShowNewGroup}\n                  />\n                </View>\n              );\n              break;\n            case 'income-group':\n              content = (\n                <IncomeGroup\n                  group={item.value}\n                  editingCell={editingCell}\n                  MonthComponent={dataComponents.IncomeGroupComponent}\n                  collapsed={collapsedGroupIds.includes(item.value.id)}\n                  onEditName={onEditName}\n                  onSave={_onSaveGroup}\n                  onToggleCollapse={onToggleCollapse}\n                  onShowNewCategory={onShowNewCategory}\n                />\n              );\n              break;\n            case 'income-category':\n              content = (\n                <IncomeCategory\n                  cat={item.value}\n                  editingCell={editingCell}\n                  isLast={idx === items.length - 1}\n                  MonthComponent={dataComponents.IncomeCategoryComponent}\n                  onEditName={onEditName}\n                  onEditMonth={onEditMonth}\n                  onSave={_onSaveCategory}\n                  onDelete={onDeleteCategory}\n                  onDragChange={onDragChange}\n                  onReorder={onReorderCategory}\n                  onBudgetAction={onBudgetAction}\n                  onShowActivity={onShowActivity}\n                />\n              );\n              break;\n            default:\n              throw new Error('Unknown item type: ' + item.type);\n          }\n\n          const pos =\n            idx === 0 ? 'first' : idx === items.length - 1 ? 'last' : null;\n\n          return (\n            <DropHighlightPosContext.Provider\n              key={\n                item.value\n                  ? item.value.id\n                  : item.type === 'income-separator'\n                    ? 'separator'\n                    : idx\n              }\n              value={pos}\n            >\n              <View\n                style={\n                  !dragState && {\n                    ':hover': { backgroundColor: theme.tableBackground },\n                  }\n                }\n              >\n                {content}\n              </View>\n            </DropHighlightPosContext.Provider>\n          );\n        })}\n      </View>\n    );\n  },\n);\n\nBudgetCategories.displayName = 'BudgetCategories';\n","import React, {\n  useContext,\n  useState,\n  useRef,\n  useCallback,\n  useLayoutEffect,\n} from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nimport { css } from 'glamor';\n\nimport { addMonths, subMonths } from 'loot-core/src/shared/months';\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport { View } from '../common/View';\n\nimport { MonthsContext } from './MonthsContext';\nimport { type BudgetSummary as ReportBudgetSummary } from './report/budgetsummary/BudgetSummary';\nimport { type BudgetSummary as RolloverBudgetSummary } from './rollover/budgetsummary/BudgetSummary';\n\ntype BudgetSummariesProps = {\n  SummaryComponent: typeof ReportBudgetSummary | typeof RolloverBudgetSummary;\n};\n\nexport function BudgetSummaries({ SummaryComponent }: BudgetSummariesProps) {\n  const { months } = useContext(MonthsContext);\n\n  const [widthState, setWidthState] = useState(0);\n  const [styles, spring] = useSpring(() => ({\n    x: 0,\n    config: { mass: 3, tension: 600, friction: 80 },\n  }));\n\n  const containerRef = useResizeObserver(\n    useCallback(rect => {\n      setWidthState(rect.width);\n    }, []),\n  );\n\n  const prevMonth0 = useRef(months[0]);\n  const allMonths = [...months];\n  allMonths.unshift(subMonths(months[0], 1));\n  allMonths.push(addMonths(months[months.length - 1], 1));\n  const monthWidth = widthState / months.length;\n\n  useLayoutEffect(() => {\n    const prevMonth = prevMonth0.current;\n    const reversed = prevMonth > months[0];\n    const offsetX = monthWidth;\n    let from = reversed ? -offsetX * 2 : 0;\n\n    if (prevMonth !== allMonths[0] && prevMonth !== allMonths[2]) {\n      from = -offsetX;\n    }\n\n    const to = -offsetX;\n    spring.start({ from: { x: from }, x: to });\n  }, [months[0]]);\n\n  useLayoutEffect(() => {\n    prevMonth0.current = months[0];\n  }, [months[0]]);\n\n  useLayoutEffect(() => {\n    spring.start({ from: { x: -monthWidth }, to: { x: -monthWidth } });\n  }, [monthWidth]);\n\n  return (\n    <div\n      className={`${css([\n        { flex: 1, overflow: 'hidden' },\n        months.length === 1 && {\n          marginLeft: -4,\n          marginRight: -4,\n        },\n      ])}`}\n      ref={containerRef}\n    >\n      <animated.div\n        className=\"view\"\n        style={{\n          flexDirection: 'row',\n          width: widthState,\n          willChange: 'transform',\n          transform: styles.x.to(x => `translateX(${x}px)`),\n        }}\n      >\n        {allMonths.map(month => {\n          return (\n            <View\n              key={month}\n              style={{\n                flex: `0 0 ${monthWidth}px`,\n                paddingLeft: 4,\n                paddingRight: 4,\n              }}\n            >\n              <SummaryComponent month={month} />\n            </View>\n          );\n        })}\n      </animated.div>\n    </div>\n  );\n}\n","import React, { type ComponentProps, memo, useRef, useState } from 'react';\n\nimport { SvgDotsHorizontalTriple } from '../../icons/v1';\nimport { theme, styles } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { View } from '../common/View';\n\nimport { RenderMonths } from './RenderMonths';\nimport { getScrollbarWidth } from './util';\n\ntype BudgetTotalsProps = {\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  toggleHiddenCategories: () => void;\n  expandAllCategories: () => void;\n  collapseAllCategories: () => void;\n};\n\nexport const BudgetTotals = memo(function BudgetTotals({\n  MonthComponent,\n  toggleHiddenCategories,\n  expandAllCategories,\n  collapseAllCategories,\n}: BudgetTotalsProps) {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n\n  return (\n    <View\n      data-testid=\"budget-totals\"\n      style={{\n        backgroundColor: theme.tableBackground,\n        flexDirection: 'row',\n        flexShrink: 0,\n        boxShadow: styles.cardShadow,\n        marginLeft: 5,\n        marginRight: 5 + getScrollbarWidth(),\n        borderRadius: '4px 4px 0 0',\n        borderBottom: '1px solid ' + theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: 300,\n          color: theme.pageTextLight,\n          justifyContent: 'center',\n          paddingLeft: 15,\n          paddingRight: 5,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          userSelect: 'none',\n          WebkitUserSelect: 'none',\n        }}\n      >\n        <View style={{ flexGrow: '1' }}>Category</View>\n        <Button\n          ref={triggerRef}\n          variant=\"bare\"\n          aria-label=\"Menu\"\n          onPress={() => setMenuOpen(true)}\n          style={{ color: 'currentColor', padding: 3 }}\n        >\n          <SvgDotsHorizontalTriple\n            width={15}\n            height={15}\n            style={{ color: theme.pageTextLight }}\n          />\n        </Button>\n\n        <Popover\n          triggerRef={triggerRef}\n          isOpen={menuOpen}\n          onOpenChange={() => setMenuOpen(false)}\n          style={{ width: 200 }}\n        >\n          <Menu\n            onMenuSelect={type => {\n              if (type === 'toggle-visibility') {\n                toggleHiddenCategories();\n              } else if (type === 'expandAllCategories') {\n                expandAllCategories();\n              } else if (type === 'collapseAllCategories') {\n                collapseAllCategories();\n              }\n              setMenuOpen(false);\n            }}\n            items={[\n              {\n                name: 'toggle-visibility',\n                text: 'Toggle hidden categories',\n              },\n              {\n                name: 'expandAllCategories',\n                text: 'Expand all',\n              },\n              {\n                name: 'collapseAllCategories',\n                text: 'Collapse all',\n              },\n            ]}\n          />\n        </Popover>\n      </View>\n      <RenderMonths component={MonthComponent} />\n    </View>\n  );\n});\n","import React, { useState } from 'react';\n\nimport { useCategories } from '../../hooks/useCategories';\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { theme, styles } from '../../style';\nimport { View } from '../common/View';\n\nimport { BudgetCategories } from './BudgetCategories';\nimport { BudgetSummaries } from './BudgetSummaries';\nimport { BudgetTotals } from './BudgetTotals';\nimport { MonthsProvider } from './MonthsContext';\nimport {\n  findSortDown,\n  findSortUp,\n  getScrollbarWidth,\n  separateGroups,\n} from './util';\n\nexport function BudgetTable(props) {\n  const {\n    type,\n    prewarmStartMonth,\n    startMonth,\n    numMonths,\n    monthBounds,\n    dataComponents,\n    onSaveCategory,\n    onDeleteCategory,\n    onSaveGroup,\n    onDeleteGroup,\n    onReorderCategory,\n    onReorderGroup,\n    onShowActivity,\n    onBudgetAction,\n  } = props;\n\n  const { grouped: categoryGroups } = useCategories();\n  const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\n    useLocalPref('budget.collapsed');\n  const [showHiddenCategories, setShowHiddenCategoriesPef] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n  const [editing, setEditing] = useState(null);\n\n  const onEditMonth = (id, month) => {\n    setEditing(id ? { id, cell: month } : null);\n  };\n\n  const onEditName = id => {\n    setEditing(id ? { id, cell: 'name' } : null);\n  };\n\n  const _onReorderCategory = (id, dropPos, targetId) => {\n    const isGroup = !!categoryGroups.find(g => g.id === targetId);\n\n    if (isGroup) {\n      const { targetId: groupId } = findSortUp(\n        categoryGroups,\n        dropPos,\n        targetId,\n      );\n      const group = categoryGroups.find(g => g.id === groupId);\n\n      if (group) {\n        const { categories } = group;\n        onReorderCategory({\n          id,\n          groupId: group.id,\n          targetId:\n            categories.length === 0 || dropPos === 'top'\n              ? null\n              : categories[0].id,\n        });\n      }\n    } else {\n      let targetGroup;\n\n      for (const group of categoryGroups) {\n        if (group.categories.find(cat => cat.id === targetId)) {\n          targetGroup = group;\n          break;\n        }\n      }\n\n      onReorderCategory({\n        id,\n        groupId: targetGroup.id,\n        ...findSortDown(targetGroup.categories, dropPos, targetId),\n      });\n    }\n  };\n\n  const _onReorderGroup = (id, dropPos, targetId) => {\n    const [expenseGroups] = separateGroups(categoryGroups); // exclude Income group from sortable groups to fix off-by-one error\n    onReorderGroup({\n      id,\n      ...findSortDown(expenseGroups, dropPos, targetId),\n    });\n  };\n\n  const moveVertically = dir => {\n    const flattened = categoryGroups.reduce((all, group) => {\n      if (collapsedGroupIds.includes(group.id)) {\n        return all.concat({ id: group.id, isGroup: true });\n      }\n      return all.concat([{ id: group.id, isGroup: true }, ...group.categories]);\n    }, []);\n\n    if (editing) {\n      const idx = flattened.findIndex(item => item.id === editing.id);\n      let nextIdx = idx + dir;\n\n      while (nextIdx >= 0 && nextIdx < flattened.length) {\n        const next = flattened[nextIdx];\n\n        if (next.isGroup) {\n          nextIdx += dir;\n          continue;\n        } else if (type === 'report' || !next.is_income) {\n          onEditMonth(next.id, editing.cell);\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  };\n\n  const onKeyDown = e => {\n    if (!editing) {\n      return null;\n    }\n\n    if (e.key === 'Enter' || e.key === 'Tab') {\n      e.preventDefault();\n      moveVertically(e.shiftKey ? -1 : 1);\n    }\n  };\n\n  const onCollapse = collapsedIds => {\n    setCollapsedGroupIdsPref(collapsedIds);\n  };\n\n  const onToggleHiddenCategories = () => {\n    setShowHiddenCategoriesPef(!showHiddenCategories);\n  };\n\n  const toggleHiddenCategories = () => {\n    onToggleHiddenCategories();\n  };\n\n  const expandAllCategories = () => {\n    onCollapse([]);\n  };\n\n  const collapseAllCategories = () => {\n    onCollapse(categoryGroups.map(g => g.id));\n  };\n\n  return (\n    <View\n      data-testid=\"budget-table\"\n      style={{\n        flex: 1,\n        ...(styles.lightScrollbar && {\n          '& ::-webkit-scrollbar': {\n            backgroundColor: 'transparent',\n          },\n          '& ::-webkit-scrollbar-thumb:vertical': {\n            backgroundColor: theme.tableHeaderBackground,\n          },\n        }),\n      }}\n    >\n      <View\n        style={{\n          flexDirection: 'row',\n          overflow: 'hidden',\n          flexShrink: 0,\n          // This is necessary to align with the table because the\n          // table has this padding to allow the shadow to show\n          paddingLeft: 5,\n          paddingRight: 5 + getScrollbarWidth(),\n        }}\n      >\n        <View style={{ width: 200 }} />\n        <MonthsProvider\n          startMonth={prewarmStartMonth}\n          numMonths={numMonths}\n          monthBounds={monthBounds}\n          type={type}\n        >\n          <BudgetSummaries SummaryComponent={dataComponents.SummaryComponent} />\n        </MonthsProvider>\n      </View>\n\n      <MonthsProvider\n        startMonth={startMonth}\n        numMonths={numMonths}\n        monthBounds={monthBounds}\n        type={type}\n      >\n        <BudgetTotals\n          MonthComponent={dataComponents.BudgetTotalsComponent}\n          toggleHiddenCategories={toggleHiddenCategories}\n          expandAllCategories={expandAllCategories}\n          collapseAllCategories={collapseAllCategories}\n        />\n        <View\n          style={{\n            overflowY: 'scroll',\n            overflowAnchor: 'none',\n            flex: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n          }}\n        >\n          <View\n            style={{\n              flexShrink: 0,\n            }}\n            onKeyDown={onKeyDown}\n          >\n            <BudgetCategories\n              categoryGroups={categoryGroups}\n              editingCell={editing}\n              dataComponents={dataComponents}\n              onEditMonth={onEditMonth}\n              onEditName={onEditName}\n              onSaveCategory={onSaveCategory}\n              onSaveGroup={onSaveGroup}\n              onDeleteCategory={onDeleteCategory}\n              onDeleteGroup={onDeleteGroup}\n              onReorderCategory={_onReorderCategory}\n              onReorderGroup={_onReorderGroup}\n              onBudgetAction={onBudgetAction}\n              onShowActivity={onShowActivity}\n            />\n          </View>\n        </View>\n      </MonthsProvider>\n    </View>\n  );\n}\n\nBudgetTable.displayName = 'BudgetTable';\n","// @ts-strict-ignore\nimport React, { useEffect, type ComponentProps } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { View } from '../common/View';\n\nimport { useBudgetMonthCount } from './BudgetMonthCountContext';\nimport { BudgetPageHeader } from './BudgetPageHeader';\nimport { BudgetTable } from './BudgetTable';\n\nfunction getNumPossibleMonths(width: number) {\n  const estimatedTableWidth = width - 200;\n\n  if (estimatedTableWidth < 500) {\n    return 1;\n  } else if (estimatedTableWidth < 750) {\n    return 2;\n  } else if (estimatedTableWidth < 1000) {\n    return 3;\n  } else if (estimatedTableWidth < 1250) {\n    return 4;\n  } else if (estimatedTableWidth < 1500) {\n    return 5;\n  }\n\n  return 6;\n}\n\ntype DynamicBudgetTableInnerProps = {\n  width: number;\n  height: number;\n} & DynamicBudgetTableProps;\n\nconst DynamicBudgetTableInner = ({\n  type,\n  width,\n  height,\n  prewarmStartMonth,\n  startMonth,\n  maxMonths = 3,\n  monthBounds,\n  onMonthSelect,\n  ...props\n}: DynamicBudgetTableInnerProps) => {\n  const { setDisplayMax } = useBudgetMonthCount();\n\n  const numPossible = getNumPossibleMonths(width);\n  const numMonths = Math.min(numPossible, maxMonths);\n  const maxWidth = 200 + 500 * numMonths;\n\n  useEffect(() => {\n    setDisplayMax(numPossible);\n  }, [numPossible]);\n\n  function getValidMonth(month) {\n    const start = monthBounds.start;\n    const end = monthUtils.subMonths(monthBounds.end, numMonths - 1);\n\n    if (month < start) {\n      return start;\n    } else if (month > end) {\n      return end;\n    }\n    return month;\n  }\n\n  function _onMonthSelect(month) {\n    onMonthSelect(getValidMonth(month), numMonths);\n  }\n\n  useHotkeys(\n    'left',\n    () => {\n      _onMonthSelect(monthUtils.prevMonth(startMonth));\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth],\n  );\n  useHotkeys(\n    'right',\n    () => {\n      _onMonthSelect(monthUtils.nextMonth(startMonth));\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth],\n  );\n  useHotkeys(\n    '0',\n    () => {\n      _onMonthSelect(\n        monthUtils.subMonths(\n          monthUtils.currentMonth(),\n          type === 'rollover'\n            ? Math.floor((numMonths - 1) / 2)\n            : numMonths === 2\n              ? 1\n              : Math.max(numMonths - 2, 0),\n        ),\n      );\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth, numMonths],\n  );\n\n  return (\n    <View\n      style={{\n        width,\n        height,\n        alignItems: 'center',\n        opacity: width <= 0 || height <= 0 ? 0 : 1,\n      }}\n    >\n      <View style={{ width: '100%', maxWidth }}>\n        <BudgetPageHeader\n          startMonth={prewarmStartMonth}\n          numMonths={numMonths}\n          monthBounds={monthBounds}\n          onMonthSelect={_onMonthSelect}\n        />\n        <BudgetTable\n          prewarmStartMonth={prewarmStartMonth}\n          startMonth={startMonth}\n          numMonths={numMonths}\n          monthBounds={monthBounds}\n          {...props}\n        />\n      </View>\n    </View>\n  );\n};\n\nDynamicBudgetTableInner.displayName = 'DynamicBudgetTableInner';\n\ntype DynamicBudgetTableProps = ComponentProps<typeof BudgetTable>;\n\nexport const DynamicBudgetTable = (props: DynamicBudgetTableProps) => {\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <DynamicBudgetTableInner width={width} height={height} {...props} />\n      )}\n    </AutoSizer>\n  );\n};\n\nDynamicBudgetTable.displayName = 'DynamicBudgetTable';\n","// @ts-strict-ignore\nimport React, { memo, useMemo, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  addNotification,\n  applyBudgetAction,\n  createCategory,\n  createGroup,\n  deleteCategory,\n  deleteGroup,\n  getCategories,\n  moveCategory,\n  moveCategoryGroup,\n  pushModal,\n  updateCategory,\n  updateGroup,\n} from 'loot-core/src/client/actions';\nimport { useSpreadsheet } from 'loot-core/src/client/SpreadsheetProvider';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useCategories } from '../../hooks/useCategories';\nimport { useGlobalPref } from '../../hooks/useGlobalPref';\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { useNavigate } from '../../hooks/useNavigate';\nimport { useSyncedPref } from '../../hooks/useSyncedPref';\nimport { styles } from '../../style';\nimport { View } from '../common/View';\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\n\nimport { DynamicBudgetTable } from './DynamicBudgetTable';\nimport * as report from './report/ReportComponents';\nimport { ReportProvider } from './report/ReportContext';\nimport * as rollover from './rollover/RolloverComponents';\nimport { RolloverProvider } from './rollover/RolloverContext';\nimport { prewarmAllMonths, prewarmMonth } from './util';\n\ntype ReportComponents = {\n  SummaryComponent: typeof report.BudgetSummary;\n  ExpenseCategoryComponent: typeof report.ExpenseCategoryMonth;\n  ExpenseGroupComponent: typeof report.ExpenseGroupMonth;\n  IncomeCategoryComponent: typeof report.IncomeCategoryMonth;\n  IncomeGroupComponent: typeof report.IncomeGroupMonth;\n  BudgetTotalsComponent: typeof report.BudgetTotalsMonth;\n  IncomeHeaderComponent: typeof report.IncomeHeaderMonth;\n};\n\ntype RolloverComponents = {\n  SummaryComponent: typeof RolloverBudgetSummary;\n  ExpenseCategoryComponent: typeof rollover.ExpenseCategoryMonth;\n  ExpenseGroupComponent: typeof rollover.ExpenseGroupMonth;\n  IncomeCategoryComponent: typeof rollover.IncomeCategoryMonth;\n  IncomeGroupComponent: typeof rollover.IncomeGroupMonth;\n  BudgetTotalsComponent: typeof rollover.BudgetTotalsMonth;\n  IncomeHeaderComponent: typeof rollover.IncomeHeaderMonth;\n};\n\ntype BudgetInnerProps = {\n  accountId?: string;\n  reportComponents: ReportComponents;\n  rolloverComponents: RolloverComponents;\n};\n\nfunction BudgetInner(props: BudgetInnerProps) {\n  const currentMonth = monthUtils.currentMonth();\n  const spreadsheet = useSpreadsheet();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [summaryCollapsed, setSummaryCollapsedPref] = useLocalPref(\n    'budget.summaryCollapsed',\n  );\n  const [startMonthPref, setStartMonthPref] = useLocalPref('budget.startMonth');\n  const startMonth = startMonthPref || currentMonth;\n  const [bounds, setBounds] = useState({\n    start: startMonth,\n    end: startMonth,\n  });\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\n  const [maxMonthsPref] = useGlobalPref('maxMonths');\n  const maxMonths = maxMonthsPref || 1;\n  const [initialized, setInitialized] = useState(false);\n  const { grouped: categoryGroups } = useCategories();\n\n  function loadCategories() {\n    dispatch(getCategories());\n  }\n\n  useEffect(() => {\n    async function run() {\n      loadCategories();\n\n      const { start, end } = await send('get-budget-bounds');\n      setBounds({ start, end });\n\n      await prewarmAllMonths(\n        budgetType,\n        spreadsheet,\n        { start, end },\n        startMonth,\n      );\n\n      setInitialized(true);\n    }\n\n    run();\n\n    const unlistens = [\n      listen('sync-event', ({ type, tables }) => {\n        if (\n          type === 'success' &&\n          (tables.includes('categories') ||\n            tables.includes('category_mapping') ||\n            tables.includes('category_groups'))\n        ) {\n          loadCategories();\n        }\n      }),\n\n      listen('undo-event', ({ tables }) => {\n        if (tables.includes('categories')) {\n          loadCategories();\n        }\n      }),\n    ];\n\n    return () => {\n      unlistens.forEach(unlisten => unlisten());\n    };\n  }, []);\n\n  useEffect(() => {\n    send('get-budget-bounds').then(({ start, end }) => {\n      if (bounds.start !== start || bounds.end !== end) {\n        setBounds({ start, end });\n      }\n    });\n  }, [props.accountId]);\n\n  const onMonthSelect = async (month, numDisplayed) => {\n    setStartMonthPref(month);\n\n    const warmingMonth = month;\n\n    // We could be smarter about this, but this is a good start. We\n    // optimize for the case where users press the left/right button\n    // to move between months. This loads the month data all at once\n    // and \"prewarms\" the spreadsheet cache. This uses a simple\n    // heuristic that will fail if the user clicks an arbitrary month,\n    // but it will just load in some unnecessary data.\n    if (month < startMonth) {\n      // pre-warm prev month\n      await prewarmMonth(\n        budgetType,\n        spreadsheet,\n        monthUtils.subMonths(month, 1),\n      );\n    } else if (month > startMonth) {\n      // pre-warm next month\n      await prewarmMonth(\n        budgetType,\n        spreadsheet,\n        monthUtils.addMonths(month, numDisplayed),\n      );\n    }\n\n    if (warmingMonth === month) {\n      setStartMonthPref(month);\n    }\n  };\n\n  const categoryNameAlreadyExistsNotification = name => {\n    dispatch(\n      addNotification({\n        type: 'error',\n        message: `Category ‘${name}’ already exists in group (May be Hidden)`,\n      }),\n    );\n  };\n\n  const onSaveCategory = async category => {\n    const cats = await send('get-categories');\n    const exists =\n      cats.grouped\n        .filter(g => g.id === category.cat_group)[0]\n        .categories.filter(\n          c => c.name.toUpperCase() === category.name.toUpperCase(),\n        )\n        .filter(c => (category.id === 'new' ? true : c.id !== category.id))\n        .length > 0;\n\n    if (exists) {\n      categoryNameAlreadyExistsNotification(category.name);\n      return;\n    }\n\n    if (category.id === 'new') {\n      dispatch(\n        createCategory(\n          category.name,\n          category.cat_group,\n          category.is_income,\n          category.hidden,\n        ),\n      );\n    } else {\n      dispatch(updateCategory(category));\n    }\n  };\n\n  const onDeleteCategory = async id => {\n    const mustTransfer = await send('must-category-transfer', { id });\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          category: id,\n          onDelete: transferCategory => {\n            if (id !== transferCategory) {\n              dispatch(deleteCategory(id, transferCategory));\n            }\n          },\n        }),\n      );\n    } else {\n      dispatch(deleteCategory(id));\n    }\n  };\n\n  const onSaveGroup = group => {\n    if (group.id === 'new') {\n      dispatch(createGroup(group.name));\n    } else {\n      dispatch(updateGroup(group));\n    }\n  };\n\n  const onDeleteGroup = async id => {\n    const group = categoryGroups.find(g => g.id === id);\n\n    let mustTransfer = false;\n    for (const category of group.categories) {\n      if (await send('must-category-transfer', { id: category.id })) {\n        mustTransfer = true;\n        break;\n      }\n    }\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          group: id,\n          onDelete: transferCategory => {\n            dispatch(deleteGroup(id, transferCategory));\n          },\n        }),\n      );\n    } else {\n      dispatch(deleteGroup(id));\n    }\n  };\n\n  const onBudgetAction = (month, type, args) => {\n    dispatch(applyBudgetAction(month, type, args));\n  };\n\n  const onShowActivity = (categoryId, month) => {\n    const filterConditions = [\n      { field: 'category', op: 'is', value: categoryId, type: 'id' },\n      {\n        field: 'date',\n        op: 'is',\n        value: month,\n        options: { month: true },\n        type: 'date',\n      },\n    ];\n    navigate('/accounts', {\n      state: {\n        goBack: true,\n        filterConditions,\n        categoryId,\n      },\n    });\n  };\n\n  const onReorderCategory = async sortInfo => {\n    const cats = await send('get-categories');\n    const moveCandidate = cats.list.filter(c => c.id === sortInfo.id)[0];\n    const exists =\n      cats.grouped\n        .filter(g => g.id === sortInfo.groupId)[0]\n        .categories.filter(\n          c => c.name.toUpperCase() === moveCandidate.name.toUpperCase(),\n        )\n        .filter(c => c.id !== moveCandidate.id).length > 0;\n\n    if (exists) {\n      categoryNameAlreadyExistsNotification(moveCandidate.name);\n      return;\n    }\n\n    dispatch(moveCategory(sortInfo.id, sortInfo.groupId, sortInfo.targetId));\n  };\n\n  const onReorderGroup = async sortInfo => {\n    dispatch(moveCategoryGroup(sortInfo.id, sortInfo.targetId));\n  };\n\n  const onToggleCollapse = () => {\n    setSummaryCollapsedPref(!summaryCollapsed);\n  };\n\n  const { reportComponents, rolloverComponents } = props;\n\n  if (!initialized || !categoryGroups) {\n    return null;\n  }\n\n  let table;\n  if (budgetType === 'report') {\n    table = (\n      <ReportProvider\n        summaryCollapsed={summaryCollapsed}\n        onBudgetAction={onBudgetAction}\n        onToggleSummaryCollapse={onToggleCollapse}\n      >\n        <DynamicBudgetTable\n          type={budgetType}\n          prewarmStartMonth={startMonth}\n          startMonth={startMonth}\n          monthBounds={bounds}\n          maxMonths={maxMonths}\n          dataComponents={reportComponents}\n          onMonthSelect={onMonthSelect}\n          onDeleteCategory={onDeleteCategory}\n          onDeleteGroup={onDeleteGroup}\n          onSaveCategory={onSaveCategory}\n          onSaveGroup={onSaveGroup}\n          onBudgetAction={onBudgetAction}\n          onShowActivity={onShowActivity}\n          onReorderCategory={onReorderCategory}\n          onReorderGroup={onReorderGroup}\n        />\n      </ReportProvider>\n    );\n  } else {\n    table = (\n      <RolloverProvider\n        summaryCollapsed={summaryCollapsed}\n        onBudgetAction={onBudgetAction}\n        onToggleSummaryCollapse={onToggleCollapse}\n      >\n        <DynamicBudgetTable\n          type={budgetType}\n          prewarmStartMonth={startMonth}\n          startMonth={startMonth}\n          monthBounds={bounds}\n          maxMonths={maxMonths}\n          dataComponents={rolloverComponents}\n          onMonthSelect={onMonthSelect}\n          onDeleteCategory={onDeleteCategory}\n          onDeleteGroup={onDeleteGroup}\n          onSaveCategory={onSaveCategory}\n          onSaveGroup={onSaveGroup}\n          onBudgetAction={onBudgetAction}\n          onShowActivity={onShowActivity}\n          onReorderCategory={onReorderCategory}\n          onReorderGroup={onReorderGroup}\n        />\n      </RolloverProvider>\n    );\n  }\n\n  return (\n    <NamespaceContext.Provider value={monthUtils.sheetForMonth(startMonth)}>\n      <View style={{ flex: 1 }}>{table}</View>\n    </NamespaceContext.Provider>\n  );\n}\n\nconst RolloverBudgetSummary = memo<{ month: string }>(props => {\n  return <rollover.BudgetSummary {...props} />;\n});\n\nRolloverBudgetSummary.displayName = 'RolloverBudgetSummary';\n\nexport function Budget() {\n  const reportComponents = useMemo<ReportComponents>(\n    () => ({\n      SummaryComponent: report.BudgetSummary,\n      ExpenseCategoryComponent: report.ExpenseCategoryMonth,\n      ExpenseGroupComponent: report.ExpenseGroupMonth,\n      IncomeCategoryComponent: report.IncomeCategoryMonth,\n      IncomeGroupComponent: report.IncomeGroupMonth,\n      BudgetTotalsComponent: report.BudgetTotalsMonth,\n      IncomeHeaderComponent: report.IncomeHeaderMonth,\n    }),\n    [report],\n  );\n\n  const rolloverComponents = useMemo<RolloverComponents>(\n    () => ({\n      SummaryComponent: RolloverBudgetSummary,\n      ExpenseCategoryComponent: rollover.ExpenseCategoryMonth,\n      ExpenseGroupComponent: rollover.ExpenseGroupMonth,\n      IncomeCategoryComponent: rollover.IncomeCategoryMonth,\n      IncomeGroupComponent: rollover.IncomeGroupMonth,\n      BudgetTotalsComponent: rollover.BudgetTotalsMonth,\n      IncomeHeaderComponent: rollover.IncomeHeaderMonth,\n    }),\n    [rollover],\n  );\n\n  // In a previous iteration, the wrapper needs `overflow: hidden` for\n  // some reason. Without it at certain dimensions the width/height\n  // that autosizer gives us is slightly wrong, causing scrollbars to\n  // appear. We might not need it anymore?\n  return (\n    <View\n      style={{\n        ...styles.page,\n        paddingLeft: 8,\n        paddingRight: 8,\n        overflow: 'hidden',\n      }}\n    >\n      <BudgetInner\n        reportComponents={reportComponents}\n        rolloverComponents={rolloverComponents}\n      />\n    </View>\n  );\n}\n","import React, { useState } from 'react';\n\nimport { useSchedules } from 'loot-core/src/client/data-hooks/schedules';\nimport { send } from 'loot-core/src/platform/client/fetch';\nimport { type ScheduleEntity } from 'loot-core/src/types/models';\n\nimport { useActions } from '../../hooks/useActions';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Search } from '../common/Search';\nimport { View } from '../common/View';\nimport { Page } from '../Page';\n\nimport { SchedulesTable, type ScheduleItemAction } from './SchedulesTable';\n\nexport function Schedules() {\n  const { pushModal } = useActions();\n  const [filter, setFilter] = useState('');\n\n  const scheduleData = useSchedules();\n\n  if (scheduleData == null) {\n    return null;\n  }\n\n  const { schedules, statuses } = scheduleData;\n\n  function onEdit(id: ScheduleEntity['id']) {\n    pushModal('schedule-edit', { id });\n  }\n\n  function onAdd() {\n    pushModal('schedule-edit');\n  }\n\n  function onDiscover() {\n    pushModal('schedules-discover');\n  }\n\n  async function onAction(name: ScheduleItemAction, id: ScheduleEntity['id']) {\n    switch (name) {\n      case 'post-transaction':\n        await send('schedule/post-transaction', { id });\n        break;\n      case 'skip':\n        await send('schedule/skip-next-date', { id });\n        break;\n      case 'complete':\n        await send('schedule/update', {\n          schedule: { id, completed: true },\n        });\n        break;\n      case 'restart':\n        await send('schedule/update', {\n          schedule: { id, completed: false },\n          resetNextDate: true,\n        });\n        break;\n      case 'delete':\n        await send('schedule/delete', { id });\n        break;\n      default:\n    }\n  }\n\n  return (\n    <Page header=\"Schedules\">\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: '0 0 15px',\n        }}\n      >\n        <View\n          style={{\n            flex: 1,\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Search\n            placeholder=\"Filter schedules…\"\n            value={filter}\n            onChange={setFilter}\n          />\n        </View>\n      </View>\n\n      <SchedulesTable\n        schedules={schedules}\n        filter={filter}\n        statuses={statuses}\n        allowCompleted={true}\n        onSelect={onEdit}\n        onAction={onAction}\n        style={{ backgroundColor: theme.tableBackground }}\n      />\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          margin: '20px 0',\n          flexShrink: 0,\n        }}\n      >\n        <Button onPress={onDiscover}>Find schedules</Button>\n        <Button variant=\"primary\" onPress={onAdd}>\n          Add new schedule\n        </Button>\n      </View>\n    </Page>\n  );\n}\n","import React from 'react';\n\nimport { Modal } from '../common/Modal';\nimport { Paragraph } from '../common/Paragraph';\nimport { View } from '../common/View';\n\nexport function GoCardlessLink() {\n  window.close();\n\n  return (\n    <Modal isCurrent title=\"Account sync\">\n      {() => (\n        <View style={{ maxWidth: 500 }}>\n          <Paragraph>Please wait...</Paragraph>\n          <Paragraph>\n            The window should close automatically. If nothing happened you can\n            close this window or tab.\n          </Paragraph>\n        </View>\n      )}\n    </Modal>\n  );\n}\n","import type { TransactionEntity } from '../types/models';\n\nexport function validForTransfer(\n  fromTransaction: TransactionEntity,\n  toTransaction: TransactionEntity,\n) {\n  if (\n    // no subtransactions\n    // not already a transfer\n    [fromTransaction, toTransaction].every(tran => {\n      return tran.transfer_id == null && tran.is_child === false;\n    }) &&\n    fromTransaction.account !== toTransaction.account && // belong to different accounts\n    fromTransaction.amount + toTransaction.amount === 0 // amount must zero each other out\n  ) {\n    return true;\n  }\n  return false;\n}\n","import React, {\n  createContext,\n  useMemo,\n  useEffect,\n  useContext,\n  useReducer,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst SplitsExpandedContext = createContext(null);\n\nexport function useSplitsExpanded() {\n  const data = useContext(SplitsExpandedContext);\n\n  return useMemo(\n    () => ({\n      ...data,\n      expanded: id =>\n        data.state.mode === 'collapse'\n          ? !data.state.ids.has(id)\n          : data.state.ids.has(id),\n    }),\n    [data],\n  );\n}\n\nexport function SplitsExpandedProvider({ children, initialMode = 'expand' }) {\n  const cachedState = useSelector(state => state.app.lastSplitState);\n  const reduxDispatch = useDispatch();\n\n  const [state, dispatch] = useReducer(\n    (state, action) => {\n      switch (action.type) {\n        case 'toggle-split': {\n          const ids = new Set([...state.ids]);\n          const { id } = action;\n          if (ids.has(id)) {\n            ids.delete(id);\n          } else {\n            ids.add(id);\n          }\n          return { ...state, ids };\n        }\n        case 'open-split': {\n          const ids = new Set([...state.ids]);\n          const { id } = action;\n          if (state.mode === 'collapse') {\n            ids.delete(id);\n          } else {\n            ids.add(id);\n          }\n          return { ...state, ids };\n        }\n        case 'close-splits': {\n          const ids = new Set([...state.ids]);\n          action.ids.forEach(id => {\n            if (state.mode === 'collapse') {\n              ids.add(id);\n            } else {\n              ids.delete(id);\n            }\n          });\n          return { ...state, ids };\n        }\n        case 'set-mode': {\n          return {\n            ...state,\n            mode: action.mode,\n            ids: new Set(),\n            transitionId: null,\n          };\n        }\n        case 'switch-mode':\n          if (state.transitionId != null) {\n            // You can only transition once at a time\n            return state;\n          }\n\n          return {\n            ...state,\n            mode: state.mode === 'expand' ? 'collapse' : 'expand',\n            transitionId: action.id,\n            ids: new Set(),\n          };\n        case 'finish-switch-mode':\n          return { ...state, transitionId: null };\n        default:\n          throw new Error('Unknown action type: ' + action.type);\n      }\n    },\n    cachedState.current || { ids: new Set(), mode: initialMode },\n  );\n\n  useEffect(() => {\n    if (state.transitionId != null) {\n      // This timeout allows animations to finish\n      setTimeout(() => {\n        dispatch({ type: 'finish-switch-mode' });\n      }, 250);\n    }\n  }, [state.transitionId]);\n\n  useEffect(() => {\n    // In a finished state, cache the state\n    if (state.transitionId == null) {\n      reduxDispatch({ type: 'SET_LAST_SPLIT_STATE', splitState: state });\n    }\n  }, [reduxDispatch, state]);\n\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  return (\n    <SplitsExpandedContext.Provider value={value}>\n      {children}\n    </SplitsExpandedContext.Provider>\n  );\n}\n","import React, {\n  createElement,\n  createRef,\n  forwardRef,\n  memo,\n  useState,\n  useRef,\n  useMemo,\n  useCallback,\n  useLayoutEffect,\n  useEffect,\n} from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  format as formatDate,\n  parseISO,\n  isValid as isDateValid,\n} from 'date-fns';\n\nimport { pushModal } from 'loot-core/client/actions';\nimport { useCachedSchedules } from 'loot-core/src/client/data-hooks/schedules';\nimport {\n  getAccountsById,\n  getPayeesById,\n  getCategoriesById,\n} from 'loot-core/src/client/reducers/queries';\nimport { evalArithmetic } from 'loot-core/src/shared/arithmetic';\nimport { currentDay } from 'loot-core/src/shared/months';\nimport * as monthUtils from 'loot-core/src/shared/months';\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\nimport {\n  splitTransaction,\n  updateTransaction,\n  deleteTransaction,\n  addSplitTransaction,\n  groupTransaction,\n  ungroupTransactions,\n  isTemporaryId,\n  isPreviewId,\n} from 'loot-core/src/shared/transactions';\nimport {\n  integerToCurrency,\n  amountToInteger,\n  titleFirst,\n} from 'loot-core/src/shared/util';\n\nimport { useMergedRefs } from '../../hooks/useMergedRefs';\nimport { usePrevious } from '../../hooks/usePrevious';\nimport { useSelectedDispatch, useSelectedItems } from '../../hooks/useSelected';\nimport { useSplitsExpanded } from '../../hooks/useSplitsExpanded';\nimport { SvgLeftArrow2, SvgRightArrow2, SvgSplit } from '../../icons/v0';\nimport { SvgArrowDown, SvgArrowUp, SvgCheveronDown } from '../../icons/v1';\nimport {\n  SvgArrowsSynchronize,\n  SvgCalendar,\n  SvgHyperlink2,\n} from '../../icons/v2';\nimport { styles, theme } from '../../style';\nimport { AccountAutocomplete } from '../autocomplete/AccountAutocomplete';\nimport { CategoryAutocomplete } from '../autocomplete/CategoryAutocomplete';\nimport { PayeeAutocomplete } from '../autocomplete/PayeeAutocomplete';\nimport { Button } from '../common/Button2';\nimport { Popover } from '../common/Popover';\nimport { Text } from '../common/Text';\nimport { Tooltip } from '../common/Tooltip';\nimport { View } from '../common/View';\nimport { getStatusProps } from '../schedules/StatusBadge';\nimport { DateSelect } from '../select/DateSelect';\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\nimport {\n  Cell,\n  Field,\n  Row,\n  InputCell,\n  SelectCell,\n  DeleteCell,\n  CustomCell,\n  CellButton,\n  useTableNavigator,\n  Table,\n  UnexposedCellContent,\n} from '../table';\n\nfunction getDisplayValue(obj, name) {\n  return obj ? obj[name] : '';\n}\n\nfunction serializeTransaction(transaction, showZeroInDeposit) {\n  let { amount, date } = transaction;\n\n  if (isPreviewId(transaction.id)) {\n    amount = (transaction._inverse ? -1 : 1) * getScheduledAmount(amount);\n  }\n\n  let debit = amount < 0 ? -amount : null;\n  let credit = amount > 0 ? amount : null;\n\n  if (amount === 0) {\n    if (showZeroInDeposit) {\n      credit = 0;\n    } else {\n      debit = 0;\n    }\n  }\n\n  // Validate the date format\n  if (!isDateValid(parseISO(date))) {\n    // Be a little forgiving if the date isn't valid. This at least\n    // stops the UI from crashing, but this is a serious problem with\n    // the data. This allows the user to go through and see empty\n    // dates and manually fix them.\n    date = null;\n  }\n\n  return {\n    ...transaction,\n    date,\n    debit: debit != null ? integerToCurrency(debit) : '',\n    credit: credit != null ? integerToCurrency(credit) : '',\n  };\n}\n\nfunction deserializeTransaction(transaction, originalTransaction) {\n  const { debit, credit, date: originalDate, ...realTransaction } = transaction;\n\n  let amount;\n  if (debit !== '') {\n    const parsed = evalArithmetic(debit, null);\n    amount = parsed != null ? -parsed : null;\n  } else {\n    amount = evalArithmetic(credit, null);\n  }\n\n  amount =\n    amount != null ? amountToInteger(amount) : originalTransaction.amount;\n\n  let date = originalDate;\n  if (date == null) {\n    date = originalTransaction.date || currentDay();\n  }\n\n  return { ...realTransaction, date, amount };\n}\n\nfunction isLastChild(transactions, index) {\n  const trans = transactions[index];\n  return (\n    trans &&\n    trans.is_child &&\n    (transactions[index + 1] == null ||\n      transactions[index + 1].parent_id !== trans.parent_id)\n  );\n}\n\nfunction selectAscDesc(field, ascDesc, clicked, defaultAscDesc = 'asc') {\n  return field === clicked\n    ? ascDesc === 'asc'\n      ? 'desc'\n      : 'asc'\n    : defaultAscDesc;\n}\n\nconst TransactionHeader = memo(\n  ({\n    hasSelected,\n    showAccount,\n    showCategory,\n    showBalance,\n    showCleared,\n    scrollWidth,\n    onSort,\n    ascDesc,\n    field,\n  }) => {\n    const dispatchSelected = useSelectedDispatch();\n\n    useHotkeys(\n      'ctrl+a, cmd+a, meta+a',\n      e => dispatchSelected({ type: 'select-all', event: e }),\n      {\n        preventDefault: true,\n        scopes: ['app'],\n      },\n      [dispatchSelected],\n    );\n\n    return (\n      <Row\n        style={{\n          fontWeight: 300,\n          zIndex: 200,\n          color: theme.tableHeaderText,\n          backgroundColor: theme.tableBackground,\n          paddingRight: `${5 + (scrollWidth ?? 0)}px`,\n          borderTopWidth: 1,\n          borderBottomWidth: 1,\n          borderColor: theme.tableBorder,\n        }}\n      >\n        <SelectCell\n          exposed={true}\n          focused={false}\n          selected={hasSelected}\n          width={20}\n          style={{\n            borderTopWidth: 0,\n            borderBottomWidth: 0,\n          }}\n          onSelect={e =>\n            dispatchSelected({ type: 'select-all', isRangeSelect: e.shiftKey })\n          }\n        />\n        <HeaderCell\n          value=\"Date\"\n          width={110}\n          alignItems=\"flex\"\n          marginLeft={-5}\n          id=\"date\"\n          icon={field === 'date' ? ascDesc : 'clickable'}\n          onClick={() =>\n            onSort('date', selectAscDesc(field, ascDesc, 'date', 'desc'))\n          }\n        />\n        {showAccount && (\n          <HeaderCell\n            value=\"Account\"\n            width=\"flex\"\n            alignItems=\"flex\"\n            marginLeft={-5}\n            id=\"account\"\n            icon={field === 'account' ? ascDesc : 'clickable'}\n            onClick={() =>\n              onSort('account', selectAscDesc(field, ascDesc, 'account', 'asc'))\n            }\n          />\n        )}\n        <HeaderCell\n          value=\"Payee\"\n          width=\"flex\"\n          alignItems=\"flex\"\n          marginLeft={-5}\n          id=\"payee\"\n          icon={field === 'payee' ? ascDesc : 'clickable'}\n          onClick={() =>\n            onSort('payee', selectAscDesc(field, ascDesc, 'payee', 'asc'))\n          }\n        />\n        <HeaderCell\n          value=\"Notes\"\n          width=\"flex\"\n          alignItems=\"flex\"\n          marginLeft={-5}\n          id=\"notes\"\n          icon={field === 'notes' ? ascDesc : 'clickable'}\n          onClick={() =>\n            onSort('notes', selectAscDesc(field, ascDesc, 'notes', 'asc'))\n          }\n        />\n        {showCategory && (\n          <HeaderCell\n            value=\"Category\"\n            width=\"flex\"\n            alignItems=\"flex\"\n            marginLeft={-5}\n            id=\"category\"\n            icon={field === 'category' ? ascDesc : 'clickable'}\n            onClick={() =>\n              onSort(\n                'category',\n                selectAscDesc(field, ascDesc, 'category', 'asc'),\n              )\n            }\n          />\n        )}\n        <HeaderCell\n          value=\"Payment\"\n          width={100}\n          alignItems=\"flex-end\"\n          marginRight={-5}\n          id=\"payment\"\n          icon={field === 'payment' ? ascDesc : 'clickable'}\n          onClick={() =>\n            onSort('payment', selectAscDesc(field, ascDesc, 'payment', 'asc'))\n          }\n        />\n        <HeaderCell\n          value=\"Deposit\"\n          width={100}\n          alignItems=\"flex-end\"\n          marginRight={-5}\n          id=\"deposit\"\n          icon={field === 'deposit' ? ascDesc : 'clickable'}\n          onClick={() =>\n            onSort('deposit', selectAscDesc(field, ascDesc, 'deposit', 'desc'))\n          }\n        />\n        {showBalance && (\n          <HeaderCell\n            value=\"Balance\"\n            width={103}\n            alignItems=\"flex-end\"\n            marginRight={-5}\n            id=\"balance\"\n          />\n        )}\n        {showCleared && (\n          <HeaderCell\n            value=\"✓\"\n            width={38}\n            alignItems=\"center\"\n            id=\"cleared\"\n            icon={field === 'cleared' ? ascDesc : 'clickable'}\n            onClick={() => {\n              onSort(\n                'cleared',\n                selectAscDesc(field, ascDesc, 'cleared', 'asc'),\n              );\n            }}\n          />\n        )}\n      </Row>\n    );\n  },\n);\n\nTransactionHeader.displayName = 'TransactionHeader';\n\nfunction getPayeePretty(transaction, payee, transferAcct, numHiddenPayees = 0) {\n  const formatPayeeName = payeeName =>\n    numHiddenPayees > 0 ? `${payeeName} (+${numHiddenPayees} more)` : payeeName;\n\n  const { payee: payeeId } = transaction;\n\n  if (transferAcct) {\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n        }}\n      >\n        <div\n          style={{\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {formatPayeeName(transferAcct.name)}\n        </div>\n      </View>\n    );\n  } else if (payee) {\n    return formatPayeeName(payee.name);\n  } else if (payeeId && payeeId.startsWith('new:')) {\n    return formatPayeeName(payeeId.slice('new:'.length));\n  }\n\n  return '';\n}\n\nfunction StatusCell({\n  id,\n  focused,\n  selected,\n  status,\n  isChild,\n  isPreview,\n  onEdit,\n  onUpdate,\n}) {\n  const isClearedField =\n    status === 'cleared' || status === 'reconciled' || status == null;\n  const statusProps = getStatusProps(status);\n\n  const statusColor =\n    status === 'cleared'\n      ? theme.noticeTextLight\n      : status === 'reconciled'\n        ? theme.noticeTextLight\n        : status === 'missed'\n          ? theme.errorText\n          : status === 'due'\n            ? theme.warningText\n            : selected\n              ? theme.pageTextLinkLight\n              : theme.pageTextSubdued;\n\n  function onSelect() {\n    if (isClearedField) {\n      onUpdate('cleared', !(status === 'cleared'));\n    }\n  }\n\n  return (\n    <Cell\n      name=\"cleared\"\n      width={38}\n      alignItems=\"center\"\n      focused={focused}\n      style={{ padding: 1 }}\n      plain\n    >\n      <CellButton\n        style={{\n          padding: 3,\n          backgroundColor: 'transparent',\n          border: '1px solid transparent',\n          borderRadius: 50,\n          ':focus': {\n            ...(isPreview\n              ? {\n                  boxShadow: 'none',\n                }\n              : {\n                  border: '1px solid ' + theme.formInputBorderSelected,\n                  boxShadow: '0 1px 2px ' + theme.formInputBorderSelected,\n                }),\n          },\n          cursor: isClearedField ? 'pointer' : 'default',\n          ...(isChild && { visibility: 'hidden' }),\n        }}\n        disabled={isPreview || isChild}\n        onEdit={() => onEdit(id, 'cleared')}\n        onSelect={onSelect}\n      >\n        {createElement(statusProps.Icon, {\n          style: {\n            width: 13,\n            height: 13,\n            color: statusColor,\n            marginTop: status === 'due' ? -1 : 0,\n          },\n        })}\n      </CellButton>\n    </Cell>\n  );\n}\n\nfunction HeaderCell({\n  value,\n  id,\n  width,\n  alignItems,\n  marginLeft,\n  marginRight,\n  icon,\n  onClick,\n}) {\n  const style = {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: theme.tableHeaderText,\n    fontWeight: 300,\n    marginLeft,\n    marginRight,\n  };\n\n  return (\n    <CustomCell\n      width={width}\n      name={id}\n      alignItems={alignItems}\n      value={value}\n      style={{\n        borderTopWidth: 0,\n        borderBottomWidth: 0,\n      }}\n      unexposedContent={({ value: cellValue }) =>\n        onClick ? (\n          <Button variant=\"bare\" onPress={onClick} style={style}>\n            <UnexposedCellContent value={cellValue} />\n            {icon === 'asc' && (\n              <SvgArrowDown width={10} height={10} style={{ marginLeft: 5 }} />\n            )}\n            {icon === 'desc' && (\n              <SvgArrowUp width={10} height={10} style={{ marginLeft: 5 }} />\n            )}\n          </Button>\n        ) : (\n          <Text style={style}>{cellValue}</Text>\n        )\n      }\n    />\n  );\n}\n\nconst useParentPayee = (\n  payees,\n  subtransactions,\n  transferAccountsByTransaction,\n) =>\n  useMemo(() => {\n    if (!subtransactions) {\n      return null;\n    }\n\n    const { counts, mostCommonPayeeTransaction } =\n      subtransactions?.reduce(\n        ({ counts, ...result }, sub) => {\n          if (sub.payee) {\n            counts[sub.payee] = (counts[sub.payee] || 0) + 1;\n            if (counts[sub.payee] > result.maxCount) {\n              return {\n                counts,\n                maxCount: counts[sub.payee],\n                mostCommonPayeeTransaction: sub,\n              };\n            }\n          }\n          return { counts, ...result };\n        },\n        { counts: {}, maxCount: 0, mostCommonPayeeTransaction: null },\n      ) || {};\n\n    if (!mostCommonPayeeTransaction) {\n      return 'Split (no payee)';\n    }\n\n    const mostCommonPayee =\n      getPayeesById(payees)[mostCommonPayeeTransaction.payee];\n    const numDistinctPayees = Object.keys(counts).length;\n    return getPayeePretty(\n      mostCommonPayeeTransaction,\n      mostCommonPayee,\n      transferAccountsByTransaction[mostCommonPayeeTransaction.id],\n      numDistinctPayees - 1,\n    );\n  }, [subtransactions, payees, transferAccountsByTransaction]);\n\nfunction PayeeCell({\n  id,\n  payee,\n  focused,\n  payees,\n  accounts,\n  transferAccountsByTransaction,\n  valueStyle,\n  transaction,\n  subtransactions,\n  importedPayee,\n  isPreview,\n  onEdit,\n  onUpdate,\n  onCreatePayee,\n  onManagePayees,\n  onNavigateToTransferAccount,\n  onNavigateToSchedule,\n}) {\n  const isCreatingPayee = useRef(false);\n\n  const dispatch = useDispatch();\n\n  const parentPayee = useParentPayee(\n    payees,\n    subtransactions,\n    transferAccountsByTransaction,\n  );\n\n  const transferAccount = transferAccountsByTransaction[transaction.id];\n\n  return transaction.is_parent ? (\n    <Cell\n      name=\"payee\"\n      width=\"flex\"\n      focused={focused}\n      style={{ padding: 0 }}\n      plain\n    >\n      <CellButton\n        bare\n        style={{\n          alignSelf: 'flex-start',\n          borderRadius: 4,\n          border: '1px solid transparent', // so it doesn't shift on hover\n          ':hover': isPreview\n            ? {}\n            : {\n                border: '1px solid ' + theme.buttonNormalBorder,\n              },\n        }}\n        disabled={isPreview}\n        onSelect={() =>\n          dispatch(\n            pushModal('payee-autocomplete', {\n              onSelect: payeeId => {\n                onUpdate('payee', payeeId);\n              },\n            }),\n          )\n        }\n      >\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n            alignSelf: 'stretch',\n            borderRadius: 4,\n            flex: 1,\n            padding: 4,\n            color: theme.pageTextSubdued,\n          }}\n        >\n          <PayeeIcons\n            transaction={transaction}\n            transferAccount={transferAccount}\n            onNavigateToTransferAccount={onNavigateToTransferAccount}\n            onNavigateToSchedule={onNavigateToSchedule}\n          />\n          <SvgSplit\n            style={{\n              color: 'inherit',\n              width: 14,\n              height: 14,\n              marginRight: 5,\n            }}\n          />\n          <Text\n            style={{\n              fontStyle: 'italic',\n              fontWeight: 300,\n              userSelect: 'none',\n              borderBottom: importedPayee\n                ? `1px dashed ${theme.pageTextSubdued}`\n                : 'none',\n            }}\n          >\n            {importedPayee ? (\n              <Tooltip\n                content={\n                  <View style={{ padding: 10 }}>\n                    <Text style={{ fontWeight: 'bold' }}>Imported Payee</Text>\n                    <Text style={{ fontWeight: 'normal' }}>\n                      {importedPayee}\n                    </Text>\n                  </View>\n                }\n                style={{ ...styles.tooltip, borderRadius: '0px 5px 5px 0px' }}\n                placement=\"bottom\"\n                triggerProps={{ delay: 750 }}\n              >\n                {parentPayee}\n              </Tooltip>\n            ) : (\n              parentPayee\n            )}\n          </Text>\n        </View>\n      </CellButton>\n    </Cell>\n  ) : (\n    <CustomCell\n      width=\"flex\"\n      name=\"payee\"\n      textAlign=\"flex\"\n      value={payee?.id}\n      valueStyle={valueStyle}\n      exposed={focused}\n      onExpose={name => !isPreview && onEdit(id, name)}\n      onUpdate={async value => {\n        onUpdate('payee', value);\n\n        if (value && value.startsWith('new:') && !isCreatingPayee.current) {\n          isCreatingPayee.current = true;\n          const id = await onCreatePayee(value.slice('new:'.length));\n          onUpdate('payee', id);\n          isCreatingPayee.current = false;\n        }\n      }}\n      formatter={() => getPayeePretty(transaction, payee, transferAccount)}\n      unexposedContent={props => {\n        const payeeName = (\n          <UnexposedCellContent\n            {...props}\n            style={\n              importedPayee\n                ? { borderBottom: `1px dashed ${theme.pageTextSubdued}` }\n                : {}\n            }\n          />\n        );\n\n        return (\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <PayeeIcons\n              transaction={transaction}\n              transferAccount={transferAccount}\n              onNavigateToTransferAccount={onNavigateToTransferAccount}\n              onNavigateToSchedule={onNavigateToSchedule}\n            />\n            {importedPayee ? (\n              <Tooltip\n                content={\n                  <View style={{ padding: 10 }}>\n                    <Text style={{ fontWeight: 'bold' }}>Imported Payee</Text>\n                    <Text style={{ fontWeight: 'normal' }}>\n                      {importedPayee}\n                    </Text>\n                  </View>\n                }\n                style={{ ...styles.tooltip, borderRadius: '0px 5px 5px 0px' }}\n                placement=\"bottom\"\n                triggerProps={{ delay: 750 }}\n              >\n                {payeeName}\n              </Tooltip>\n            ) : (\n              payeeName\n            )}\n          </div>\n        );\n      }}\n    >\n      {({\n        onBlur,\n        onKeyDown,\n        onUpdate,\n        onSave,\n        shouldSaveFromKey,\n        inputStyle,\n      }) => (\n        <PayeeAutocomplete\n          payees={payees}\n          accounts={accounts}\n          value={payee?.id}\n          shouldSaveFromKey={shouldSaveFromKey}\n          inputProps={{\n            onBlur,\n            onKeyDown,\n            style: inputStyle,\n          }}\n          showManagePayees={true}\n          clearOnBlur={false}\n          focused={true}\n          onUpdate={(id, value) => onUpdate?.(value)}\n          onSelect={onSave}\n          onManagePayees={() => onManagePayees(payee?.id)}\n          menuPortalTarget={undefined}\n        />\n      )}\n    </CustomCell>\n  );\n}\n\nfunction PayeeIcons({\n  transaction,\n  transferAccount,\n  onNavigateToTransferAccount,\n  onNavigateToSchedule,\n}) {\n  const scheduleId = transaction.schedule;\n  const scheduleData = useCachedSchedules();\n  const schedule =\n    scheduleId && scheduleData\n      ? scheduleData.schedules.find(s => s.id === scheduleId)\n      : null;\n\n  const buttonStyle = useMemo(\n    () => ({\n      marginLeft: -5,\n      marginRight: 2,\n      width: 23,\n      height: 23,\n      color: 'inherit',\n    }),\n    [],\n  );\n\n  const scheduleIconStyle = useMemo(() => ({ width: 13, height: 13 }), []);\n\n  const transferIconStyle = useMemo(() => ({ width: 10, height: 10 }), []);\n\n  if (schedule == null && transferAccount == null) {\n    // Neither a valid scheduled transaction nor a transfer.\n    return null;\n  }\n\n  const recurring = schedule && schedule._date && !!schedule._date.frequency;\n\n  return (\n    <>\n      {schedule && (\n        <Button\n          variant=\"bare\"\n          aria-label=\"See schedule details\"\n          style={buttonStyle}\n          onPress={() => {\n            onNavigateToSchedule(scheduleId);\n          }}\n        >\n          {recurring ? (\n            <SvgArrowsSynchronize style={scheduleIconStyle} />\n          ) : (\n            <SvgCalendar style={scheduleIconStyle} />\n          )}\n        </Button>\n      )}\n      {transferAccount && (\n        <Button\n          variant=\"bare\"\n          aria-label=\"See transfer account\"\n          style={buttonStyle}\n          onPress={() => {\n            if (!isTemporaryId(transaction.id)) {\n              onNavigateToTransferAccount(transferAccount.id);\n            }\n          }}\n        >\n          {(transaction._inverse ? -1 : 1) * transaction.amount > 0 ? (\n            <SvgLeftArrow2 style={transferIconStyle} />\n          ) : (\n            <SvgRightArrow2 style={transferIconStyle} />\n          )}\n        </Button>\n      )}\n    </>\n  );\n}\n\nconst Transaction = memo(function Transaction({\n  allTransactions,\n  transaction: originalTransaction,\n  subtransactions,\n  transferAccountsByTransaction,\n  editing,\n  showAccount,\n  showBalance,\n  showCleared,\n  showZeroInDeposit,\n  style,\n  selected,\n  highlighted,\n  added,\n  matched,\n  expanded,\n  focusedField,\n  categoryGroups,\n  payees,\n  accounts,\n  balance,\n  dateFormat = 'MM/dd/yyyy',\n  hideFraction,\n  onSave,\n  onEdit,\n  onDelete,\n  onSplit,\n  onManagePayees,\n  onCreatePayee,\n  onToggleSplit,\n  onNavigateToTransferAccount,\n  onNavigateToSchedule,\n  onNotesTagClick,\n  splitError,\n  listContainerRef,\n}) {\n  const dispatch = useDispatch();\n  const dispatchSelected = useSelectedDispatch();\n  const triggerRef = useRef(null);\n\n  const [prevShowZero, setPrevShowZero] = useState(showZeroInDeposit);\n  const [prevTransaction, setPrevTransaction] = useState(originalTransaction);\n  const [transaction, setTransaction] = useState(() =>\n    serializeTransaction(originalTransaction, showZeroInDeposit),\n  );\n  const isPreview = isPreviewId(transaction.id);\n\n  if (\n    originalTransaction !== prevTransaction ||\n    showZeroInDeposit !== prevShowZero\n  ) {\n    setTransaction(\n      serializeTransaction(originalTransaction, showZeroInDeposit),\n    );\n    setPrevTransaction(originalTransaction);\n    setPrevShowZero(showZeroInDeposit);\n  }\n\n  const [showReconciliationWarning, setShowReconciliationWarning] =\n    useState(false);\n\n  function onUpdate(name, value) {\n    // Had some issues with this is called twice which is a problem now that we are showing a warning\n    // modal if the transaction is locked. I added a boolean to guard against showing the modal twice.\n    // I'm still not completely happy with how the cells update pre/post modal. Sometimes you have to\n    // click off of the cell manually after confirming your change post modal for example. The last\n    // row seems to have more issues than others but the combination of tab, return, and clicking out\n    // of the cell all have different implications as well.\n\n    if (transaction[name] !== value) {\n      if (\n        transaction.reconciled === true &&\n        (name === 'credit' ||\n          name === 'debit' ||\n          name === 'payee' ||\n          name === 'account' ||\n          name === 'date')\n      ) {\n        if (showReconciliationWarning === false) {\n          setShowReconciliationWarning(true);\n          dispatch(\n            pushModal('confirm-transaction-edit', {\n              onCancel: () => {\n                setShowReconciliationWarning(false);\n              },\n              onConfirm: () => {\n                setShowReconciliationWarning(false);\n                onUpdateAfterConfirm(name, value);\n              },\n              confirmReason: 'editReconciled',\n            }),\n          );\n        }\n      } else {\n        onUpdateAfterConfirm(name, value);\n      }\n    }\n\n    // Allow un-reconciling (unlocking) transactions\n    if (name === 'cleared' && transaction.reconciled) {\n      dispatch(\n        pushModal('confirm-transaction-edit', {\n          onConfirm: () => {\n            onUpdateAfterConfirm('reconciled', false);\n          },\n          confirmReason: 'unlockReconciled',\n        }),\n      );\n    }\n  }\n\n  function onUpdateAfterConfirm(name, value) {\n    const newTransaction = { ...transaction, [name]: value };\n\n    // Don't change the note to an empty string if it's null (since they are both rendered the same)\n    if (name === 'note' && value === '' && transaction.note == null) {\n      return;\n    }\n\n    if (\n      name === 'account' &&\n      value &&\n      getAccountsById(accounts)[value].offbudget\n    ) {\n      newTransaction.category = null;\n    }\n\n    // If entering an amount in either of the credit/debit fields, we\n    // need to clear out the other one so it's always properly\n    // translated into the desired amount (see\n    // `deserializeTransaction`)\n    if (name === 'credit') {\n      newTransaction['debit'] = '';\n    } else if (name === 'debit') {\n      newTransaction['credit'] = '';\n    }\n\n    if (name === 'account' && transaction.account !== value) {\n      newTransaction.reconciled = false;\n    }\n\n    // Don't save a temporary value (a new payee) which will be\n    // filled in with a real id later\n    if (name === 'payee' && value && value.startsWith('new:')) {\n      setTransaction(newTransaction);\n    } else {\n      const deserialized = deserializeTransaction(\n        newTransaction,\n        originalTransaction,\n      );\n      // Run the transaction through the formatting so that we know\n      // it's always showing the formatted result\n      setTransaction(serializeTransaction(deserialized, showZeroInDeposit));\n\n      const deserializedName = ['credit', 'debit'].includes(name)\n        ? 'amount'\n        : name;\n      onSave(deserialized, subtransactions, deserializedName);\n    }\n  }\n\n  const {\n    id,\n    amount,\n    debit,\n    credit,\n    payee: payeeId,\n    imported_payee: importedPayee,\n    notes,\n    date,\n    account: accountId,\n    category: categoryId,\n    cleared,\n    reconciled,\n    is_parent: isParent,\n    _unmatched = false,\n    _inverse = false,\n  } = transaction;\n\n  // Join in some data\n  const payee = payees && payeeId && getPayeesById(payees)[payeeId];\n  const account = accounts && accountId && getAccountsById(accounts)[accountId];\n\n  const isChild = transaction.is_child;\n  const transferAcct = isTemporaryId(id)\n    ? getAccountsById(accounts)[payee?.transfer_acct]\n    : transferAccountsByTransaction[id];\n  const isBudgetTransfer = transferAcct && transferAcct.offbudget === 0;\n  const isOffBudget = account && account.offbudget === 1;\n\n  const valueStyle = added ? { fontWeight: 600 } : null;\n  const backgroundFocus = focusedField === 'select';\n  const amountStyle = hideFraction ? { letterSpacing: -0.5 } : null;\n\n  const runningBalance = !isTemporaryId(id)\n    ? balance\n    : balance + (_inverse ? -1 : 1) * amount;\n\n  // Ok this entire logic is a dirty, dirty hack.. but let me explain.\n  // Problem: the split-error Popover (which has the buttons to distribute/add split)\n  // renders before schedules are added to the table. After schedules finally load\n  // the entire table gets pushed down. But the Popover does not re-calculate\n  // its positioning. This is because there is nothing in react-aria that would be\n  // watching for the position of the trigger element.\n  // Solution: when transactions (this includes schedules) change - we increment\n  // a variable (with a small delay in order for the next render cycle to pick up\n  // the change instead of the current). We pass the integer to the Popover which\n  // causes it to re-calculate the positioning. Thus fixing the problem.\n  const [updateId, setUpdateId] = useState(1);\n  useEffect(() => {\n    // The hack applies to only transactions with split errors\n    if (!splitError) {\n      return;\n    }\n\n    setTimeout(() => {\n      setUpdateId(state => state + 1);\n    }, 1);\n  }, [splitError, allTransactions]);\n\n  return (\n    <Row\n      ref={triggerRef}\n      style={{\n        backgroundColor: selected\n          ? theme.tableRowBackgroundHighlight\n          : backgroundFocus\n            ? theme.tableRowBackgroundHover\n            : theme.tableBackground,\n        ':hover': !(backgroundFocus || selected) && {\n          backgroundColor: theme.tableRowBackgroundHover,\n        },\n        '& .hover-visible': {\n          opacity: 0,\n        },\n        ':hover .hover-visible': {\n          opacity: 1,\n        },\n        ...(highlighted || selected\n          ? { color: theme.tableRowBackgroundHighlightText }\n          : { color: theme.tableText }),\n        ...style,\n        ...(isPreview && {\n          color: theme.tableTextInactive,\n          fontStyle: 'italic',\n        }),\n        ...(_unmatched && { opacity: 0.5 }),\n      }}\n    >\n      {splitError && listContainerRef.current && (\n        <Popover\n          arrowSize={updateId}\n          triggerRef={triggerRef}\n          isOpen\n          isNonModal\n          style={{ width: 375, padding: 5, maxHeight: '38px !important' }}\n          shouldFlip={false}\n          placement=\"bottom end\"\n          UNSTABLE_portalContainer={listContainerRef.current}\n        >\n          {splitError}\n        </Popover>\n      )}\n\n      {isChild && (\n        <Field\n          /* Checkmark blank placeholder for Child transaction */\n          width={110}\n          style={{\n            width: 110,\n            backgroundColor: theme.tableRowBackgroundHover,\n            border: 0, // known z-order issue, bottom border for parent transaction hidden\n          }}\n        />\n      )}\n\n      {isChild && showAccount && (\n        <Field\n          /* Account blank placeholder for Child transaction */\n          style={{\n            flex: 1,\n            backgroundColor: theme.tableRowBackgroundHover,\n            border: 0,\n          }}\n        />\n      )}\n\n      {/* Checkmark - for Child transaction\n      between normal Date and Payee or Account and Payee if needed */}\n      {isTemporaryId(transaction.id) ? (\n        isChild ? (\n          <DeleteCell\n            onDelete={() => onDelete && onDelete(transaction.id)}\n            exposed={editing}\n            style={{ ...(isChild && { borderLeftWidth: 1 }), lineHeight: 0 }}\n          />\n        ) : (\n          <Cell width={20} />\n        )\n      ) : isPreview && isChild ? (\n        <Cell width={20} />\n      ) : (\n        <SelectCell\n          /* Checkmark field for non-child transaction */\n          exposed\n          buttonProps={{\n            className: selected || editing ? null : 'hover-visible',\n          }}\n          focused={focusedField === 'select'}\n          onSelect={e => {\n            dispatchSelected({\n              type: 'select',\n              id: transaction.id,\n              isRangeSelect: e.shiftKey,\n            });\n          }}\n          onEdit={() => onEdit(id, 'select')}\n          selected={selected}\n          style={{ ...(isChild && { borderLeftWidth: 1 }) }}\n          value={\n            matched && (\n              <SvgHyperlink2\n                style={{ width: 13, height: 13, color: 'inherit' }}\n              />\n            )\n          }\n        />\n      )}\n      {!isChild && (\n        <CustomCell\n          /* Date field for non-child transaction */\n          name=\"date\"\n          width={110}\n          textAlign=\"flex\"\n          exposed={focusedField === 'date'}\n          value={date}\n          valueStyle={valueStyle}\n          formatter={date =>\n            date ? formatDate(parseISO(date), dateFormat) : ''\n          }\n          onExpose={name => !isPreview && onEdit(id, name)}\n          onUpdate={value => {\n            onUpdate('date', value);\n          }}\n        >\n          {({\n            onBlur,\n            onKeyDown,\n            onUpdate,\n            onSave,\n            shouldSaveFromKey,\n            inputStyle,\n          }) => (\n            <DateSelect\n              value={date || ''}\n              dateFormat={dateFormat}\n              inputProps={{ onBlur, onKeyDown, style: inputStyle }}\n              shouldSaveFromKey={shouldSaveFromKey}\n              clearOnBlur={true}\n              onUpdate={onUpdate}\n              onSelect={onSave}\n            />\n          )}\n        </CustomCell>\n      )}\n\n      {!isChild && showAccount && (\n        <CustomCell\n          /* Account field for non-child transaction */\n          name=\"account\"\n          width=\"flex\"\n          textAlign=\"flex\"\n          value={accountId}\n          formatter={acctId => {\n            const acct = acctId && getAccountsById(accounts)[acctId];\n            if (acct) {\n              return acct.name;\n            }\n            return '';\n          }}\n          valueStyle={valueStyle}\n          exposed={focusedField === 'account'}\n          onExpose={name => !isPreview && onEdit(id, name)}\n          onUpdate={async value => {\n            // Only ever allow non-null values\n            if (value) {\n              onUpdate('account', value);\n            }\n          }}\n        >\n          {({\n            onBlur,\n            onKeyDown,\n            onUpdate,\n            onSave,\n            shouldSaveFromKey,\n            inputStyle,\n          }) => (\n            <AccountAutocomplete\n              includeClosedAccounts={false}\n              value={accountId}\n              accounts={accounts}\n              shouldSaveFromKey={shouldSaveFromKey}\n              clearOnBlur={false}\n              focused={true}\n              inputProps={{ onBlur, onKeyDown, style: inputStyle }}\n              onUpdate={onUpdate}\n              onSelect={onSave}\n              menuPortalTarget={undefined}\n            />\n          )}\n        </CustomCell>\n      )}\n      {(() => (\n        <PayeeCell\n          /* Payee field for all transactions */\n          id={id}\n          payee={payee}\n          focused={focusedField === 'payee'}\n          /* Filter out the account we're currently in as it is not a valid transfer */\n          accounts={accounts.filter(account => account.id !== accountId)}\n          payees={payees.filter(payee => payee.transfer_acct !== accountId)}\n          valueStyle={valueStyle}\n          transaction={transaction}\n          subtransactions={subtransactions}\n          transferAccountsByTransaction={transferAccountsByTransaction}\n          importedPayee={importedPayee}\n          isPreview={isPreview}\n          onEdit={onEdit}\n          onUpdate={onUpdate}\n          onCreatePayee={onCreatePayee}\n          onManagePayees={onManagePayees}\n          onNavigateToTransferAccount={onNavigateToTransferAccount}\n          onNavigateToSchedule={onNavigateToSchedule}\n        />\n      ))()}\n\n      <InputCell\n        width=\"flex\"\n        name=\"notes\"\n        textAlign=\"flex\"\n        exposed={focusedField === 'notes'}\n        focused={focusedField === 'notes'}\n        value={notes || ''}\n        valueStyle={valueStyle}\n        formatter={value => notesTagFormatter(value, onNotesTagClick)}\n        onExpose={name => !isPreview && onEdit(id, name)}\n        inputProps={{\n          value: notes || '',\n          onUpdate: onUpdate.bind(null, 'notes'),\n        }}\n      />\n\n      {(isPreview && !isChild) || isParent ? (\n        <Cell\n          /* Category field (Split button) for parent transactions */\n          name=\"category\"\n          width=\"flex\"\n          focused={focusedField === 'category'}\n          style={{\n            padding: 0,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            height: '100%',\n          }}\n          plain\n        >\n          {isPreview && (\n            <View\n              style={{\n                color:\n                  categoryId === 'missed'\n                    ? theme.errorText\n                    : categoryId === 'due'\n                      ? theme.warningText\n                      : selected\n                        ? theme.formLabelText\n                        : theme.upcomingText,\n                backgroundColor:\n                  categoryId === 'missed'\n                    ? theme.errorBackground\n                    : categoryId === 'due'\n                      ? theme.warningBackground\n                      : selected\n                        ? theme.formLabelBackground\n                        : theme.upcomingBackground,\n                margin: '0 5px',\n                padding: '3px 7px',\n                borderRadius: 4,\n              }}\n            >\n              {titleFirst(categoryId)}\n            </View>\n          )}\n          <CellButton\n            bare\n            style={{\n              borderRadius: 4,\n              border: '1px solid transparent', // so it doesn't shift on hover\n              ':hover': {\n                border: '1px solid ' + theme.buttonNormalBorder,\n              },\n            }}\n            disabled={isTemporaryId(transaction.id)}\n            onEdit={() => !isPreview && onEdit(id, 'category')}\n            onSelect={() => onToggleSplit(id)}\n          >\n            <View\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                alignSelf: 'stretch',\n                borderRadius: 4,\n                flex: 1,\n                padding: 4,\n                color: theme.pageTextSubdued,\n              }}\n            >\n              {isParent && (\n                <SvgCheveronDown\n                  style={{\n                    color: 'inherit',\n                    width: 14,\n                    height: 14,\n                    transition: 'transform .08s',\n                    transform: expanded ? 'rotateZ(0)' : 'rotateZ(-90deg)',\n                  }}\n                />\n              )}\n              {!isPreview && (\n                <Text\n                  style={{\n                    fontStyle: 'italic',\n                    fontWeight: 300,\n                    userSelect: 'none',\n                  }}\n                >\n                  Split\n                </Text>\n              )}\n            </View>\n          </CellButton>\n        </Cell>\n      ) : isBudgetTransfer || isOffBudget ? (\n        <InputCell\n          /* Category field for transfer and off-budget transactions\n     (NOT preview, it is covered first) */\n          name=\"category\"\n          width=\"flex\"\n          exposed={focusedField === 'category'}\n          focused={focusedField === 'category'}\n          onExpose={name => onEdit(id, name)}\n          value={\n            isParent\n              ? 'Split'\n              : isOffBudget\n                ? 'Off Budget'\n                : isBudgetTransfer\n                  ? 'Transfer'\n                  : ''\n          }\n          valueStyle={valueStyle}\n          style={{\n            fontStyle: 'italic',\n            color: theme.pageTextSubdued,\n            fontWeight: 300,\n          }}\n          inputProps={{\n            readOnly: true,\n            style: { fontStyle: 'italic' },\n          }}\n        />\n      ) : (\n        <CustomCell\n          /* Category field for normal and child transactions */\n          name=\"category\"\n          width=\"flex\"\n          textAlign=\"flex\"\n          value={categoryId}\n          formatter={value =>\n            value\n              ? getDisplayValue(\n                  getCategoriesById(categoryGroups)[value],\n                  'name',\n                )\n              : transaction.id\n                ? 'Categorize'\n                : ''\n          }\n          exposed={focusedField === 'category'}\n          onExpose={name => !isPreview && onEdit(id, name)}\n          valueStyle={\n            !categoryId\n              ? {\n                  // uncategorized transaction\n                  fontStyle: 'italic',\n                  fontWeight: 300,\n                  color: theme.formInputTextHighlight,\n                }\n              : valueStyle\n          }\n          onUpdate={async value => {\n            if (value === 'split') {\n              onSplit(transaction.id);\n            } else {\n              onUpdate('category', value);\n            }\n          }}\n        >\n          {({\n            onBlur,\n            onKeyDown,\n            onUpdate,\n            onSave,\n            shouldSaveFromKey,\n            inputStyle,\n          }) => (\n            <NamespaceContext.Provider\n              value={monthUtils.sheetForMonth(\n                monthUtils.monthFromDate(transaction.date),\n              )}\n            >\n              <CategoryAutocomplete\n                categoryGroups={categoryGroups}\n                value={categoryId}\n                focused={true}\n                clearOnBlur={false}\n                showSplitOption={!isChild && !isParent}\n                shouldSaveFromKey={shouldSaveFromKey}\n                inputProps={{ onBlur, onKeyDown, style: inputStyle }}\n                onUpdate={onUpdate}\n                onSelect={onSave}\n                menuPortalTarget={undefined}\n                showHiddenCategories={false}\n              />\n            </NamespaceContext.Provider>\n          )}\n        </CustomCell>\n      )}\n\n      <InputCell\n        /* Debit field for all transactions */\n        type=\"input\"\n        width={100}\n        name=\"debit\"\n        exposed={focusedField === 'debit'}\n        focused={focusedField === 'debit'}\n        value={debit === '' && credit === '' ? '0.00' : debit}\n        valueStyle={valueStyle}\n        textAlign=\"right\"\n        title={debit}\n        onExpose={name => !isPreview && onEdit(id, name)}\n        style={{\n          ...(isParent && { fontStyle: 'italic' }),\n          ...styles.tnum,\n          ...amountStyle,\n        }}\n        inputProps={{\n          value: debit === '' && credit === '' ? '0.00' : debit,\n          onUpdate: onUpdate.bind(null, 'debit'),\n        }}\n        privacyFilter={{\n          activationFilters: [!isTemporaryId(transaction.id)],\n        }}\n      />\n\n      <InputCell\n        /* Credit field for all transactions */\n        type=\"input\"\n        width={100}\n        name=\"credit\"\n        exposed={focusedField === 'credit'}\n        focused={focusedField === 'credit'}\n        value={credit}\n        valueStyle={valueStyle}\n        textAlign=\"right\"\n        title={credit}\n        onExpose={name => !isPreview && onEdit(id, name)}\n        style={{\n          ...(isParent && { fontStyle: 'italic' }),\n          ...styles.tnum,\n          ...amountStyle,\n        }}\n        inputProps={{\n          value: credit,\n          onUpdate: onUpdate.bind(null, 'credit'),\n        }}\n        privacyFilter={{\n          activationFilters: [!isTemporaryId(transaction.id)],\n        }}\n      />\n\n      {showBalance && (\n        <Cell\n          /* Balance field for all transactions */\n          name=\"balance\"\n          value={\n            runningBalance == null || isChild\n              ? ''\n              : integerToCurrency(runningBalance)\n          }\n          valueStyle={{\n            color: runningBalance < 0 ? theme.errorText : theme.noticeTextLight,\n          }}\n          style={{ ...styles.tnum, ...amountStyle }}\n          width={103}\n          textAlign=\"right\"\n          privacyFilter\n        />\n      )}\n\n      {showCleared && (\n        <StatusCell\n          /* Icon field for all transactions */\n          id={id}\n          focused={focusedField === 'cleared'}\n          selected={selected}\n          isPreview={isPreview}\n          status={\n            isPreview\n              ? categoryId\n              : reconciled\n                ? 'reconciled'\n                : cleared\n                  ? 'cleared'\n                  : null\n          }\n          isChild={isChild}\n          onEdit={onEdit}\n          onUpdate={onUpdate}\n        />\n      )}\n\n      <Cell width={5} />\n    </Row>\n  );\n});\n\nfunction TransactionError({\n  error,\n  isDeposit,\n  onAddSplit,\n  onDistributeRemainder,\n  style,\n  canDistributeRemainder,\n}) {\n  switch (error.type) {\n    case 'SplitTransactionError':\n      if (error.version === 1) {\n        return (\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              padding: '0 5px',\n              ...style,\n            }}\n            data-testid=\"transaction-error\"\n          >\n            <Text>\n              Amount left:{' '}\n              <Text style={{ fontWeight: 500 }}>\n                {integerToCurrency(\n                  isDeposit ? error.difference : -error.difference,\n                )}\n              </Text>\n            </Text>\n            <View style={{ flex: 1 }} />\n            <Button\n              variant=\"normal\"\n              style={{ marginLeft: 15 }}\n              onPress={onDistributeRemainder}\n              data-testid=\"distribute-split-button\"\n              isDisabled={!canDistributeRemainder}\n            >\n              Distribute\n            </Button>\n            <Button\n              variant=\"primary\"\n              style={{ marginLeft: 10, padding: '4px 10px' }}\n              onPress={onAddSplit}\n              data-testid=\"add-split-button\"\n            >\n              Add Split\n            </Button>\n          </View>\n        );\n      }\n      break;\n    default:\n      return null;\n  }\n}\n\nfunction makeTemporaryTransactions(\n  currentAccountId,\n  currentCategoryId,\n  lastDate,\n) {\n  return [\n    {\n      id: 'temp',\n      date: lastDate || currentDay(),\n      account: currentAccountId || null,\n      category: currentCategoryId || null,\n      cleared: false,\n      amount: null,\n    },\n  ];\n}\n\nfunction NewTransaction({\n  transactions,\n  accounts,\n  categoryGroups,\n  payees,\n  transferAccountsByTransaction,\n  editingTransaction,\n  focusedField,\n  showAccount,\n  showCategory,\n  showBalance,\n  showCleared,\n  dateFormat,\n  hideFraction,\n  onClose,\n  onSplit,\n  onEdit,\n  onDelete,\n  onSave,\n  onAdd,\n  onAddSplit,\n  onDistributeRemainder,\n  onManagePayees,\n  onCreatePayee,\n  onNavigateToTransferAccount,\n  onNavigateToSchedule,\n  onNotesTagClick,\n  balance,\n}) {\n  const error = transactions[0].error;\n  const isDeposit = transactions[0].amount > 0;\n\n  const childTransactions = transactions.filter(\n    t => t.parent_id === transactions[0].id,\n  );\n  const emptyChildTransactions = childTransactions.filter(t => t.amount === 0);\n\n  return (\n    <View\n      style={{\n        borderBottom: '1px solid ' + theme.tableBorderHover,\n        paddingBottom: 6,\n        backgroundColor: theme.tableBackground,\n      }}\n      data-testid=\"new-transaction\"\n      onKeyDown={e => {\n        if (e.key === 'Escape') {\n          onClose();\n        }\n      }}\n    >\n      {transactions.map(transaction => (\n        <Transaction\n          isNew\n          key={transaction.id}\n          editing={editingTransaction === transaction.id}\n          transaction={transaction}\n          subtransactions={transaction.is_parent ? childTransactions : null}\n          transferAccountsByTransaction={transferAccountsByTransaction}\n          showAccount={showAccount}\n          showCategory={showCategory}\n          showBalance={showBalance}\n          showCleared={showCleared}\n          focusedField={editingTransaction === transaction.id && focusedField}\n          showZeroInDeposit={isDeposit}\n          accounts={accounts}\n          categoryGroups={categoryGroups}\n          payees={payees}\n          dateFormat={dateFormat}\n          hideFraction={hideFraction}\n          expanded={true}\n          onEdit={onEdit}\n          onSave={onSave}\n          onSplit={onSplit}\n          onDelete={onDelete}\n          onAdd={onAdd}\n          onManagePayees={onManagePayees}\n          onCreatePayee={onCreatePayee}\n          style={{ marginTop: -1 }}\n          onNavigateToTransferAccount={onNavigateToTransferAccount}\n          onNavigateToSchedule={onNavigateToSchedule}\n          onNotesTagClick={onNotesTagClick}\n          balance={balance}\n        />\n      ))}\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'flex-end',\n          marginTop: 6,\n          marginRight: 20,\n        }}\n      >\n        <Button\n          style={{ marginRight: 10, padding: '4px 10px' }}\n          onPress={() => onClose()}\n          data-testid=\"cancel-button\"\n        >\n          Cancel\n        </Button>\n        {error ? (\n          <TransactionError\n            error={error}\n            isDeposit={isDeposit}\n            onAddSplit={() => onAddSplit(transactions[0].id)}\n            onDistributeRemainder={() =>\n              onDistributeRemainder(transactions[0].id)\n            }\n            canDistributeRemainder={emptyChildTransactions.length > 0}\n          />\n        ) : (\n          <Button\n            variant=\"primary\"\n            style={{ padding: '4px 10px' }}\n            onPress={onAdd}\n            data-testid=\"add-button\"\n          >\n            Add\n          </Button>\n        )}\n      </View>\n    </View>\n  );\n}\n\nfunction TransactionTableInner({\n  tableNavigator,\n  tableRef,\n  listContainerRef,\n  dateFormat = 'MM/dd/yyyy',\n  newNavigator,\n  renderEmpty,\n  onScroll,\n  ...props\n}) {\n  const containerRef = createRef();\n  const isAddingPrev = usePrevious(props.isAdding);\n  const [scrollWidth, setScrollWidth] = useState(0);\n\n  function saveScrollWidth(parent, child) {\n    const width = parent > 0 && child > 0 && parent - child;\n\n    setScrollWidth(!width ? 0 : width);\n  }\n\n  const onNavigateToTransferAccount = useCallback(\n    accountId => {\n      props.onCloseAddTransaction();\n      props.onNavigateToTransferAccount(accountId);\n    },\n    [props.onCloseAddTransaction, props.onNavigateToTransferAccount],\n  );\n\n  const onNavigateToSchedule = useCallback(\n    scheduleId => {\n      props.onCloseAddTransaction();\n      props.onNavigateToSchedule(scheduleId);\n    },\n    [props.onCloseAddTransaction, props.onNavigateToSchedule],\n  );\n\n  const onNotesTagClick = useCallback(\n    noteTag => {\n      props.onCloseAddTransaction();\n      props.onNotesTagClick(noteTag);\n    },\n    [props.onCloseAddTransaction, props.onNotesTagClick],\n  );\n\n  useEffect(() => {\n    if (!isAddingPrev && props.isAdding) {\n      newNavigator.onEdit('temp', 'date');\n    }\n  }, [isAddingPrev, props.isAdding, newNavigator]);\n\n  const renderRow = ({ item, index, editing }) => {\n    const {\n      transactions,\n      selectedItems,\n      accounts,\n      categoryGroups,\n      payees,\n      showCleared,\n      showAccount,\n      showCategory,\n      showBalances,\n      balances,\n      hideFraction,\n      isNew,\n      isMatched,\n      isExpanded,\n    } = props;\n\n    const trans = item;\n    const selected = selectedItems.has(trans.id);\n\n    const parent = props.transactionMap.get(trans.parent_id);\n    const isChildDeposit = parent && parent.amount > 0;\n    const expanded = isExpanded && isExpanded((parent || trans).id);\n\n    // For backwards compatibility, read the error of the transaction\n    // since in previous versions we stored it there. In the future we\n    // can simplify this to just the parent\n    const error = expanded\n      ? (parent && parent.error) || trans.error\n      : trans.error;\n\n    const hasSplitError =\n      (!expanded || isLastChild(transactions, index)) &&\n      error &&\n      error.type === 'SplitTransactionError';\n\n    const childTransactions = trans.is_parent\n      ? props.transactionsByParent[trans.id]\n      : null;\n    const emptyChildTransactions = props.transactionsByParent[\n      trans.is_parent ? trans.id : trans.parent_id\n    ]?.filter(t => t.amount === 0);\n\n    return (\n      <Transaction\n        allTransactions={props.transactions}\n        editing={editing}\n        transaction={trans}\n        transferAccountsByTransaction={props.transferAccountsByTransaction}\n        subtransactions={childTransactions}\n        showAccount={showAccount}\n        showCategory={showCategory}\n        showBalance={showBalances}\n        showCleared={showCleared}\n        selected={selected}\n        highlighted={false}\n        added={isNew?.(trans.id)}\n        expanded={isExpanded?.(trans.id)}\n        matched={isMatched?.(trans.id)}\n        showZeroInDeposit={isChildDeposit}\n        balance={balances?.[trans.id]?.balance}\n        focusedField={editing && tableNavigator.focusedField}\n        accounts={accounts}\n        categoryGroups={categoryGroups}\n        payees={payees}\n        dateFormat={dateFormat}\n        hideFraction={hideFraction}\n        onEdit={tableNavigator.onEdit}\n        onSave={props.onSave}\n        onDelete={props.onDelete}\n        onSplit={props.onSplit}\n        onManagePayees={props.onManagePayees}\n        onCreatePayee={props.onCreatePayee}\n        onToggleSplit={props.onToggleSplit}\n        onNavigateToTransferAccount={onNavigateToTransferAccount}\n        onNavigateToSchedule={onNavigateToSchedule}\n        onNotesTagClick={onNotesTagClick}\n        splitError={\n          hasSplitError && (\n            <TransactionError\n              error={error}\n              isDeposit={isChildDeposit}\n              onAddSplit={() => props.onAddSplit(trans.id)}\n              onDistributeRemainder={() =>\n                props.onDistributeRemainder(trans.id)\n              }\n              canDistributeRemainder={emptyChildTransactions.length > 0}\n            />\n          )\n        }\n        listContainerRef={listContainerRef}\n      />\n    );\n  };\n\n  return (\n    <View\n      innerRef={containerRef}\n      style={{\n        flex: 1,\n        cursor: 'default',\n        ...props.style,\n      }}\n    >\n      <View>\n        <TransactionHeader\n          hasSelected={props.selectedItems.size > 0}\n          showAccount={props.showAccount}\n          showCategory={props.showCategory}\n          showBalance={props.showBalances}\n          showCleared={props.showCleared}\n          scrollWidth={scrollWidth}\n          onSort={props.onSort}\n          ascDesc={props.ascDesc}\n          field={props.sortField}\n        />\n\n        {props.isAdding && (\n          <View\n            {...newNavigator.getNavigatorProps({\n              onKeyDown: e => props.onCheckNewEnter(e),\n            })}\n          >\n            <NewTransaction\n              transactions={props.newTransactions}\n              transferAccountsByTransaction={\n                props.transferAccountsByTransaction\n              }\n              editingTransaction={newNavigator.editingId}\n              focusedField={newNavigator.focusedField}\n              accounts={props.accounts}\n              categoryGroups={props.categoryGroups}\n              payees={props.payees || []}\n              showAccount={props.showAccount}\n              showCategory={props.showCategory}\n              showBalance={props.showBalances}\n              showCleared={props.showCleared}\n              dateFormat={dateFormat}\n              hideFraction={props.hideFraction}\n              onClose={props.onCloseAddTransaction}\n              onAdd={props.onAddTemporary}\n              onAddSplit={props.onAddSplit}\n              onSplit={props.onSplit}\n              onEdit={newNavigator.onEdit}\n              onSave={props.onSave}\n              onDelete={props.onDelete}\n              onManagePayees={props.onManagePayees}\n              onCreatePayee={props.onCreatePayee}\n              onNavigateToTransferAccount={onNavigateToTransferAccount}\n              onNavigateToSchedule={onNavigateToSchedule}\n              onNotesTagClick={onNotesTagClick}\n              onDistributeRemainder={props.onDistributeRemainder}\n              balance={\n                props.transactions?.length > 0\n                  ? props.balances?.[props.transactions[0]?.id]?.balance\n                  : 0\n              }\n            />\n          </View>\n        )}\n      </View>\n      {/*// * On Windows, makes the scrollbar always appear\n         //   the full height of the container ??? */}\n\n      <View\n        style={{ flex: 1, overflow: 'hidden' }}\n        data-testid=\"transaction-table\"\n      >\n        <Table\n          navigator={tableNavigator}\n          ref={tableRef}\n          listContainerRef={listContainerRef}\n          items={props.transactions}\n          renderItem={renderRow}\n          renderEmpty={renderEmpty}\n          loadMore={props.loadMoreTransactions}\n          isSelected={id => props.selectedItems.has(id)}\n          onKeyDown={e => props.onCheckEnter(e)}\n          onScroll={onScroll}\n          saveScrollWidth={saveScrollWidth}\n        />\n\n        {props.isAdding && (\n          <div\n            key=\"shadow\"\n            style={{\n              position: 'absolute',\n              top: -20,\n              left: 0,\n              right: 0,\n              height: 20,\n              backgroundColor: theme.errorText,\n              boxShadow: '0 0 6px rgba(0, 0, 0, .20)',\n            }}\n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nexport const TransactionTable = forwardRef((props, ref) => {\n  const [newTransactions, setNewTransactions] = useState(null);\n  const [prevIsAdding, setPrevIsAdding] = useState(false);\n  const splitsExpanded = useSplitsExpanded();\n  const prevSplitsExpanded = useRef(null);\n\n  const tableRef = useRef(null);\n  const listContainerRef = useRef(null);\n  const mergedRef = useMergedRefs(tableRef, ref);\n\n  const transactionsWithExpandedSplits = useMemo(() => {\n    let result;\n    if (splitsExpanded.state.transitionId != null) {\n      const index = props.transactions.findIndex(\n        t => t.id === splitsExpanded.state.transitionId,\n      );\n      result = props.transactions.filter((t, idx) => {\n        if (t.parent_id) {\n          if (idx >= index) {\n            return splitsExpanded.expanded(t.parent_id);\n          } else if (prevSplitsExpanded.current) {\n            return prevSplitsExpanded.current.expanded(t.parent_id);\n          }\n        }\n        return true;\n      });\n    } else {\n      if (\n        prevSplitsExpanded.current &&\n        prevSplitsExpanded.current.state.transitionId != null\n      ) {\n        tableRef.current.anchor();\n        tableRef.current.setRowAnimation(false);\n      }\n      prevSplitsExpanded.current = splitsExpanded;\n\n      result = props.transactions.filter(t => {\n        if (t.parent_id) {\n          return splitsExpanded.expanded(t.parent_id);\n        }\n        return true;\n      });\n    }\n\n    prevSplitsExpanded.current = splitsExpanded;\n    return result;\n  }, [props.transactions, splitsExpanded]);\n  const transactionMap = useMemo(() => {\n    return new Map(\n      transactionsWithExpandedSplits.map(trans => [trans.id, trans]),\n    );\n  }, [transactionsWithExpandedSplits]);\n  const transactionsByParent = useMemo(() => {\n    return props.transactions.reduce((acc, trans) => {\n      if (trans.is_child) {\n        acc[trans.parent_id] = [...(acc[trans.parent_id] ?? []), trans];\n      }\n      return acc;\n    }, {});\n  }, [props.transactions]);\n\n  const transferAccountsByTransaction = useMemo(() => {\n    if (!props.accounts) {\n      return {};\n    }\n    const accounts = getAccountsById(props.accounts);\n    const payees = getPayeesById(props.payees);\n\n    return Object.fromEntries(\n      props.transactions.map(t => {\n        if (!props.accounts) {\n          return [t.id, null];\n        }\n\n        const payee = t.payee && payees[t.payee];\n        let transferAccount;\n        if (t._inverse) {\n          transferAccount = t.account && accounts[t.account];\n        } else {\n          transferAccount =\n            payee?.transfer_acct && accounts[payee.transfer_acct];\n        }\n        return [t.id, transferAccount || null];\n      }),\n    );\n  }, [props.transactions, props.payees, props.accounts]);\n\n  useEffect(() => {\n    // If it's anchored that means we've also disabled animations. To\n    // reduce the chance for side effect collision, only do this if\n    // we've actually anchored it\n    if (tableRef.current.isAnchored()) {\n      tableRef.current.unanchor();\n      tableRef.current.setRowAnimation(true);\n    }\n  }, [prevSplitsExpanded.current]);\n\n  const newNavigator = useTableNavigator(newTransactions, getFields);\n  const tableNavigator = useTableNavigator(\n    transactionsWithExpandedSplits,\n    getFields,\n  );\n  const shouldAdd = useRef(false);\n  const latestState = useRef({ newTransactions, newNavigator, tableNavigator });\n  const savePending = useRef(false);\n  const afterSaveFunc = useRef(false);\n  const [_, forceRerender] = useState({});\n  const selectedItems = useSelectedItems();\n\n  useLayoutEffect(() => {\n    latestState.current = {\n      newTransactions,\n      newNavigator,\n      tableNavigator,\n      transactions: props.transactions,\n    };\n  });\n\n  // Derive new transactions from the `isAdding` prop\n  if (prevIsAdding !== props.isAdding) {\n    if (!prevIsAdding && props.isAdding) {\n      setNewTransactions(\n        makeTemporaryTransactions(\n          props.currentAccountId,\n          props.currentCategoryId,\n        ),\n      );\n    }\n    setPrevIsAdding(props.isAdding);\n  }\n\n  useEffect(() => {\n    if (shouldAdd.current) {\n      if (newTransactions[0].account == null) {\n        props.addNotification({\n          type: 'error',\n          message: 'Account is a required field',\n        });\n        newNavigator.onEdit('temp', 'account');\n      } else {\n        const transactions = latestState.current.newTransactions;\n        const lastDate = transactions.length > 0 ? transactions[0].date : null;\n        setNewTransactions(\n          makeTemporaryTransactions(\n            props.currentAccountId,\n            props.currentCategoryId,\n            lastDate,\n          ),\n        );\n        newNavigator.onEdit('temp', 'date');\n        props.onAdd(transactions);\n      }\n      shouldAdd.current = false;\n    }\n  });\n\n  useEffect(() => {\n    if (savePending.current && afterSaveFunc.current) {\n      afterSaveFunc.current(props);\n      afterSaveFunc.current = null;\n    }\n\n    savePending.current = false;\n  }, [newTransactions, props.transactions]);\n\n  function getFields(item) {\n    let fields = [\n      'select',\n      'date',\n      'account',\n      'payee',\n      'notes',\n      'category',\n      'debit',\n      'credit',\n      'cleared',\n    ];\n\n    fields = item.is_child\n      ? ['select', 'payee', 'notes', 'category', 'debit', 'credit']\n      : fields.filter(\n          f =>\n            (props.showAccount || f !== 'account') &&\n            (props.showCategory || f !== 'category'),\n        );\n\n    if (isPreviewId(item.id)) {\n      fields = ['select'];\n    }\n    if (isTemporaryId(item.id)) {\n      // You can't focus the select/delete button of temporary\n      // transactions\n      fields = fields.slice(1);\n    }\n\n    return fields;\n  }\n\n  function afterSave(func) {\n    if (savePending.current) {\n      afterSaveFunc.current = func;\n    } else {\n      func(props);\n    }\n  }\n\n  function onCheckNewEnter(e) {\n    if (e.key === 'Enter') {\n      if (e.metaKey) {\n        e.stopPropagation();\n        onAddTemporary();\n      } else if (!e.shiftKey) {\n        function getLastTransaction(state) {\n          const { newTransactions } = state.current;\n          return newTransactions[newTransactions.length - 1];\n        }\n\n        // Right now, the table navigator does some funky stuff with\n        // focus, so we want to stop it from handling this event. We\n        // still want enter to move up/down normally, so we only stop\n        // it if we are on the last transaction (where we are about to\n        // do some logic). I don't like this.\n        if (newNavigator.editingId === getLastTransaction(latestState).id) {\n          e.stopPropagation();\n        }\n\n        afterSave(() => {\n          const lastTransaction = getLastTransaction(latestState);\n          const isSplit =\n            lastTransaction.parent_id || lastTransaction.is_parent;\n\n          if (\n            latestState.current.newTransactions[0].error &&\n            newNavigator.editingId === lastTransaction.id\n          ) {\n            // add split\n            onAddSplit(lastTransaction.id);\n          } else if (\n            newNavigator.editingId === lastTransaction.id &&\n            (!isSplit || !lastTransaction.error)\n          ) {\n            onAddTemporary();\n          }\n        });\n      }\n    }\n  }\n\n  function onCheckEnter(e) {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      const { editingId: id, focusedField } = tableNavigator;\n\n      afterSave(() => {\n        const transactions = latestState.current.transactions;\n        const idx = transactions.findIndex(t => t.id === id);\n        const parent = transactions.find(\n          t => t.id === transactions[idx]?.parent_id,\n        );\n\n        if (\n          isLastChild(transactions, idx) &&\n          parent &&\n          parent.error &&\n          focusedField !== 'select'\n        ) {\n          e.stopPropagation();\n          onAddSplit(id);\n        }\n      });\n    }\n  }\n\n  const onAddTemporary = useCallback(() => {\n    shouldAdd.current = true;\n    // A little hacky - this forces a rerender which will cause the\n    // effect we want to run. We have to wait for all updates to be\n    // committed (the input could still be saving a value).\n    forceRerender({});\n  }, [props.onAdd, newNavigator.onEdit]);\n\n  const onSave = useCallback(\n    async (transaction, subtransactions = null, updatedFieldName = null) => {\n      savePending.current = true;\n\n      let groupedTransaction = subtransactions\n        ? groupTransaction([transaction, ...subtransactions])\n        : transaction;\n\n      if (isTemporaryId(transaction.id)) {\n        if (props.onApplyRules) {\n          groupedTransaction = await props.onApplyRules(\n            groupedTransaction,\n            updatedFieldName,\n          );\n        }\n\n        const newTrans = latestState.current.newTransactions;\n        // Future refactor: we shouldn't need to iterate through the entire\n        // transaction list to ungroup, just the new transactions.\n        setNewTransactions(\n          ungroupTransactions(\n            updateTransaction(newTrans, groupedTransaction).data,\n          ),\n        );\n      } else {\n        props.onSave(groupedTransaction);\n      }\n    },\n    [props.onSave],\n  );\n\n  const onDelete = useCallback(id => {\n    const temporary = isTemporaryId(id);\n\n    if (temporary) {\n      const newTrans = latestState.current.newTransactions;\n\n      if (id === newTrans[0].id) {\n        // You can never delete the parent new transaction\n        return;\n      }\n\n      setNewTransactions(deleteTransaction(newTrans, id).data);\n    }\n  }, []);\n\n  const onSplit = useMemo(() => {\n    return id => {\n      if (isTemporaryId(id)) {\n        const { newNavigator } = latestState.current;\n        const newTrans = latestState.current.newTransactions;\n        const { data, diff } = splitTransaction(newTrans, id);\n        setNewTransactions(data);\n\n        // Jump next to \"debit\" field if it is empty\n        // Otherwise jump to the same field as before, but downwards\n        // to the added split transaction\n        if (newTrans[0].amount === null) {\n          newNavigator.onEdit(newTrans[0].id, 'debit');\n        } else {\n          newNavigator.onEdit(\n            diff.added[0].id,\n            latestState.current.newNavigator.focusedField,\n          );\n        }\n      } else {\n        const trans = latestState.current.transactions.find(t => t.id === id);\n        const newId = props.onSplit(id);\n\n        splitsExpanded.dispatch({ type: 'open-split', id: trans.id });\n\n        const { tableNavigator } = latestState.current;\n        if (trans.amount === null) {\n          tableNavigator.onEdit(trans.id, 'debit');\n        } else {\n          tableNavigator.onEdit(newId, tableNavigator.focusedField);\n        }\n      }\n    };\n  }, [props.onSplit, splitsExpanded.dispatch]);\n\n  const onAddSplit = useCallback(\n    id => {\n      if (isTemporaryId(id)) {\n        const newTrans = latestState.current.newTransactions;\n        const { data, diff } = addSplitTransaction(newTrans, id);\n        setNewTransactions(data);\n        newNavigator.onEdit(\n          diff.added[0].id,\n          latestState.current.newNavigator.focusedField,\n        );\n      } else {\n        const newId = props.onAddSplit(id);\n        tableNavigator.onEdit(\n          newId,\n          latestState.current.tableNavigator.focusedField,\n        );\n      }\n    },\n    [props.onAddSplit],\n  );\n\n  const onDistributeRemainder = useCallback(\n    async id => {\n      const { transactions, tableNavigator, newTransactions } =\n        latestState.current;\n\n      const targetTransactions = isTemporaryId(id)\n        ? newTransactions\n        : transactions;\n      const transaction = targetTransactions.find(t => t.id === id);\n\n      const parentTransaction = transaction.is_parent\n        ? transaction\n        : targetTransactions.find(t => t.id === transaction.parent_id);\n\n      const siblingTransactions = targetTransactions.filter(\n        t =>\n          t.parent_id ===\n          (transaction.is_parent ? transaction.id : transaction.parent_id),\n      );\n\n      const emptyTransactions = siblingTransactions.filter(t => t.amount === 0);\n\n      const remainingAmount =\n        parentTransaction.amount -\n        siblingTransactions.reduce((acc, t) => acc + t.amount, 0);\n\n      const amountPerTransaction = Math.floor(\n        remainingAmount / emptyTransactions.length,\n      );\n      let remainingCents =\n        remainingAmount - amountPerTransaction * emptyTransactions.length;\n\n      const amounts = new Array(emptyTransactions.length).fill(\n        amountPerTransaction,\n      );\n\n      for (const amountIndex in amounts) {\n        if (remainingCents === 0) break;\n\n        amounts[amountIndex] += 1;\n        remainingCents--;\n      }\n\n      if (isTemporaryId(id)) {\n        newNavigator.onEdit(null);\n      } else {\n        tableNavigator.onEdit(null);\n      }\n\n      for (const transactionIndex in emptyTransactions) {\n        await onSave({\n          ...emptyTransactions[transactionIndex],\n          amount: amounts[transactionIndex],\n        });\n      }\n    },\n    [latestState],\n  );\n\n  function onCloseAddTransaction() {\n    setNewTransactions(\n      makeTemporaryTransactions(\n        props.currentAccountId,\n        props.currentCategoryId,\n      ),\n    );\n    props.onCloseAddTransaction();\n  }\n\n  const onToggleSplit = useCallback(\n    id => splitsExpanded.dispatch({ type: 'toggle-split', id }),\n    [splitsExpanded.dispatch],\n  );\n\n  return (\n    <TransactionTableInner\n      tableRef={mergedRef}\n      listContainerRef={listContainerRef}\n      {...props}\n      transactions={transactionsWithExpandedSplits}\n      transactionMap={transactionMap}\n      transactionsByParent={transactionsByParent}\n      transferAccountsByTransaction={transferAccountsByTransaction}\n      selectedItems={selectedItems}\n      isExpanded={splitsExpanded.expanded}\n      onSave={onSave}\n      onDelete={onDelete}\n      onSplit={onSplit}\n      onCheckNewEnter={onCheckNewEnter}\n      onCheckEnter={onCheckEnter}\n      onAddTemporary={onAddTemporary}\n      onAddSplit={onAddSplit}\n      onDistributeRemainder={onDistributeRemainder}\n      onCloseAddTransaction={onCloseAddTransaction}\n      onToggleSplit={onToggleSplit}\n      newTransactions={newTransactions}\n      tableNavigator={tableNavigator}\n      newNavigator={newNavigator}\n    />\n  );\n});\n\nTransactionTable.displayName = 'TransactionTable';\n\nfunction notesTagFormatter(notes, onNotesTagClick) {\n  const words = notes.split(' ');\n  return (\n    <>\n      {words.map((word, i, arr) => {\n        const separator = arr.length - 1 === i ? '' : ' ';\n        if (word.includes('#') && word.length > 1) {\n          let lastEmptyTag = -1;\n          // Treat tags in a single word as separate tags.\n          // #tag1#tag2 => (#tag1)(#tag2)\n          // not-a-tag#tag2#tag3 => not-a-tag(#tag2)(#tag3)\n          return word.split('#').map((tag, ti) => {\n            if (ti === 0) {\n              return tag;\n            }\n\n            if (!tag) {\n              lastEmptyTag = ti;\n              return '#';\n            }\n\n            if (lastEmptyTag === ti - 1) {\n              return `${tag} `;\n            }\n            lastEmptyTag = -1;\n\n            const validTag = `#${tag}`;\n            return (\n              <span key={`${validTag}${ti}`}>\n                <Button\n                  variant=\"bare\"\n                  key={i}\n                  style={({ isHovered }) => ({\n                    display: 'inline-flex',\n                    padding: '3px 7px',\n                    borderRadius: 16,\n                    userSelect: 'none',\n                    backgroundColor: theme.noteTagBackground,\n                    color: theme.noteTagText,\n                    cursor: 'pointer',\n                    ...(isHovered\n                      ? { backgroundColor: theme.noteTagBackgroundHover }\n                      : {}),\n                  })}\n                  onPress={() => {\n                    onNotesTagClick?.(validTag);\n                  }}\n                >\n                  {validTag}\n                </Button>\n                {separator}\n              </span>\n            );\n          });\n        }\n        return `${word}${separator}`;\n      })}\n    </>\n  );\n}\n","import React, { useRef, useCallback, useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { pushModal } from 'loot-core/client/actions';\nimport { send } from 'loot-core/src/platform/client/fetch';\nimport {\n  splitTransaction,\n  updateTransaction,\n  addSplitTransaction,\n  realizeTempTransactions,\n  applyTransactionDiff,\n} from 'loot-core/src/shared/transactions';\nimport { getChangedValues, applyChanges } from 'loot-core/src/shared/util';\n\nimport { useNavigate } from '../../hooks/useNavigate';\nimport { theme } from '../../style';\n\nimport { TransactionTable } from './TransactionsTable';\n\n// When data changes, there are two ways to update the UI:\n//\n// * Optimistic updates: we apply the needed updates to local data\n//   and rerender immediately, and send off the changes to the\n//   server. Currently, it assumes the server request is successful.\n//   If it fails the user will see a generic error which isn't\n//   great, but since the server is local a failure is very\n//   unlikely. Still, we should notify errors better.\n//\n// * A full refetch and rerender: this is needed when applying\n//   updates locally is too complex. Usually this happens when\n//   changing a field that data is sorted on: we're not going\n//   to resort the data in memory, we want to rely on the database\n//   for that. So we need to do a full refresh.\n//\n// When writing updates, it's up to you to decide which one to do.\n// Optimistic updates feel snappy, but they might show data\n// differently than a full refresh. It's up to you to decide which\n// one to use when doing updates.\n\nasync function saveDiff(diff) {\n  const remoteUpdates = await send('transactions-batch-update', {\n    ...diff,\n    learnCategories: true,\n  });\n  if (remoteUpdates.length > 0) {\n    return { updates: remoteUpdates };\n  }\n  return {};\n}\n\nasync function saveDiffAndApply(diff, changes, onChange) {\n  const remoteDiff = await saveDiff(diff);\n  onChange(\n    applyTransactionDiff(changes.newTransaction, remoteDiff),\n    applyChanges(remoteDiff, changes.data),\n  );\n}\n\nexport function TransactionList({\n  tableRef,\n  transactions,\n  allTransactions,\n  loadMoreTransactions,\n  account,\n  accounts,\n  category,\n  categoryGroups,\n  payees,\n  balances,\n  showBalances,\n  showCleared,\n  showAccount,\n  headerContent,\n  isAdding,\n  isNew,\n  isMatched,\n  isFiltered,\n  dateFormat,\n  hideFraction,\n  addNotification,\n  renderEmpty,\n  onSort,\n  sortField,\n  ascDesc,\n  onChange,\n  onRefetch,\n  onCloseAddTransaction,\n  onCreatePayee,\n  onApplyFilter,\n}) {\n  const dispatch = useDispatch();\n  const transactionsLatest = useRef();\n  const navigate = useNavigate();\n\n  useLayoutEffect(() => {\n    transactionsLatest.current = transactions;\n  }, [transactions]);\n\n  const onAdd = useCallback(async newTransactions => {\n    newTransactions = realizeTempTransactions(newTransactions);\n\n    await saveDiff({ added: newTransactions });\n    onRefetch();\n  }, []);\n\n  const onSave = useCallback(async transaction => {\n    const changes = updateTransaction(transactionsLatest.current, transaction);\n\n    if (changes.diff.updated.length > 0) {\n      const dateChanged = !!changes.diff.updated[0].date;\n      if (dateChanged) {\n        // Make sure it stays at the top of the list of transactions\n        // for that date\n        changes.diff.updated[0].sort_order = Date.now();\n        await saveDiff(changes.diff);\n        onRefetch();\n      } else {\n        onChange(changes.newTransaction, changes.data);\n        saveDiffAndApply(changes.diff, changes, onChange);\n      }\n    }\n  }, []);\n\n  const onAddSplit = useCallback(id => {\n    const changes = addSplitTransaction(transactionsLatest.current, id);\n    onChange(changes.newTransaction, changes.data);\n    saveDiffAndApply(changes.diff, changes, onChange);\n    return changes.diff.added[0].id;\n  }, []);\n\n  const onSplit = useCallback(id => {\n    const changes = splitTransaction(transactionsLatest.current, id);\n    onChange(changes.newTransaction, changes.data);\n    saveDiffAndApply(changes.diff, changes, onChange);\n    return changes.diff.added[0].id;\n  }, []);\n\n  const onApplyRules = useCallback(\n    async (transaction, updatedFieldName = null) => {\n      const afterRules = await send('rules-run', { transaction });\n      const diff = getChangedValues(transaction, afterRules);\n\n      const newTransaction = { ...transaction };\n      if (diff) {\n        Object.keys(diff).forEach(field => {\n          if (\n            newTransaction[field] == null ||\n            newTransaction[field] === '' ||\n            newTransaction[field] === 0 ||\n            newTransaction[field] === false\n          ) {\n            newTransaction[field] = diff[field];\n          }\n        });\n\n        // When a rule updates a parent transaction, overwrite all changes to the current field in subtransactions.\n        if (\n          transaction.is_parent &&\n          diff.subtransactions !== undefined &&\n          updatedFieldName !== null\n        ) {\n          newTransaction.subtransactions = diff.subtransactions.map(\n            (st, idx) => ({\n              ...(newTransaction.subtransactions[idx] || st),\n              ...(st[updatedFieldName] != null && {\n                [updatedFieldName]: st[updatedFieldName],\n              }),\n            }),\n          );\n        }\n      }\n      return newTransaction;\n    },\n    [],\n  );\n\n  const onManagePayees = useCallback(id => {\n    navigate('/payees', { state: { selectedPayee: id } });\n  });\n\n  const onNavigateToTransferAccount = useCallback(accountId => {\n    navigate(`/accounts/${accountId}`);\n  });\n\n  const onNavigateToSchedule = useCallback(scheduleId => {\n    dispatch(pushModal('schedule-edit', { id: scheduleId }));\n  });\n\n  const onNotesTagClick = useCallback(tag => {\n    onApplyFilter({\n      field: 'notes',\n      op: 'hasTags',\n      value: tag,\n      type: 'string',\n    });\n  });\n\n  return (\n    <TransactionTable\n      ref={tableRef}\n      transactions={allTransactions}\n      loadMoreTransactions={loadMoreTransactions}\n      accounts={accounts}\n      categoryGroups={categoryGroups}\n      payees={payees}\n      showBalances={showBalances}\n      balances={balances}\n      showCleared={showCleared}\n      showAccount={showAccount}\n      showCategory={true}\n      currentAccountId={account && account.id}\n      currentCategoryId={category && category.id}\n      isAdding={isAdding}\n      isNew={isNew}\n      isMatched={isMatched}\n      isFiltered={isFiltered}\n      dateFormat={dateFormat}\n      hideFraction={hideFraction}\n      addNotification={addNotification}\n      headerContent={headerContent}\n      renderEmpty={renderEmpty}\n      onSave={onSave}\n      onApplyRules={onApplyRules}\n      onSplit={onSplit}\n      onCloseAddTransaction={onCloseAddTransaction}\n      onAdd={onAdd}\n      onAddSplit={onAddSplit}\n      onManagePayees={onManagePayees}\n      onCreatePayee={onCreatePayee}\n      style={{ backgroundColor: theme.tableBackground }}\n      onNavigateToTransferAccount={onNavigateToTransferAccount}\n      onNavigateToSchedule={onNavigateToSchedule}\n      onNotesTagClick={onNotesTagClick}\n      onSort={onSort}\n      sortField={sortField}\n      ascDesc={ascDesc}\n    />\n  );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Menu } from '../common/Menu';\n\nimport { type SavedFilter } from './SavedFilterMenuButton';\n\nexport function FilterMenu({\n  filterId,\n  onFilterMenuSelect,\n}: {\n  filterId: SavedFilter;\n  onFilterMenuSelect: (item: string) => void;\n}) {\n  const { t } = useTranslation();\n\n  return (\n    <Menu\n      onMenuSelect={item => {\n        onFilterMenuSelect(item);\n      }}\n      items={\n        !filterId.id\n          ? [\n              { name: 'save-filter', text: t('Save new filter') },\n              { name: 'clear-filter', text: t('Clear all conditions') },\n            ]\n          : filterId.id !== null && filterId.status === 'saved'\n            ? [\n                { name: 'rename-filter', text: t('Rename') },\n                { name: 'delete-filter', text: t('Delete') },\n                Menu.line,\n                {\n                  name: 'save-filter',\n                  text: t('Save new filter'),\n                  disabled: true,\n                },\n                { name: 'clear-filter', text: t('Clear all conditions') },\n              ]\n            : [\n                { name: 'rename-filter', text: t('Rename') },\n                { name: 'update-filter', text: t('Update condtions') },\n                { name: 'reload-filter', text: t('Revert changes') },\n                { name: 'delete-filter', text: t('Delete') },\n                Menu.line,\n                { name: 'save-filter', text: t('Save new filter') },\n                { name: 'clear-filter', text: t('Clear all conditions') },\n              ]\n      }\n    />\n  );\n}\n","import React, { useRef, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from '../../style';\nimport { Button } from '../common/Button';\nimport { Input } from '../common/Input';\nimport { Stack } from '../common/Stack';\nimport { Text } from '../common/Text';\nimport { FormField, FormLabel } from '../forms';\n\nexport function NameFilter({\n  menuItem,\n  name,\n  setName,\n  adding,\n  onAddUpdate,\n  err,\n}: {\n  menuItem: string;\n  name: string;\n  setName: (item: string) => void;\n  adding: boolean;\n  onAddUpdate: () => void;\n  err: string | null;\n}) {\n  const { t } = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <>\n      {menuItem !== 'update-filter' && (\n        <form>\n          <Stack\n            direction=\"row\"\n            justify=\"flex-end\"\n            align=\"center\"\n            style={{ padding: 10 }}\n          >\n            <FormField style={{ flex: 1 }}>\n              <FormLabel\n                title={t('Filter Name')}\n                htmlFor=\"name-field\"\n                style={{ userSelect: 'none' }}\n              />\n              <Input\n                id=\"name-field\"\n                inputRef={inputRef}\n                defaultValue={name || ''}\n                onChangeValue={setName}\n              />\n            </FormField>\n            <Button\n              type=\"primary\"\n              style={{ marginTop: 18 }}\n              onClick={e => {\n                e.preventDefault();\n                onAddUpdate();\n              }}\n            >\n              {adding ? t('Add') : t('Update')}\n            </Button>\n          </Stack>\n        </form>\n      )}\n      {err && (\n        <Stack direction=\"row\" align=\"center\" style={{ padding: 10 }}>\n          <Text style={{ color: theme.errorText }}>{err}</Text>\n        </Stack>\n      )}\n    </>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { send, sendCatch } from 'loot-core/src/platform/client/fetch';\nimport { type TransactionFilterEntity } from 'loot-core/types/models';\nimport { type RuleConditionEntity } from 'loot-core/types/models/rule';\n\nimport { SvgExpandArrow } from '../../icons/v0';\nimport { Button } from '../common/Button';\nimport { Popover } from '../common/Popover';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\n\nimport { FilterMenu } from './FilterMenu';\nimport { NameFilter } from './NameFilter';\n\nexport type SavedFilter = {\n  conditions?: RuleConditionEntity[];\n  conditionsOp?: string;\n  id?: string;\n  name: string;\n  status?: string;\n};\n\nexport function SavedFilterMenuButton({\n  conditions,\n  conditionsOp,\n  filterId,\n  onClearFilters,\n  onReloadSavedFilter,\n  savedFilters,\n}: {\n  conditions: RuleConditionEntity[];\n  conditionsOp: string;\n  filterId: SavedFilter;\n  onClearFilters: () => void;\n  onReloadSavedFilter: (savedFilter: SavedFilter, value?: string) => void;\n  savedFilters: TransactionFilterEntity[];\n}) {\n  const { t } = useTranslation();\n  const [nameOpen, setNameOpen] = useState(false);\n  const [adding, setAdding] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n  const [err, setErr] = useState(null);\n  const [menuItem, setMenuItem] = useState('');\n  const [name, setName] = useState(filterId.name);\n  const id = filterId.id;\n  let savedFilter: SavedFilter;\n\n  const onFilterMenuSelect = async (item: string) => {\n    setMenuItem(item);\n    switch (item) {\n      case 'rename-filter':\n        setErr(null);\n        setAdding(false);\n        setMenuOpen(false);\n        setNameOpen(true);\n        break;\n      case 'delete-filter':\n        setMenuOpen(false);\n        await send('filter-delete', id);\n        onClearFilters();\n        break;\n      case 'update-filter':\n        setErr(null);\n        setAdding(false);\n        setMenuOpen(false);\n        savedFilter = {\n          conditions,\n          conditionsOp,\n          id: filterId.id,\n          name: filterId.name,\n          status: 'saved',\n        };\n        const response = await sendCatch('filter-update', {\n          state: savedFilter,\n          filters: [...savedFilters],\n        });\n\n        if (response.error) {\n          setErr(response.error.message);\n          setNameOpen(true);\n          return;\n        }\n\n        onReloadSavedFilter(savedFilter, 'update');\n        break;\n      case 'save-filter':\n        setErr(null);\n        setAdding(true);\n        setMenuOpen(false);\n        setNameOpen(true);\n        break;\n      case 'reload-filter':\n        setMenuOpen(false);\n        savedFilter = {\n          ...savedFilter,\n          status: 'saved',\n        };\n        onReloadSavedFilter(savedFilter, 'reload');\n        break;\n      case 'clear-filter':\n        setMenuOpen(false);\n        onClearFilters();\n        break;\n      default:\n    }\n  };\n\n  async function onAddUpdate() {\n    if (adding) {\n      const newSavedFilter = {\n        conditions,\n        conditionsOp,\n        name,\n        status: 'saved',\n      };\n\n      const response = await sendCatch('filter-create', {\n        state: newSavedFilter,\n        filters: [...savedFilters],\n      });\n\n      if (response.error) {\n        setErr(response.error.message);\n        setNameOpen(true);\n        return;\n      }\n\n      setNameOpen(false);\n      onReloadSavedFilter({\n        ...newSavedFilter,\n        id: response.data,\n      });\n      return;\n    }\n\n    const updatedFilter = {\n      conditions: filterId.conditions,\n      conditionsOp: filterId.conditionsOp,\n      id: filterId.id,\n      name,\n    };\n\n    const response = await sendCatch('filter-update', {\n      state: updatedFilter,\n      filters: [...savedFilters],\n    });\n\n    if (response.error) {\n      setErr(response.error.message);\n      setNameOpen(true);\n      return;\n    }\n\n    setNameOpen(false);\n    onReloadSavedFilter(updatedFilter);\n  }\n\n  return (\n    <View>\n      {conditions.length > 0 && (\n        <Button\n          ref={triggerRef}\n          type=\"bare\"\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            setMenuOpen(true);\n          }}\n        >\n          <Text\n            style={{\n              maxWidth: 150,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              flexShrink: 0,\n            }}\n          >\n            {!filterId.id ? t('Unsaved filter') : filterId.name}&nbsp;\n          </Text>\n          {filterId.id && filterId.status !== 'saved' && (\n            <Text>\n              <Trans>(modified)</Trans>&nbsp;\n            </Text>\n          )}\n          <SvgExpandArrow width={8} height={8} style={{ marginRight: 5 }} />\n        </Button>\n      )}\n\n      <Popover\n        triggerRef={triggerRef}\n        isOpen={menuOpen}\n        onOpenChange={() => setMenuOpen(false)}\n        style={{ width: 200 }}\n      >\n        <FilterMenu\n          filterId={filterId}\n          onFilterMenuSelect={onFilterMenuSelect}\n        />\n      </Popover>\n\n      <Popover\n        triggerRef={triggerRef}\n        isOpen={nameOpen}\n        onOpenChange={() => setNameOpen(false)}\n        style={{ width: 325 }}\n      >\n        <NameFilter\n          menuItem={menuItem}\n          name={name}\n          setName={setName}\n          adding={adding}\n          onAddUpdate={onAddUpdate}\n          err={err}\n        />\n      </Popover>\n    </View>\n  );\n}\n","import React from 'react';\n\nimport { type TransactionFilterEntity } from 'loot-core/types/models';\nimport { type RuleConditionEntity } from 'loot-core/types/models/rule';\n\nimport { Stack } from '../common/Stack';\nimport { View } from '../common/View';\n\nimport { AppliedFilters } from './AppliedFilters';\nimport {\n  type SavedFilter,\n  SavedFilterMenuButton,\n} from './SavedFilterMenuButton';\n\nexport function FiltersStack({\n  conditions,\n  conditionsOp,\n  onUpdateFilter,\n  onDeleteFilter,\n  onClearFilters,\n  onReloadSavedFilter,\n  filterId,\n  savedFilters,\n  onConditionsOpChange,\n}: {\n  conditions: RuleConditionEntity[];\n  conditionsOp: string;\n  onUpdateFilter: (\n    filter: RuleConditionEntity,\n    newFilter: RuleConditionEntity,\n  ) => void;\n  onDeleteFilter: (filter: RuleConditionEntity) => void;\n  onClearFilters: () => void;\n  onReloadSavedFilter: (savedFilter: SavedFilter, value?: string) => void;\n  filterId: SavedFilter;\n  savedFilters: TransactionFilterEntity[];\n  onConditionsOpChange: (value: 'and' | 'or') => void;\n}) {\n  return (\n    <View>\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        justify=\"flex-start\"\n        align=\"flex-start\"\n      >\n        <AppliedFilters\n          conditions={conditions}\n          conditionsOp={conditionsOp}\n          onConditionsOpChange={onConditionsOpChange}\n          onUpdate={onUpdateFilter}\n          onDelete={onDeleteFilter}\n        />\n        <View style={{ flex: 1 }} />\n        <SavedFilterMenuButton\n          conditions={conditions}\n          conditionsOp={conditionsOp}\n          filterId={filterId}\n          onClearFilters={onClearFilters}\n          onReloadSavedFilter={onReloadSavedFilter}\n          savedFilters={savedFilters}\n        />\n      </Stack>\n    </View>\n  );\n}\n","import { useMemo } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport { pushModal } from 'loot-core/client/actions';\nimport { isPreviewId } from 'loot-core/shared/transactions';\nimport { validForTransfer } from 'loot-core/src/client/transfer';\n\nimport { useSelectedItems } from '../../hooks/useSelected';\nimport { Menu } from '../common/Menu';\nimport { SelectedItemsButton } from '../table';\n\nexport function SelectedTransactionsButton({\n  getTransaction,\n  onShow,\n  onDuplicate,\n  onDelete,\n  onEdit,\n  onLinkSchedule,\n  onUnlinkSchedule,\n  onCreateRule,\n  onSetTransfer,\n  onScheduleAction,\n  showMakeTransfer,\n  onMakeAsSplitTransaction,\n  onMakeAsNonSplitTransactions,\n}) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const selectedItems = useSelectedItems();\n  const selectedIds = useMemo(() => [...selectedItems], [selectedItems]);\n\n  const types = useMemo(() => {\n    const items = selectedIds;\n    return {\n      preview: !!items.find(id => isPreviewId(id)),\n      trans: !!items.find(id => !isPreviewId(id)),\n    };\n  }, [selectedIds]);\n\n  const ambiguousDuplication = useMemo(() => {\n    const transactions = selectedIds.map(id => getTransaction(id));\n\n    return transactions.some(tx => tx && tx.is_child);\n  }, [selectedIds, getTransaction]);\n\n  const linked = useMemo(() => {\n    return (\n      !types.preview &&\n      selectedIds.every(id => {\n        const t = getTransaction(id);\n        return t && t.schedule;\n      })\n    );\n  }, [types.preview, selectedIds, getTransaction]);\n\n  const canBeTransfer = useMemo(() => {\n    // only two selected\n    if (selectedIds.length !== 2) {\n      return false;\n    }\n    const fromTrans = getTransaction(selectedIds[0]);\n    const toTrans = getTransaction(selectedIds[1]);\n\n    // previously selected transactions aren't always present in current transaction list\n    if (!fromTrans || !toTrans) {\n      return false;\n    }\n\n    return validForTransfer(fromTrans, toTrans);\n  }, [selectedIds, getTransaction]);\n\n  const canMakeAsSplitTransaction = useMemo(() => {\n    if (selectedIds.length <= 1 || types.preview) {\n      return false;\n    }\n\n    const transactions = selectedIds.map(id => getTransaction(id));\n    const [firstTransaction] = transactions;\n\n    const areAllSameDateAndAccount = transactions.every(\n      tx =>\n        tx &&\n        tx.date === firstTransaction.date &&\n        tx.account === firstTransaction.account,\n    );\n    const areNoSplitTransactions = transactions.every(\n      tx => tx && !tx.is_parent && !tx.is_child,\n    );\n    const areNoReconciledTransactions = transactions.every(\n      tx => tx && !tx.reconciled,\n    );\n\n    return (\n      areAllSameDateAndAccount &&\n      areNoSplitTransactions &&\n      areNoReconciledTransactions\n    );\n  }, [selectedIds, types, getTransaction]);\n\n  const canUnsplitTransactions = useMemo(() => {\n    if (selectedIds.length === 0 || types.preview) {\n      return false;\n    }\n\n    const transactions = selectedIds.map(id => getTransaction(id));\n\n    const areNoReconciledTransactions = transactions.every(\n      tx => tx && !tx.reconciled,\n    );\n    const areAllSplitTransactions = transactions.every(\n      tx => tx && (tx.is_parent || tx.is_child),\n    );\n    return areNoReconciledTransactions && areAllSplitTransactions;\n  }, [selectedIds, types, getTransaction]);\n\n  function onViewSchedule() {\n    const firstId = selectedIds[0];\n    let scheduleId;\n    if (isPreviewId(firstId)) {\n      const parts = firstId.split('/');\n      scheduleId = parts[1];\n    } else {\n      const trans = getTransaction(firstId);\n      scheduleId = trans && trans.schedule;\n    }\n\n    if (scheduleId) {\n      dispatch(pushModal('schedule-edit', { id: scheduleId }));\n    }\n  }\n\n  const hotKeyOptions = {\n    enabled: types.trans,\n    scopes: ['app'],\n  };\n  useHotkeys('f', () => onShow(selectedIds), hotKeyOptions, [\n    onShow,\n    selectedIds,\n  ]);\n  useHotkeys('d', () => onDelete(selectedIds), hotKeyOptions, [\n    onDelete,\n    selectedIds,\n  ]);\n  useHotkeys('a', () => onEdit('account', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('p', () => onEdit('payee', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('n', () => onEdit('notes', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('c', () => onEdit('category', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('l', () => onEdit('cleared', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys(\n    's',\n    () =>\n      !types.trans || linked ? onViewSchedule() : onLinkSchedule(selectedIds),\n    {\n      scopes: ['app'],\n    },\n    [onLinkSchedule, onViewSchedule, linked, selectedIds],\n  );\n\n  return (\n    <SelectedItemsButton\n      id=\"transactions\"\n      name={count => t('{{count}} transactions', { count })}\n      items={[\n        ...(!types.trans\n          ? [\n              { name: 'view-schedule', text: t('View schedule'), key: 'S' },\n              { name: 'post-transaction', text: t('Post transaction') },\n              { name: 'skip', text: t('Skip scheduled date') },\n            ]\n          : [\n              { name: 'show', text: t('Show'), key: 'F' },\n              {\n                name: 'duplicate',\n                text: t('Duplicate'),\n                disabled: ambiguousDuplication,\n              },\n              { name: 'delete', text: t('Delete'), key: 'D' },\n              ...(linked\n                ? [\n                    {\n                      name: 'view-schedule',\n                      text: t('View schedule'),\n                      key: 'S',\n                      disabled: selectedIds.length > 1,\n                    },\n                    { name: 'unlink-schedule', text: t('Unlink schedule') },\n                  ]\n                : [\n                    {\n                      name: 'link-schedule',\n                      text: t('Link schedule'),\n                      key: 'S',\n                    },\n                    {\n                      name: 'create-rule',\n                      text: t('Create rule'),\n                    },\n                  ]),\n              ...(showMakeTransfer\n                ? [\n                    {\n                      name: 'set-transfer',\n                      text: t('Make transfer'),\n                      disabled: !canBeTransfer,\n                    },\n                  ]\n                : []),\n              ...(canMakeAsSplitTransaction\n                ? [\n                    {\n                      name: 'make-as-split-transaction',\n                      text: t('Make as split transaction'),\n                    },\n                  ]\n                : []),\n              ...(canUnsplitTransactions\n                ? [\n                    {\n                      name: 'unsplit-transactions',\n                      text: t('Unsplit {{count}} transactions', {\n                        count: selectedIds.length,\n                      }),\n                    },\n                  ]\n                : []),\n              Menu.line,\n              { type: Menu.label, name: t('Edit field') },\n              { name: 'date', text: t('Date') },\n              { name: 'account', text: t('Account'), key: 'A' },\n              { name: 'payee', text: t('Payee'), key: 'P' },\n              { name: 'notes', text: t('Notes'), key: 'N' },\n              { name: 'category', text: t('Category'), key: 'C' },\n              { name: 'amount', text: t('Amount') },\n              { name: 'cleared', text: t('Cleared'), key: 'L' },\n            ]),\n      ]}\n      onSelect={name => {\n        switch (name) {\n          case 'show':\n            onShow(selectedIds);\n            break;\n          case 'duplicate':\n            onDuplicate(selectedIds);\n            break;\n          case 'delete':\n            onDelete(selectedIds);\n            break;\n          case 'make-as-split-transaction':\n            onMakeAsSplitTransaction(selectedIds);\n            break;\n          case 'unsplit-transactions':\n            onMakeAsNonSplitTransactions(selectedIds);\n            break;\n          case 'post-transaction':\n          case 'skip':\n            onScheduleAction(name, selectedIds);\n            break;\n          case 'view-schedule':\n            onViewSchedule();\n            break;\n          case 'link-schedule':\n            onLinkSchedule(selectedIds);\n            break;\n          case 'unlink-schedule':\n            onUnlinkSchedule(selectedIds);\n            break;\n          case 'create-rule':\n            onCreateRule(selectedIds);\n            break;\n          case 'set-transfer':\n            onSetTransfer(selectedIds);\n            break;\n          default:\n            onEdit(name, selectedIds);\n        }\n      }}\n    />\n  );\n}\n","import React, { useRef } from 'react';\n\nimport { useHover } from 'usehooks-ts';\n\nimport { isPreviewId } from 'loot-core/shared/transactions';\nimport { useCachedSchedules } from 'loot-core/src/client/data-hooks/schedules';\nimport { q } from 'loot-core/src/shared/query';\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\n\nimport { useSelectedItems } from '../../hooks/useSelected';\nimport { SvgArrowButtonRight1 } from '../../icons/v2';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { PrivacyFilter } from '../PrivacyFilter';\nimport { CellValue } from '../spreadsheet/CellValue';\nimport { useFormat } from '../spreadsheet/useFormat';\nimport { useSheetValue } from '../spreadsheet/useSheetValue';\n\nfunction DetailedBalance({ name, balance, isExactBalance = true }) {\n  const format = useFormat();\n  return (\n    <Text\n      style={{\n        marginLeft: 15,\n        borderRadius: 4,\n        padding: '4px 6px',\n        color: theme.pillText,\n        backgroundColor: theme.pillBackground,\n      }}\n    >\n      {name}{' '}\n      <PrivacyFilter>\n        <Text style={{ fontWeight: 600 }}>\n          {!isExactBalance && '~ '}\n          {format(balance, 'financial')}\n        </Text>\n      </PrivacyFilter>\n    </Text>\n  );\n}\n\nfunction SelectedBalance({ selectedItems, account }) {\n  const name = `selected-balance-${[...selectedItems].join('-')}`;\n\n  const rows = useSheetValue({\n    name,\n    query: q('transactions')\n      .filter({\n        id: { $oneof: [...selectedItems] },\n        parent_id: { $oneof: [...selectedItems] },\n      })\n      .select('id'),\n  });\n  const ids = new Set((rows || []).map(r => r.id));\n\n  const finalIds = [...selectedItems].filter(id => !ids.has(id));\n  let balance = useSheetValue({\n    name: name + '-sum',\n    query: q('transactions')\n      .filter({ id: { $oneof: finalIds } })\n      .options({ splits: 'all' })\n      .calculate({ $sum: '$amount' }),\n  });\n\n  let scheduleBalance = null;\n  const scheduleData = useCachedSchedules();\n  const schedules = scheduleData ? scheduleData.schedules : [];\n  const previewIds = [...selectedItems]\n    .filter(id => isPreviewId(id))\n    .map(id => id.slice(8));\n  let isExactBalance = true;\n\n  for (const s of schedules) {\n    if (previewIds.includes(s.id)) {\n      // If a schedule is `between X and Y` then we calculate the average\n      if (s._amountOp === 'isbetween') {\n        isExactBalance = false;\n      }\n\n      if (!account || account.id === s._account) {\n        scheduleBalance += getScheduledAmount(s._amount);\n      } else {\n        scheduleBalance -= getScheduledAmount(s._amount);\n      }\n    }\n  }\n\n  if (balance == null) {\n    if (scheduleBalance == null) {\n      return null;\n    } else {\n      balance = scheduleBalance;\n    }\n  } else if (scheduleBalance != null) {\n    balance += scheduleBalance;\n  }\n\n  return (\n    <DetailedBalance\n      name=\"Selected balance:\"\n      balance={balance}\n      isExactBalance={isExactBalance}\n    />\n  );\n}\n\nfunction FilteredBalance({ filteredAmount }) {\n  return (\n    <DetailedBalance\n      name=\"Filtered balance:\"\n      balance={filteredAmount || 0}\n      isExactBalance={true}\n    />\n  );\n}\n\nfunction MoreBalances({ balanceQuery }) {\n  const cleared = useSheetValue({\n    name: balanceQuery.name + '-cleared',\n    query: balanceQuery.query.filter({ cleared: true }),\n  });\n  const uncleared = useSheetValue({\n    name: balanceQuery.name + '-uncleared',\n    query: balanceQuery.query.filter({ cleared: false }),\n  });\n\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      <DetailedBalance name=\"Cleared total:\" balance={cleared} />\n      <DetailedBalance name=\"Uncleared total:\" balance={uncleared} />\n    </View>\n  );\n}\n\nexport function Balances({\n  balanceQuery,\n  showExtraBalances,\n  onToggleExtraBalances,\n  account,\n  isFiltered,\n  filteredAmount,\n}) {\n  const selectedItems = useSelectedItems();\n  const buttonRef = useRef(null);\n  const isButtonHovered = useHover(buttonRef);\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: -5,\n        marginLeft: -5,\n      }}\n    >\n      <Button\n        ref={buttonRef}\n        data-testid=\"account-balance\"\n        variant=\"bare\"\n        onPress={onToggleExtraBalances}\n        style={{\n          paddingTop: 1,\n          paddingBottom: 1,\n        }}\n      >\n        <CellValue\n          binding={{ ...balanceQuery, value: 0 }}\n          type=\"financial\"\n          style={{ fontSize: 22, fontWeight: 400 }}\n          getStyle={value => ({\n            color:\n              value < 0\n                ? theme.errorText\n                : value > 0\n                  ? theme.noticeTextLight\n                  : theme.pageTextSubdued,\n          })}\n          privacyFilter={{\n            blurIntensity: 5,\n          }}\n        />\n\n        <SvgArrowButtonRight1\n          style={{\n            width: 10,\n            height: 10,\n            marginLeft: 10,\n            color: theme.pillText,\n            transform: showExtraBalances ? 'rotateZ(180deg)' : 'rotateZ(0)',\n            opacity:\n              isButtonHovered || selectedItems.size > 0 || showExtraBalances\n                ? 1\n                : 0,\n          }}\n        />\n      </Button>\n      {showExtraBalances && <MoreBalances balanceQuery={balanceQuery} />}\n\n      {selectedItems.size > 0 && (\n        <SelectedBalance selectedItems={selectedItems} account={account} />\n      )}\n      {isFiltered && <FilteredBalance filteredAmount={filteredAmount} />}\n    </View>\n  );\n}\n","import React, { useState } from 'react';\n\nimport * as queries from 'loot-core/src/client/queries';\nimport { currencyToInteger } from 'loot-core/src/shared/util';\n\nimport { SvgCheckCircle1 } from '../../icons/v2';\nimport { styles, theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { InitialFocus } from '../common/InitialFocus';\nimport { Input } from '../common/Input';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { useFormat } from '../spreadsheet/useFormat';\nimport { useSheetValue } from '../spreadsheet/useSheetValue';\n\nexport function ReconcilingMessage({\n  balanceQuery,\n  targetBalance,\n  onDone,\n  onCreateTransaction,\n}) {\n  const cleared = useSheetValue({\n    name: balanceQuery.name + '-cleared',\n    value: 0,\n    query: balanceQuery.query.filter({ cleared: true }),\n  });\n  const format = useFormat();\n  const targetDiff = targetBalance - cleared;\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignSelf: 'center',\n        backgroundColor: theme.tableBackground,\n        ...styles.shadow,\n        borderRadius: 4,\n        marginTop: 5,\n        marginBottom: 15,\n        padding: 10,\n      }}\n    >\n      <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n        {targetDiff === 0 ? (\n          <View\n            style={{\n              color: theme.noticeTextLight,\n              flex: 1,\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <SvgCheckCircle1\n              style={{\n                width: 13,\n                height: 13,\n                color: 'inherit',\n                marginRight: 3,\n              }}\n            />\n            All reconciled!\n          </View>\n        ) : (\n          <View style={{ color: theme.tableText }}>\n            <Text style={{ fontStyle: 'italic', textAlign: 'center' }}>\n              Your cleared balance{' '}\n              <strong>{format(cleared, 'financial')}</strong> needs{' '}\n              <strong>\n                {(targetDiff > 0 ? '+' : '') + format(targetDiff, 'financial')}\n              </strong>{' '}\n              to match\n              <br /> your bank’s balance of{' '}\n              <Text style={{ fontWeight: 700 }}>\n                {format(targetBalance, 'financial')}\n              </Text>\n            </Text>\n          </View>\n        )}\n        <View style={{ marginLeft: 15 }}>\n          <Button variant=\"primary\" autoFocus onPress={onDone}>\n            Done Reconciling\n          </Button>\n        </View>\n        {targetDiff !== 0 && (\n          <View style={{ marginLeft: 15 }}>\n            <Button onPress={() => onCreateTransaction(targetDiff)}>\n              Create Reconciliation Transaction\n            </Button>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n}\n\nexport function ReconcileMenu({ account, onReconcile, onClose }) {\n  const balanceQuery = queries.accountBalance(account);\n  const clearedBalance = useSheetValue({\n    name: balanceQuery.name + '-cleared',\n    value: null,\n    query: balanceQuery.query.filter({ cleared: true }),\n  });\n  const format = useFormat();\n  const [inputValue, setInputValue] = useState(null);\n  const [inputFocused, setInputFocused] = useState(false);\n\n  function onSubmit() {\n    if (inputValue === '') {\n      setInputFocused(true);\n      return;\n    }\n\n    const amount =\n      inputValue != null ? currencyToInteger(inputValue) : clearedBalance;\n\n    onReconcile(amount);\n    onClose();\n  }\n\n  return (\n    <View style={{ padding: '5px 8px' }}>\n      <Text>\n        Enter the current balance of your bank account that you want to\n        reconcile with:\n      </Text>\n      {clearedBalance != null && (\n        <InitialFocus>\n          <Input\n            defaultValue={format(clearedBalance, 'financial')}\n            onChangeValue={setInputValue}\n            style={{ margin: '7px 0' }}\n            focused={inputFocused}\n            onEnter={onSubmit}\n          />\n        </InitialFocus>\n      )}\n      <Button variant=\"primary\" onPress={onSubmit}>\n        Reconcile\n      </Button>\n    </View>\n  );\n}\n","import React, { useState, useRef } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { useSplitsExpanded } from '../../hooks/useSplitsExpanded';\nimport { useSyncServerStatus } from '../../hooks/useSyncServerStatus';\nimport { AnimatedLoading } from '../../icons/AnimatedLoading';\nimport { SvgAdd } from '../../icons/v1';\nimport {\n  SvgArrowsExpand3,\n  SvgArrowsShrink3,\n  SvgDownloadThickBottom,\n  SvgPencil1,\n} from '../../icons/v2';\nimport { theme, styles } from '../../style';\nimport { AnimatedRefresh } from '../AnimatedRefresh';\nimport { Button } from '../common/Button2';\nimport { InitialFocus } from '../common/InitialFocus';\nimport { Input } from '../common/Input';\nimport { Menu } from '../common/Menu';\nimport { MenuButton } from '../common/MenuButton';\nimport { Popover } from '../common/Popover';\nimport { Search } from '../common/Search';\nimport { Stack } from '../common/Stack';\nimport { View } from '../common/View';\nimport { FilterButton } from '../filters/FiltersMenu';\nimport { FiltersStack } from '../filters/FiltersStack';\nimport { NotesButton } from '../NotesButton';\nimport { SelectedTransactionsButton } from '../transactions/SelectedTransactionsButton';\n\nimport { Balances } from './Balance';\nimport { ReconcilingMessage, ReconcileMenu } from './Reconcile';\n\nexport function AccountHeader({\n  tableRef,\n  editingName,\n  isNameEditable,\n  workingHard,\n  accountName,\n  account,\n  filterId,\n  savedFilters,\n  accountsSyncing,\n  failedAccounts,\n  accounts,\n  transactions,\n  showBalances,\n  showExtraBalances,\n  showCleared,\n  showReconciled,\n  showEmptyMessage,\n  balanceQuery,\n  reconcileAmount,\n  canCalculateBalance,\n  isFiltered,\n  filteredAmount,\n  isSorted,\n  search,\n  filterConditions,\n  filterConditionsOp,\n  pushModal,\n  onSearch,\n  onAddTransaction,\n  onShowTransactions,\n  onDoneReconciling,\n  onCreateReconciliationTransaction,\n  onToggleExtraBalances,\n  onSaveName,\n  onExposeName,\n  onSync,\n  onImport,\n  onMenuSelect,\n  onReconcile,\n  onBatchDelete,\n  onBatchDuplicate,\n  onBatchEdit,\n  onBatchLinkSchedule,\n  onBatchUnlinkSchedule,\n  onCreateRule,\n  onApplyFilter,\n  onUpdateFilter,\n  onClearFilters,\n  onReloadSavedFilter,\n  onConditionsOpChange,\n  onDeleteFilter,\n  onScheduleAction,\n  onSetTransfer,\n  onMakeAsSplitTransaction,\n  onMakeAsNonSplitTransactions,\n}) {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const searchInput = useRef(null);\n  const triggerRef = useRef(null);\n  const splitsExpanded = useSplitsExpanded();\n  const syncServerStatus = useSyncServerStatus();\n  const isUsingServer = syncServerStatus !== 'no-server';\n  const isServerOffline = syncServerStatus === 'offline';\n  const [_, setExpandSplitsPref] = useLocalPref('expand-splits');\n\n  let canSync = account && account.account_id && isUsingServer;\n  if (!account) {\n    // All accounts - check for any syncable account\n    canSync = !!accounts.find(account => !!account.account_id) && isUsingServer;\n  }\n\n  // Only show the ability to make linked transfers on multi-account views.\n  const showMakeTransfer = !account;\n\n  function onToggleSplits() {\n    if (tableRef.current) {\n      splitsExpanded.dispatch({\n        type: 'switch-mode',\n        id: tableRef.current.getScrolledItem(),\n      });\n\n      setExpandSplitsPref(!(splitsExpanded.state.mode === 'expand'));\n    }\n  }\n\n  useHotkeys(\n    'ctrl+f, cmd+f, meta+f',\n    () => {\n      if (searchInput.current) {\n        searchInput.current.focus();\n      }\n    },\n    {\n      enableOnFormTags: true,\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [searchInput],\n  );\n  useHotkeys(\n    't',\n    () => onAddTransaction(),\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [onAddTransaction],\n  );\n  useHotkeys(\n    'ctrl+i, cmd+i, meta+i',\n    () => onImport(),\n    {\n      scopes: ['app'],\n    },\n    [onImport],\n  );\n  useHotkeys(\n    'ctrl+b, cmd+b, meta+b',\n    () => onSync(),\n    {\n      enabled: canSync && !isServerOffline,\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [onSync],\n  );\n\n  return (\n    <>\n      <View style={{ ...styles.pageContent, paddingBottom: 10, flexShrink: 0 }}>\n        <View\n          style={{ marginTop: 2, marginBottom: 10, alignItems: 'flex-start' }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: 3,\n            }}\n          >\n            {!!account?.bank && (\n              <View\n                style={{\n                  backgroundColor: accountsSyncing.includes(account.id)\n                    ? theme.sidebarItemBackgroundPending\n                    : failedAccounts.has(account.id)\n                      ? theme.sidebarItemBackgroundFailed\n                      : theme.sidebarItemBackgroundPositive,\n                  marginRight: '4px',\n                  width: 8,\n                  height: 8,\n                  borderRadius: 8,\n                }}\n              />\n            )}\n            {editingName ? (\n              <InitialFocus>\n                <Input\n                  defaultValue={accountName}\n                  onEnter={e => onSaveName(e.target.value)}\n                  onBlur={e => onSaveName(e.target.value)}\n                  onEscape={() => onExposeName(false)}\n                  style={{\n                    fontSize: 25,\n                    fontWeight: 500,\n                    marginTop: -3,\n                    marginBottom: -4,\n                    marginLeft: -6,\n                    paddingTop: 2,\n                    paddingBottom: 2,\n                    width: Math.max(20, accountName.length) + 'ch',\n                  }}\n                />\n              </InitialFocus>\n            ) : isNameEditable ? (\n              <View\n                style={{\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  gap: 3,\n                  '& .hover-visible': {\n                    opacity: 0,\n                    transition: 'opacity .25s',\n                  },\n                  '&:hover .hover-visible': {\n                    opacity: 1,\n                  },\n                }}\n              >\n                <View\n                  style={{\n                    fontSize: 25,\n                    fontWeight: 500,\n                    marginRight: 5,\n                    marginBottom: -1,\n                  }}\n                  data-testid=\"account-name\"\n                >\n                  {account && account.closed\n                    ? 'Closed: ' + accountName\n                    : accountName}\n                </View>\n\n                {account && (\n                  <NotesButton\n                    id={`account-${account.id}`}\n                    defaultColor={theme.pageTextSubdued}\n                  />\n                )}\n                <Button\n                  variant=\"bare\"\n                  aria-label=\"Edit account name\"\n                  className=\"hover-visible\"\n                  onPress={() => onExposeName(true)}\n                >\n                  <SvgPencil1\n                    style={{\n                      width: 11,\n                      height: 11,\n                      color: theme.pageTextSubdued,\n                    }}\n                  />\n                </Button>\n              </View>\n            ) : (\n              <View\n                style={{ fontSize: 25, fontWeight: 500, marginBottom: -1 }}\n                data-testid=\"account-name\"\n              >\n                {account && account.closed\n                  ? 'Closed: ' + accountName\n                  : accountName}\n              </View>\n            )}\n          </View>\n        </View>\n\n        <Balances\n          balanceQuery={balanceQuery}\n          showExtraBalances={showExtraBalances}\n          onToggleExtraBalances={onToggleExtraBalances}\n          account={account}\n          isFiltered={isFiltered}\n          filteredAmount={filteredAmount}\n        />\n\n        <Stack\n          spacing={2}\n          direction=\"row\"\n          align=\"center\"\n          style={{ marginTop: 12 }}\n        >\n          {((account && !account.closed) || canSync) && (\n            <Button\n              variant=\"bare\"\n              onPress={canSync ? onSync : onImport}\n              isDisabled={canSync && isServerOffline}\n            >\n              {canSync ? (\n                <>\n                  <AnimatedRefresh\n                    width={13}\n                    height={13}\n                    animating={\n                      account\n                        ? accountsSyncing.includes(account.id)\n                        : accountsSyncing.length > 0\n                    }\n                    style={{ marginRight: 4 }}\n                  />{' '}\n                  {isServerOffline ? 'Bank Sync Offline' : 'Bank Sync'}\n                </>\n              ) : (\n                <>\n                  <SvgDownloadThickBottom\n                    width={13}\n                    height={13}\n                    style={{ marginRight: 4 }}\n                  />{' '}\n                  Import\n                </>\n              )}\n            </Button>\n          )}\n          {!showEmptyMessage && (\n            <Button variant=\"bare\" onPress={onAddTransaction}>\n              <SvgAdd width={10} height={10} style={{ marginRight: 3 }} /> Add\n              New\n            </Button>\n          )}\n          <View style={{ flexShrink: 0 }}>\n            <FilterButton onApply={onApplyFilter} type=\"accounts\" />\n          </View>\n          <View style={{ flex: 1 }} />\n          <Search\n            placeholder=\"Search\"\n            value={search}\n            onChange={onSearch}\n            inputRef={searchInput}\n          />\n          {workingHard ? (\n            <View>\n              <AnimatedLoading style={{ width: 16, height: 16 }} />\n            </View>\n          ) : (\n            <SelectedTransactionsButton\n              account={account}\n              getTransaction={id => transactions.find(t => t.id === id)}\n              onShow={onShowTransactions}\n              onDuplicate={onBatchDuplicate}\n              onDelete={onBatchDelete}\n              onEdit={onBatchEdit}\n              onLinkSchedule={onBatchLinkSchedule}\n              onUnlinkSchedule={onBatchUnlinkSchedule}\n              onCreateRule={onCreateRule}\n              onSetTransfer={onSetTransfer}\n              onScheduleAction={onScheduleAction}\n              pushModal={pushModal}\n              showMakeTransfer={showMakeTransfer}\n              onMakeAsSplitTransaction={onMakeAsSplitTransaction}\n              onMakeAsNonSplitTransactions={onMakeAsNonSplitTransactions}\n            />\n          )}\n          <Button\n            variant=\"bare\"\n            aria-label={\n              splitsExpanded.state.mode === 'collapse'\n                ? 'Collapse split transactions'\n                : 'Expand split transactions'\n            }\n            isDisabled={search !== '' || filterConditions.length > 0}\n            style={{ padding: 6, marginLeft: 10 }}\n            onPress={onToggleSplits}\n          >\n            <View\n              title={\n                splitsExpanded.state.mode === 'collapse'\n                  ? 'Collapse split transactions'\n                  : 'Expand split transactions'\n              }\n            >\n              {splitsExpanded.state.mode === 'collapse' ? (\n                <SvgArrowsShrink3 style={{ width: 14, height: 14 }} />\n              ) : (\n                <SvgArrowsExpand3 style={{ width: 14, height: 14 }} />\n              )}\n            </View>\n          </Button>\n          {account ? (\n            <View>\n              <MenuButton\n                aria-label=\"Account menu\"\n                ref={triggerRef}\n                onPress={() => setMenuOpen(true)}\n              />\n\n              <Popover\n                triggerRef={triggerRef}\n                style={{ width: 275 }}\n                isOpen={menuOpen}\n                onOpenChange={() => setMenuOpen(false)}\n              >\n                <AccountMenu\n                  account={account}\n                  canSync={canSync}\n                  canShowBalances={canCalculateBalance()}\n                  isSorted={isSorted}\n                  showBalances={showBalances}\n                  showCleared={showCleared}\n                  showReconciled={showReconciled}\n                  onMenuSelect={item => {\n                    setMenuOpen(false);\n                    onMenuSelect(item);\n                  }}\n                  onReconcile={onReconcile}\n                  onClose={() => setMenuOpen(false)}\n                />\n              </Popover>\n            </View>\n          ) : (\n            <View>\n              <MenuButton\n                aria-label=\"Account menu\"\n                ref={triggerRef}\n                onPress={() => setMenuOpen(true)}\n              />\n\n              <Popover\n                triggerRef={triggerRef}\n                isOpen={menuOpen}\n                onOpenChange={() => setMenuOpen(false)}\n              >\n                <Menu\n                  onMenuSelect={item => {\n                    setMenuOpen(false);\n                    onMenuSelect(item);\n                  }}\n                  items={[\n                    isSorted && {\n                      name: 'remove-sorting',\n                      text: 'Remove all sorting',\n                    },\n                    { name: 'export', text: 'Export' },\n                  ]}\n                />\n              </Popover>\n            </View>\n          )}\n        </Stack>\n\n        {filterConditions?.length > 0 && (\n          <FiltersStack\n            conditions={filterConditions}\n            conditionsOp={filterConditionsOp}\n            onUpdateFilter={onUpdateFilter}\n            onDeleteFilter={onDeleteFilter}\n            onClearFilters={onClearFilters}\n            onReloadSavedFilter={onReloadSavedFilter}\n            filterId={filterId}\n            savedFilters={savedFilters}\n            onConditionsOpChange={onConditionsOpChange}\n          />\n        )}\n      </View>\n      {reconcileAmount != null && (\n        <ReconcilingMessage\n          targetBalance={reconcileAmount}\n          balanceQuery={balanceQuery}\n          onDone={onDoneReconciling}\n          onCreateTransaction={onCreateReconciliationTransaction}\n        />\n      )}\n    </>\n  );\n}\n\nfunction AccountMenu({\n  account,\n  canSync,\n  showBalances,\n  canShowBalances,\n  showCleared,\n  showReconciled,\n  onClose,\n  isSorted,\n  onReconcile,\n  onMenuSelect,\n}) {\n  const [tooltip, setTooltip] = useState('default');\n  const syncServerStatus = useSyncServerStatus();\n\n  return tooltip === 'reconcile' ? (\n    <ReconcileMenu\n      account={account}\n      onClose={onClose}\n      onReconcile={onReconcile}\n    />\n  ) : (\n    <Menu\n      onMenuSelect={item => {\n        if (item === 'reconcile') {\n          setTooltip('reconcile');\n        } else {\n          onMenuSelect(item);\n        }\n      }}\n      items={[\n        isSorted && {\n          name: 'remove-sorting',\n          text: 'Remove all sorting',\n        },\n        canShowBalances && {\n          name: 'toggle-balance',\n          text: (showBalances ? 'Hide' : 'Show') + ' running balance',\n        },\n        {\n          name: 'toggle-cleared',\n          text: (showCleared ? 'Hide' : 'Show') + ' “cleared” checkboxes',\n        },\n        {\n          name: 'toggle-reconciled',\n          text: (showReconciled ? 'Hide' : 'Show') + ' reconciled transactions',\n        },\n        { name: 'export', text: 'Export' },\n        { name: 'reconcile', text: 'Reconcile' },\n        account &&\n          !account.closed &&\n          (canSync\n            ? {\n                name: 'unlink',\n                text: 'Unlink account',\n              }\n            : syncServerStatus === 'online' && {\n                name: 'link',\n                text: 'Link account',\n              }),\n        account.closed\n          ? { name: 'reopen', text: 'Reopen account' }\n          : { name: 'close', text: 'Close account' },\n      ].filter(x => x)}\n    />\n  );\n}\n","import React, { PureComponent, createRef, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useParams, useLocation } from 'react-router-dom';\n\nimport { debounce } from 'debounce';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { validForTransfer } from 'loot-core/client/transfer';\nimport { useFilters } from 'loot-core/src/client/data-hooks/filters';\nimport {\n  SchedulesProvider,\n  useDefaultSchedulesQueryTransform,\n} from 'loot-core/src/client/data-hooks/schedules';\nimport * as queries from 'loot-core/src/client/queries';\nimport { runQuery, pagedQuery } from 'loot-core/src/client/query-helpers';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport { currentDay } from 'loot-core/src/shared/months';\nimport { q } from 'loot-core/src/shared/query';\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\nimport {\n  updateTransaction,\n  realizeTempTransactions,\n  ungroupTransaction,\n  ungroupTransactions,\n  makeChild,\n  makeAsNonChildTransactions,\n} from 'loot-core/src/shared/transactions';\nimport { applyChanges, groupById } from 'loot-core/src/shared/util';\n\nimport { useAccounts } from '../../hooks/useAccounts';\nimport { useActions } from '../../hooks/useActions';\nimport { useCategories } from '../../hooks/useCategories';\nimport { useDateFormat } from '../../hooks/useDateFormat';\nimport { useFailedAccounts } from '../../hooks/useFailedAccounts';\nimport { usePayees } from '../../hooks/usePayees';\nimport { usePreviewTransactions } from '../../hooks/usePreviewTransactions';\nimport { SelectedProviderWithItems } from '../../hooks/useSelected';\nimport {\n  SplitsExpandedProvider,\n  useSplitsExpanded,\n} from '../../hooks/useSplitsExpanded';\nimport { useSyncedPref } from '../../hooks/useSyncedPref';\nimport { useTransactionBatchActions } from '../../hooks/useTransactionBatchActions';\nimport { styles, theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { TransactionList } from '../transactions/TransactionList';\n\nimport { AccountHeader } from './Header';\n\nfunction EmptyMessage({ onAdd }) {\n  return (\n    <View\n      style={{\n        color: theme.tableText,\n        backgroundColor: theme.tableBackground,\n        flex: 1,\n        alignItems: 'center',\n        borderTopWidth: 1,\n        borderColor: theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: 550,\n          marginTop: 75,\n          fontSize: 15,\n          alignItems: 'center',\n        }}\n      >\n        <Text style={{ textAlign: 'center', lineHeight: '1.4em' }}>\n          For Actual to be useful, you need to <strong>add an account</strong>.\n          You can link an account to automatically download transactions, or\n          manage it locally yourself.\n        </Text>\n\n        <Button\n          variant=\"primary\"\n          style={{ marginTop: 20 }}\n          autoFocus\n          onPress={onAdd}\n        >\n          Add account\n        </Button>\n\n        <View\n          style={{ marginTop: 20, fontSize: 13, color: theme.tableTextLight }}\n        >\n          In the future, you can add accounts from the sidebar.\n        </View>\n      </View>\n    </View>\n  );\n}\n\nfunction AllTransactions({\n  account = {},\n  transactions,\n  balances,\n  showBalances,\n  filtered,\n  children,\n  collapseTransactions,\n}) {\n  const accountId = account.id;\n  const prependTransactions = usePreviewTransactions(collapseTransactions).map(\n    trans => ({\n      ...trans,\n      _inverse: accountId ? accountId !== trans.account : false,\n    }),\n  );\n\n  transactions ??= [];\n\n  let runningBalance = useMemo(() => {\n    if (!showBalances) {\n      return 0;\n    }\n\n    return balances && transactions?.length > 0\n      ? (balances[transactions[0].id]?.balance ?? 0)\n      : 0;\n  }, [showBalances, balances, transactions]);\n\n  const prependBalances = useMemo(() => {\n    if (!showBalances) {\n      return null;\n    }\n\n    // Reverse so we can calculate from earliest upcoming schedule.\n    const scheduledBalances = [...prependTransactions]\n      .reverse()\n      .map(scheduledTransaction => {\n        const amount =\n          (scheduledTransaction._inverse ? -1 : 1) *\n          getScheduledAmount(scheduledTransaction.amount);\n        return {\n          balance: (runningBalance += amount),\n          id: scheduledTransaction.id,\n        };\n      });\n    return groupById(scheduledBalances);\n  }, [showBalances, prependTransactions, runningBalance]);\n\n  const allTransactions = useMemo(() => {\n    // Don't prepend scheduled transactions if we are filtering\n    if (!filtered && prependTransactions.length > 0) {\n      return prependTransactions.concat(transactions);\n    }\n    return transactions;\n  }, [filtered, prependTransactions, transactions]);\n\n  const allBalances = useMemo(() => {\n    // Don't prepend scheduled transactions if we are filtering\n    if (!filtered && prependBalances && balances) {\n      return { ...prependBalances, ...balances };\n    }\n    return balances;\n  }, [filtered, prependBalances, balances]);\n\n  if (!prependTransactions) {\n    return children(transactions, balances);\n  }\n  return children(allTransactions, allBalances);\n}\n\nfunction getField(field) {\n  switch (field) {\n    case 'account':\n      return 'account.name';\n    case 'payee':\n      return 'payee.name';\n    case 'category':\n      return 'category.name';\n    case 'payment':\n      return 'amount';\n    case 'deposit':\n      return 'amount';\n    default:\n      return field;\n  }\n}\n\nclass AccountInternal extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.paged = null;\n    this.table = createRef();\n    this.animated = true;\n\n    this.state = {\n      search: '',\n      filterConditions: props.filterConditions || [],\n      filterId: [],\n      filterConditionsOp: 'and',\n      loading: true,\n      workingHard: false,\n      reconcileAmount: null,\n      transactions: [],\n      transactionsCount: 0,\n      showBalances: props.showBalances,\n      balances: null,\n      showCleared: props.showCleared,\n      showReconciled: props.showReconciled,\n      editingName: false,\n      isAdding: false,\n      latestDate: null,\n      sort: [],\n      filteredAmount: null,\n    };\n  }\n\n  async componentDidMount() {\n    const maybeRefetch = tables => {\n      if (\n        tables.includes('transactions') ||\n        tables.includes('category_mapping') ||\n        tables.includes('payee_mapping')\n      ) {\n        return this.refetchTransactions();\n      }\n    };\n\n    const onUndo = async ({ tables, messages }) => {\n      await maybeRefetch(tables);\n\n      // If all the messages are dealing with transactions, find the\n      // first message referencing a non-deleted row so that we can\n      // highlight the row\n      //\n      let focusId;\n      if (\n        messages.every(msg => msg.dataset === 'transactions') &&\n        !messages.find(msg => msg.column === 'tombstone')\n      ) {\n        const focusableMsgs = messages.filter(\n          msg =>\n            msg.dataset === 'transactions' && !(msg.column === 'tombstone'),\n        );\n\n        focusId = focusableMsgs.length === 1 ? focusableMsgs[0].row : null;\n\n        // Highlight the transactions\n        // this.table && this.table.highlight(focusableMsgs.map(msg => msg.row));\n      }\n\n      if (this.table.current) {\n        this.table.current.edit(null);\n\n        // Focus a transaction if applicable. There is a chance if the\n        // user navigated away that focusId is a transaction that has\n        // been \"paged off\" and we won't focus it. That's ok, we just\n        // do our best.\n        if (focusId) {\n          this.table.current.scrollTo(focusId);\n        }\n      }\n\n      this.props.setLastUndoState(null);\n    };\n\n    const unlistens = [listen('undo-event', onUndo)];\n\n    this.unlisten = () => {\n      unlistens.forEach(unlisten => unlisten());\n    };\n\n    // Important that any async work happens last so that the\n    // listeners are set up synchronously\n    await this.props.initiallyLoadPayees();\n    await this.fetchTransactions(this.state.filterConditions);\n\n    // If there is a pending undo, apply it immediately (this happens\n    // when an undo changes the location to this page)\n    if (this.props.lastUndoState && this.props.lastUndoState.current) {\n      onUndo(this.props.lastUndoState.current);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // If the active account changes - close the transaction entry mode\n    if (this.state.isAdding && this.props.accountId !== prevProps.accountId) {\n      this.setState({ isAdding: false });\n    }\n\n    // If the user was on a different screen and is now coming back to\n    // the transactions, automatically refresh the transaction to make\n    // sure we have updated state\n    if (prevProps.modalShowing && !this.props.modalShowing) {\n      // This is clearly a hack. Need a better way to track which\n      // things are listening to transactions and refetch\n      // automatically (use ActualQL?)\n      setTimeout(() => {\n        this.refetchTransactions();\n      }, 100);\n    }\n\n    //Resest sort/filter/search on account change\n    if (this.props.accountId !== prevProps.accountId) {\n      this.setState({ sort: [], search: '', filterConditions: [] });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unlisten) {\n      this.unlisten();\n    }\n    if (this.paged) {\n      this.paged.unsubscribe();\n    }\n  }\n\n  fetchAllIds = async () => {\n    const { data } = await runQuery(this.paged.getQuery().select('id'));\n    // Remember, this is the `grouped` split type so we need to deal\n    // with the `subtransactions` property\n    return data.reduce((arr, t) => {\n      arr.push(t.id);\n      t.subtransactions.forEach(sub => arr.push(sub.id));\n      return arr;\n    }, []);\n  };\n\n  refetchTransactions = async () => {\n    this.paged?.run();\n  };\n\n  fetchTransactions = filterConditions => {\n    const query = this.makeRootQuery();\n    this.rootQuery = this.currentQuery = query;\n    if (filterConditions) this.applyFilters(filterConditions);\n    else this.updateQuery(query);\n\n    if (this.props.accountId) {\n      this.props.markAccountRead(this.props.accountId);\n    }\n  };\n\n  makeRootQuery = () => {\n    const accountId = this.props.accountId;\n\n    return queries.makeTransactionsQuery(accountId);\n  };\n\n  updateQuery(query, isFiltered) {\n    if (this.paged) {\n      this.paged.unsubscribe();\n    }\n\n    // Filter out reconciled transactions if necessary.\n    if (!this.state.showReconciled) {\n      query = query.filter({ reconciled: { $eq: false } });\n    }\n\n    this.paged = pagedQuery(\n      query.select('*'),\n      async (data, prevData) => {\n        const firstLoad = prevData == null;\n\n        if (firstLoad) {\n          this.table.current?.setRowAnimation(false);\n\n          if (isFiltered) {\n            this.props.splitsExpandedDispatch({\n              type: 'set-mode',\n              mode: 'collapse',\n            });\n          } else {\n            this.props.splitsExpandedDispatch({\n              type: 'set-mode',\n              mode: this.props.expandSplits ? 'expand' : 'collapse',\n            });\n          }\n        }\n\n        this.setState(\n          {\n            transactions: data,\n            transactionCount: this.paged.getTotalCount(),\n            transactionsFiltered: isFiltered,\n            loading: false,\n            workingHard: false,\n            balances: this.state.showBalances\n              ? await this.calculateBalances()\n              : null,\n            filteredAmount: await this.getFilteredAmount(),\n          },\n          () => {\n            if (firstLoad) {\n              this.table.current?.scrollToTop();\n            }\n\n            setTimeout(() => {\n              this.table.current?.setRowAnimation(true);\n            }, 0);\n          },\n        );\n      },\n      {\n        pageCount: 150,\n        onlySync: true,\n        mapper: ungroupTransactions,\n      },\n    );\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.accountId !== nextProps.accountId) {\n      this.setState(\n        {\n          editingName: false,\n          loading: true,\n          search: '',\n          showBalances: nextProps.showBalances,\n          balances: null,\n          showCleared: nextProps.showCleared,\n          showReconciled: nextProps.showReconciled,\n          reconcileAmount: null,\n        },\n        () => {\n          this.fetchTransactions();\n        },\n      );\n    }\n  }\n\n  onSearch = value => {\n    this.paged.unsubscribe();\n    this.setState({ search: value }, this.onSearchDone);\n  };\n\n  onSearchDone = debounce(() => {\n    if (this.state.search === '') {\n      this.updateQuery(\n        this.currentQuery,\n        this.state.filterConditions.length > 0,\n      );\n    } else {\n      this.updateQuery(\n        queries.makeTransactionSearchQuery(\n          this.currentQuery,\n          this.state.search,\n          this.props.dateFormat,\n        ),\n        true,\n      );\n    }\n  }, 150);\n\n  onSync = async () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(acct => acct.id === accountId);\n\n    await this.props.syncAndDownload(account ? account.id : undefined);\n  };\n\n  onImport = async () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(acct => acct.id === accountId);\n    const categories = await this.props.getCategories();\n\n    if (account) {\n      const res = await window.Actual?.openFileDialog({\n        filters: [\n          {\n            name: 'Financial Files',\n            extensions: ['qif', 'ofx', 'qfx', 'csv', 'tsv', 'xml'],\n          },\n        ],\n      });\n\n      if (res) {\n        this.props.pushModal('import-transactions', {\n          accountId,\n          categories,\n          filename: res[0],\n          onImported: didChange => {\n            if (didChange) {\n              this.fetchTransactions();\n            }\n          },\n        });\n      }\n    }\n  };\n\n  onExport = async accountName => {\n    const exportedTransactions = await send('transactions-export-query', {\n      query: this.currentQuery.serialize(),\n    });\n    const normalizedName =\n      accountName && accountName.replace(/[()]/g, '').replace(/\\s+/g, '-');\n    const filename = `${normalizedName || 'transactions'}.csv`;\n\n    window.Actual?.saveFile(\n      exportedTransactions,\n      filename,\n      'Export Transactions',\n    );\n  };\n\n  onTransactionsChange = (newTransaction, data) => {\n    // Apply changes to pagedQuery data\n    this.paged.optimisticUpdate(\n      data => {\n        if (newTransaction._deleted) {\n          return data.filter(t => t.id !== newTransaction.id);\n        } else {\n          return data.map(t => {\n            return t.id === newTransaction.id ? newTransaction : t;\n          });\n        }\n      },\n      () => {\n        return data;\n      },\n    );\n\n    this.props.updateNewTransactions(newTransaction.id);\n  };\n\n  canCalculateBalance = () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(\n      account => account.id === accountId,\n    );\n    return (\n      account &&\n      this.state.search === '' &&\n      this.state.filterConditions.length === 0 &&\n      (this.state.sort.length === 0 ||\n        (this.state.sort.field === 'date' &&\n          this.state.sort.ascDesc === 'desc'))\n    );\n  };\n\n  async calculateBalances() {\n    if (!this.canCalculateBalance()) {\n      return null;\n    }\n\n    const { data } = await runQuery(\n      this.paged\n        .getQuery()\n        .options({ splits: 'none' })\n        .select([{ balance: { $sumOver: '$amount' } }]),\n    );\n\n    return groupById(data);\n  }\n\n  onAddTransaction = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onExposeName = flag => {\n    this.setState({ editingName: flag });\n  };\n\n  onSaveName = name => {\n    if (name.trim().length) {\n      const accountId = this.props.accountId;\n      const account = this.props.accounts.find(\n        account => account.id === accountId,\n      );\n      this.props.updateAccount({ ...account, name });\n      this.setState({ editingName: false });\n    }\n  };\n\n  onToggleExtraBalances = () => {\n    const { accountId, showExtraBalances } = this.props;\n    const key = 'show-extra-balances-' + accountId || 'all-accounts';\n\n    this.props.savePrefs({ [key]: !showExtraBalances });\n  };\n\n  onMenuSelect = async item => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(\n      account => account.id === accountId,\n    );\n\n    switch (item) {\n      case 'link':\n        this.props.pushModal('add-account', {\n          upgradingAccountId: accountId,\n        });\n        break;\n      case 'unlink':\n        this.props.pushModal('confirm-unlink-account', {\n          accountName: account.name,\n          onUnlink: () => {\n            this.props.unlinkAccount(accountId);\n          },\n        });\n        break;\n      case 'close':\n        this.props.openAccountCloseModal(accountId);\n        break;\n      case 'reopen':\n        this.props.reopenAccount(accountId);\n        break;\n      case 'export':\n        const accountName = this.getAccountTitle(account, accountId);\n        this.onExport(accountName);\n        break;\n      case 'toggle-balance':\n        if (this.state.showBalances) {\n          this.props.savePrefs({ ['show-balances-' + accountId]: false });\n          this.setState({ showBalances: false, balances: null });\n        } else {\n          this.props.savePrefs({ ['show-balances-' + accountId]: true });\n          this.setState(\n            {\n              transactions: [],\n              transactionCount: 0,\n              filterConditions: [],\n              search: '',\n              sort: [],\n              showBalances: true,\n            },\n            () => {\n              this.fetchTransactions();\n            },\n          );\n        }\n        break;\n      case 'remove-sorting': {\n        this.setState({ sort: [] }, () => {\n          const filterConditions = this.state.filterConditions;\n          if (filterConditions.length > 0) {\n            this.applyFilters([...filterConditions]);\n          } else {\n            this.fetchTransactions();\n          }\n          if (this.state.search !== '') {\n            this.onSearch(this.state.search);\n          }\n        });\n        break;\n      }\n      case 'toggle-cleared':\n        if (this.state.showCleared) {\n          this.props.savePrefs({ ['hide-cleared-' + accountId]: true });\n          this.setState({ showCleared: false });\n        } else {\n          this.props.savePrefs({ ['hide-cleared-' + accountId]: false });\n          this.setState({ showCleared: true });\n        }\n        break;\n      case 'toggle-reconciled':\n        if (this.state.showReconciled) {\n          this.props.savePrefs({ ['hide-reconciled-' + accountId]: true });\n          this.setState({ showReconciled: false }, () =>\n            this.fetchTransactions(this.state.filterConditions),\n          );\n        } else {\n          this.props.savePrefs({ ['hide-reconciled-' + accountId]: false });\n          this.setState({ showReconciled: true }, () =>\n            this.fetchTransactions(this.state.filterConditions),\n          );\n        }\n        break;\n      default:\n    }\n  };\n\n  getAccountTitle(account, id) {\n    const { filterName } = this.props.location.state || {};\n\n    if (filterName) {\n      return filterName;\n    }\n\n    if (!account) {\n      if (id === 'budgeted') {\n        return 'Budgeted Accounts';\n      } else if (id === 'offbudget') {\n        return 'Off Budget Accounts';\n      } else if (id === 'uncategorized') {\n        return 'Uncategorized';\n      } else if (!id) {\n        return 'All Accounts';\n      }\n      return null;\n    }\n\n    return account.name;\n  }\n\n  getBalanceQuery(account, id) {\n    return {\n      name: `balance-query-${id}`,\n      query: this.makeRootQuery().calculate({ $sum: '$amount' }),\n    };\n  }\n\n  getFilteredAmount = async () => {\n    const { data: amount } = await runQuery(\n      this.paged.getQuery().calculate({ $sum: '$amount' }),\n    );\n    return amount;\n  };\n\n  isNew = id => {\n    return this.props.newTransactions.includes(id);\n  };\n\n  isMatched = id => {\n    return this.props.matchedTransactions.includes(id);\n  };\n\n  onCreatePayee = name => {\n    const trimmed = name.trim();\n    if (trimmed !== '') {\n      return this.props.createPayee(name);\n    }\n    return null;\n  };\n\n  lockTransactions = async () => {\n    this.setState({ workingHard: true });\n\n    const { accountId } = this.props;\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ cleared: true, reconciled: false, account: accountId })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    let transactions = ungroupTransactions(data);\n\n    const changes = { updated: [] };\n\n    transactions.forEach(trans => {\n      const { diff } = updateTransaction(transactions, {\n        ...trans,\n        reconciled: true,\n      });\n\n      transactions = applyChanges(diff, transactions);\n\n      changes.updated = changes.updated\n        ? changes.updated.concat(diff.updated)\n        : diff.updated;\n    });\n\n    await send('transactions-batch-update', changes);\n    await this.refetchTransactions();\n  };\n\n  onReconcile = async balance => {\n    this.setState(({ showCleared }) => ({\n      reconcileAmount: balance,\n      showCleared: true,\n      prevShowCleared: showCleared,\n    }));\n  };\n\n  onDoneReconciling = async () => {\n    const { accountId } = this.props;\n    const { reconcileAmount } = this.state;\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ cleared: true, account: accountId })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    const transactions = ungroupTransactions(data);\n\n    let cleared = 0;\n\n    transactions.forEach(trans => {\n      if (!trans.is_parent) {\n        cleared += trans.amount;\n      }\n    });\n\n    const targetDiff = reconcileAmount - cleared;\n\n    if (targetDiff === 0) {\n      await this.lockTransactions();\n    }\n\n    this.setState({\n      reconcileAmount: null,\n      showCleared: this.state.prevShowCleared,\n    });\n  };\n\n  onCreateReconciliationTransaction = async diff => {\n    // Create a new reconciliation transaction\n    const reconciliationTransactions = realizeTempTransactions([\n      {\n        id: 'temp',\n        account: this.props.accountId,\n        cleared: true,\n        reconciled: false,\n        amount: diff,\n        date: currentDay(),\n        notes: 'Reconciliation balance adjustment',\n      },\n    ]);\n\n    // Optimistic UI: update the transaction list before sending the data to the database\n    this.setState({\n      transactions: [...reconciliationTransactions, ...this.state.transactions],\n    });\n\n    // sync the reconciliation transaction\n    await send('transactions-batch-update', {\n      added: reconciliationTransactions,\n    });\n    await this.refetchTransactions();\n  };\n\n  onShowTransactions = async ids => {\n    this.onApplyFilter({\n      customName: 'Selected transactions',\n      queryFilter: { id: { $oneof: ids } },\n    });\n  };\n\n  onBatchEdit = (name, ids) => {\n    this.props.onBatchEdit({\n      name,\n      ids,\n      onSuccess: updatedIds => {\n        this.refetchTransactions();\n\n        if (this.table.current) {\n          this.table.current.edit(updatedIds[0], 'select', false);\n        }\n      },\n    });\n  };\n\n  onBatchDuplicate = ids => {\n    this.props.onBatchDuplicate({ ids, onSuccess: this.refetchTransactions });\n  };\n\n  onBatchDelete = ids => {\n    this.props.onBatchDelete({ ids, onSuccess: this.refetchTransactions });\n  };\n\n  onMakeAsSplitTransaction = async ids => {\n    this.setState({ workingHard: true });\n\n    const { data: transactions } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'none' }),\n    );\n\n    if (!transactions || transactions.length === 0) {\n      return;\n    }\n\n    const [firstTransaction] = transactions;\n    const parentTransaction = {\n      id: uuidv4(),\n      is_parent: true,\n      cleared: transactions.every(t => !!t.cleared),\n      date: firstTransaction.date,\n      account: firstTransaction.account,\n      amount: transactions\n        .map(t => t.amount)\n        .reduce((total, amount) => total + amount, 0),\n    };\n    const childTransactions = transactions.map(t =>\n      makeChild(parentTransaction, t),\n    );\n\n    await send('transactions-batch-update', {\n      added: [parentTransaction],\n      updated: childTransactions,\n    });\n\n    this.refetchTransactions();\n  };\n\n  onMakeAsNonSplitTransactions = async ids => {\n    this.setState({ workingHard: true });\n\n    const { data: groupedTransactions } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n\n    let changes = {\n      updated: [],\n      deleted: [],\n    };\n\n    const groupedTransactionsToUpdate = groupedTransactions.filter(\n      t => t.is_parent,\n    );\n\n    for (const groupedTransaction of groupedTransactionsToUpdate) {\n      const transactions = ungroupTransaction(groupedTransaction);\n      const [parentTransaction, ...childTransactions] = transactions;\n\n      if (ids.includes(parentTransaction.id)) {\n        // Unsplit all child transactions.\n        const diff = makeAsNonChildTransactions(\n          childTransactions,\n          transactions,\n        );\n\n        changes = {\n          updated: [...changes.updated, ...diff.updated],\n          deleted: [...changes.deleted, ...diff.deleted],\n        };\n\n        // Already processed the child transactions above, no need to process them below.\n        continue;\n      }\n\n      // Unsplit selected child transactions.\n\n      const selectedChildTransactions = childTransactions.filter(t =>\n        ids.includes(t.id),\n      );\n\n      if (selectedChildTransactions.length === 0) {\n        continue;\n      }\n\n      const diff = makeAsNonChildTransactions(\n        selectedChildTransactions,\n        transactions,\n      );\n\n      changes = {\n        updated: [...changes.updated, ...diff.updated],\n        deleted: [...changes.deleted, ...diff.deleted],\n      };\n    }\n\n    await send('transactions-batch-update', changes);\n\n    this.refetchTransactions();\n\n    const transactionsToSelect = changes.updated.map(t => t.id);\n    this.dispatchSelected({\n      type: 'select-all',\n      ids: transactionsToSelect,\n    });\n  };\n\n  checkForReconciledTransactions = async (ids, confirmReason, onConfirm) => {\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids }, reconciled: true })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    const transactions = ungroupTransactions(data);\n    if (transactions.length > 0) {\n      this.props.pushModal('confirm-transaction-edit', {\n        onConfirm: () => {\n          onConfirm(ids);\n        },\n        confirmReason,\n      });\n    } else {\n      onConfirm(ids);\n    }\n  };\n\n  onBatchLinkSchedule = ids => {\n    this.props.onBatchLinkSchedule({\n      ids,\n      account: this.props.accounts.find(a => a.id === this.props.accountId),\n      onSuccess: this.refetchTransactions,\n    });\n  };\n\n  onBatchUnlinkSchedule = ids => {\n    this.props.onBatchUnlinkSchedule({\n      ids,\n      onSuccess: this.refetchTransactions,\n    });\n  };\n\n  onCreateRule = async ids => {\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n\n    const transactions = ungroupTransactions(data);\n    const ruleTransaction = transactions[0];\n    const childTransactions = transactions.filter(\n      t => t.parent_id === ruleTransaction.id,\n    );\n\n    const payeeCondition = ruleTransaction.imported_payee\n      ? {\n          field: 'imported_payee',\n          op: 'is',\n          value: ruleTransaction.imported_payee,\n          type: 'string',\n        }\n      : {\n          field: 'payee',\n          op: 'is',\n          value: ruleTransaction.payee,\n          type: 'id',\n        };\n    const amountCondition = {\n      field: 'amount',\n      op: 'isapprox',\n      value: ruleTransaction.amount,\n      type: 'number',\n    };\n\n    const rule = {\n      stage: null,\n      conditionsOp: 'and',\n      conditions: [payeeCondition, amountCondition],\n      actions: [\n        ...(childTransactions.length === 0\n          ? [\n              {\n                op: 'set',\n                field: 'category',\n                value: ruleTransaction.category,\n                type: 'id',\n                options: {\n                  splitIndex: 0,\n                },\n              },\n            ]\n          : []),\n        ...childTransactions.flatMap((sub, index) => [\n          {\n            op: 'set-split-amount',\n            value: sub.amount,\n            options: {\n              splitIndex: index + 1,\n              method: 'fixed-amount',\n            },\n          },\n          {\n            op: 'set',\n            field: 'category',\n            value: sub.category,\n            type: 'id',\n            options: {\n              splitIndex: index + 1,\n            },\n          },\n        ]),\n      ],\n    };\n\n    this.props.pushModal('edit-rule', { rule });\n  };\n\n  onSetTransfer = async ids => {\n    const onConfirmTransfer = async ids => {\n      this.setState({ workingHard: true });\n\n      const payees = await this.props.getPayees();\n      const { data: transactions } = await runQuery(\n        q('transactions')\n          .filter({ id: { $oneof: ids } })\n          .select('*'),\n      );\n      const [fromTrans, toTrans] = transactions;\n\n      if (transactions.length === 2 && validForTransfer(fromTrans, toTrans)) {\n        const fromPayee = payees.find(\n          p => p.transfer_acct === fromTrans.account,\n        );\n        const toPayee = payees.find(p => p.transfer_acct === toTrans.account);\n\n        const changes = {\n          updated: [\n            {\n              ...fromTrans,\n              payee: toPayee.id,\n              transfer_id: toTrans.id,\n            },\n            {\n              ...toTrans,\n              payee: fromPayee.id,\n              transfer_id: fromTrans.id,\n            },\n          ],\n        };\n\n        await send('transactions-batch-update', changes);\n      }\n\n      await this.refetchTransactions();\n    };\n\n    await this.checkForReconciledTransactions(\n      ids,\n      'batchEditWithReconciled',\n      onConfirmTransfer,\n    );\n  };\n\n  onConditionsOpChange = value => {\n    this.setState({ filterConditionsOp: value });\n    this.setState({ filterId: { ...this.state.filterId, status: 'changed' } });\n    this.applyFilters([...this.state.filterConditions]);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onReloadSavedFilter = (savedFilter, item) => {\n    if (item === 'reload') {\n      const [savedFilter] = this.props.savedFilters.filter(\n        f => f.id === this.state.filterId.id,\n      );\n      this.setState({ filterConditionsOp: savedFilter.conditionsOp });\n      this.applyFilters([...savedFilter.conditions]);\n    } else {\n      if (savedFilter.status) {\n        this.setState({ filterConditionsOp: savedFilter.conditionsOp });\n        this.applyFilters([...savedFilter.conditions]);\n      }\n    }\n    this.setState({ filterId: { ...this.state.filterId, ...savedFilter } });\n  };\n\n  onClearFilters = () => {\n    this.setState({ filterConditionsOp: 'and' });\n    this.setState({ filterId: [] });\n    this.applyFilters([]);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onUpdateFilter = (oldCondition, updatedCondition) => {\n    this.applyFilters(\n      this.state.filterConditions.map(c =>\n        c === oldCondition ? updatedCondition : c,\n      ),\n    );\n    this.setState({\n      filterId: {\n        ...this.state.filterId,\n        status: this.state.filterId && 'changed',\n      },\n    });\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onDeleteFilter = condition => {\n    this.applyFilters(this.state.filterConditions.filter(c => c !== condition));\n    if (this.state.filterConditions.length === 1) {\n      this.setState({ filterId: [] });\n      this.setState({ filterConditionsOp: 'and' });\n    } else {\n      this.setState({\n        filterId: {\n          ...this.state.filterId,\n          status: this.state.filterId && 'changed',\n        },\n      });\n    }\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onApplyFilter = async conditionOrSavedFilter => {\n    let filterConditions = this.state.filterConditions;\n    if (conditionOrSavedFilter.customName) {\n      filterConditions = filterConditions.filter(\n        c => c.customName !== conditionOrSavedFilter.customName,\n      );\n    }\n    if (conditionOrSavedFilter.conditions) {\n      // A saved filter was passed in.\n      const savedFilter = conditionOrSavedFilter;\n      this.setState({\n        filterId: { ...savedFilter, status: 'saved' },\n      });\n      this.setState({ filterConditionsOp: savedFilter.conditionsOp });\n      this.applyFilters([...savedFilter.conditions]);\n    } else {\n      // A condition was passed in.\n      const condition = conditionOrSavedFilter;\n      this.setState({\n        filterId: {\n          ...this.state.filterId,\n          status: this.state.filterId && 'changed',\n        },\n      });\n      this.applyFilters([...filterConditions, condition]);\n    }\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onScheduleAction = async (name, ids) => {\n    switch (name) {\n      case 'post-transaction':\n        for (const id of ids) {\n          const parts = id.split('/');\n          await send('schedule/post-transaction', { id: parts[1] });\n        }\n        this.refetchTransactions();\n        break;\n      case 'skip':\n        for (const id of ids) {\n          const parts = id.split('/');\n          await send('schedule/skip-next-date', { id: parts[1] });\n        }\n        break;\n      default:\n    }\n  };\n\n  applyFilters = async conditions => {\n    if (conditions.length > 0) {\n      const customQueryFilters = conditions\n        .filter(cond => !!cond.customName)\n        .map(f => f.queryFilter);\n      const { filters: queryFilters } = await send(\n        'make-filters-from-conditions',\n        {\n          conditions: conditions.filter(cond => !cond.customName),\n        },\n      );\n      const conditionsOpKey =\n        this.state.filterConditionsOp === 'or' ? '$or' : '$and';\n      this.currentQuery = this.rootQuery.filter({\n        [conditionsOpKey]: [...queryFilters, ...customQueryFilters],\n      });\n\n      this.setState(\n        {\n          filterConditions: conditions,\n        },\n        () => {\n          this.updateQuery(this.currentQuery, true);\n        },\n      );\n    } else {\n      this.setState(\n        {\n          transactions: [],\n          transactionCount: 0,\n          filterConditions: conditions,\n        },\n        () => {\n          this.fetchTransactions();\n        },\n      );\n    }\n\n    if (this.state.sort.length !== 0) {\n      this.applySort();\n    }\n  };\n\n  applySort = (field, ascDesc, prevField, prevAscDesc) => {\n    const filterConditions = this.state.filterConditions;\n    const isFiltered = filterConditions.length > 0;\n    const sortField = getField(!field ? this.state.sort.field : field);\n    const sortAscDesc = !ascDesc ? this.state.sort.ascDesc : ascDesc;\n    const sortPrevField = getField(\n      !prevField ? this.state.sort.prevField : prevField,\n    );\n    const sortPrevAscDesc = !prevField\n      ? this.state.sort.prevAscDesc\n      : prevAscDesc;\n\n    const sortCurrentQuery = function (that, sortField, sortAscDesc) {\n      if (sortField === 'cleared') {\n        that.currentQuery = that.currentQuery.orderBy({\n          reconciled: sortAscDesc,\n        });\n      }\n\n      that.currentQuery = that.currentQuery.orderBy({\n        [sortField]: sortAscDesc,\n      });\n    };\n\n    const sortRootQuery = function (that, sortField, sortAscDesc) {\n      if (sortField === 'cleared') {\n        that.currentQuery = that.rootQuery.orderBy({\n          reconciled: sortAscDesc,\n        });\n        that.currentQuery = that.currentQuery.orderBy({\n          cleared: sortAscDesc,\n        });\n      } else {\n        that.currentQuery = that.rootQuery.orderBy({\n          [sortField]: sortAscDesc,\n        });\n      }\n    };\n\n    // sort by previously used sort field, if any\n    const maybeSortByPreviousField = function (\n      that,\n      sortPrevField,\n      sortPrevAscDesc,\n    ) {\n      if (!sortPrevField) {\n        return;\n      }\n\n      if (sortPrevField === 'cleared') {\n        that.currentQuery = that.currentQuery.orderBy({\n          reconciled: sortPrevAscDesc,\n        });\n      }\n\n      that.currentQuery = that.currentQuery.orderBy({\n        [sortPrevField]: sortPrevAscDesc,\n      });\n    };\n\n    switch (true) {\n      // called by applyFilters to sort an already filtered result\n      case !field:\n        sortCurrentQuery(this, sortField, sortAscDesc);\n        break;\n\n      // called directly from UI by sorting a column.\n      // active filters need to be applied before sorting\n      case isFiltered:\n        this.applyFilters([...filterConditions]);\n        sortCurrentQuery(this, sortField, sortAscDesc);\n        break;\n\n      // called directly from UI by sorting a column.\n      // no active filters, start a new root query.\n      case !isFiltered:\n        sortRootQuery(this, sortField, sortAscDesc);\n        break;\n\n      default:\n    }\n\n    maybeSortByPreviousField(this, sortPrevField, sortPrevAscDesc);\n    this.updateQuery(this.currentQuery, isFiltered);\n  };\n\n  onSort = (headerClicked, ascDesc) => {\n    let prevField;\n    let prevAscDesc;\n    //if staying on same column but switching asc/desc\n    //then keep prev the same\n    if (headerClicked === this.state.sort.field) {\n      prevField = this.state.sort.prevField;\n      prevAscDesc = this.state.sort.prevAscDesc;\n      this.setState({\n        sort: {\n          ...this.state.sort,\n          ascDesc,\n        },\n      });\n    } else {\n      //if switching to new column then capture state\n      //of current sort column as prev\n      prevField = this.state.sort.field;\n      prevAscDesc = this.state.sort.ascDesc;\n      this.setState({\n        sort: {\n          field: headerClicked,\n          ascDesc,\n          prevField: this.state.sort.field,\n          prevAscDesc: this.state.sort.ascDesc,\n        },\n      });\n    }\n\n    this.applySort(headerClicked, ascDesc, prevField, prevAscDesc);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  render() {\n    const {\n      accounts,\n      categoryGroups,\n      payees,\n      dateFormat,\n      hideFraction,\n      addNotification,\n      accountsSyncing,\n      failedAccounts,\n      replaceModal,\n      showExtraBalances,\n      accountId,\n      categoryId,\n    } = this.props;\n    const {\n      transactions,\n      loading,\n      workingHard,\n      filterId,\n      reconcileAmount,\n      transactionsFiltered,\n      editingName,\n      showBalances,\n      balances,\n      showCleared,\n      showReconciled,\n      filteredAmount,\n    } = this.state;\n\n    const account = accounts.find(account => account.id === accountId);\n    const accountName = this.getAccountTitle(account, accountId);\n\n    if (!accountName && !loading) {\n      // This is probably an account that was deleted, so redirect to\n      // all accounts\n      return <Navigate to=\"/accounts\" replace />;\n    }\n\n    const category = categoryGroups\n      .flatMap(g => g.categories)\n      .find(category => category.id === categoryId);\n\n    const showEmptyMessage = !loading && !accountId && accounts.length === 0;\n\n    const isNameEditable =\n      accountId &&\n      accountId !== 'budgeted' &&\n      accountId !== 'offbudget' &&\n      accountId !== 'uncategorized';\n\n    const balanceQuery = this.getBalanceQuery(account, accountId);\n\n    return (\n      <AllTransactions\n        account={account}\n        transactions={transactions}\n        balances={balances}\n        showBalances={showBalances}\n        filtered={transactionsFiltered}\n        collapseTransactions={ids =>\n          this.props.splitsExpandedDispatch({ type: 'close-splits', ids })\n        }\n      >\n        {(allTransactions, allBalances) => (\n          <SelectedProviderWithItems\n            name=\"transactions\"\n            items={allTransactions}\n            fetchAllIds={this.fetchAllIds}\n            registerDispatch={dispatch => (this.dispatchSelected = dispatch)}\n            selectAllFilter={item => !item._unmatched && !item.is_parent}\n          >\n            <View style={styles.page}>\n              <AccountHeader\n                tableRef={this.table}\n                editingName={editingName}\n                isNameEditable={isNameEditable}\n                workingHard={workingHard}\n                account={account}\n                filterId={filterId}\n                savedFilters={this.props.savedFilters}\n                location={this.props.location}\n                accountName={accountName}\n                accountsSyncing={accountsSyncing}\n                failedAccounts={failedAccounts}\n                accounts={accounts}\n                transactions={transactions}\n                showBalances={showBalances}\n                showExtraBalances={showExtraBalances}\n                showCleared={showCleared}\n                showReconciled={showReconciled}\n                showEmptyMessage={showEmptyMessage}\n                balanceQuery={balanceQuery}\n                canCalculateBalance={this.canCalculateBalance}\n                filteredAmount={filteredAmount}\n                isFiltered={transactionsFiltered}\n                isSorted={this.state.sort.length !== 0}\n                reconcileAmount={reconcileAmount}\n                search={this.state.search}\n                filterConditions={this.state.filterConditions}\n                filterConditionsOp={this.state.filterConditionsOp}\n                savePrefs={this.props.savePrefs}\n                pushModal={this.props.pushModal}\n                onSearch={this.onSearch}\n                onShowTransactions={this.onShowTransactions}\n                onMenuSelect={this.onMenuSelect}\n                onAddTransaction={this.onAddTransaction}\n                onToggleExtraBalances={this.onToggleExtraBalances}\n                onSaveName={this.onSaveName}\n                onExposeName={this.onExposeName}\n                onReconcile={this.onReconcile}\n                onDoneReconciling={this.onDoneReconciling}\n                onCreateReconciliationTransaction={\n                  this.onCreateReconciliationTransaction\n                }\n                onSync={this.onSync}\n                onImport={this.onImport}\n                onBatchDelete={this.onBatchDelete}\n                onBatchDuplicate={this.onBatchDuplicate}\n                onBatchEdit={this.onBatchEdit}\n                onBatchLinkSchedule={this.onBatchLinkSchedule}\n                onBatchUnlinkSchedule={this.onBatchUnlinkSchedule}\n                onCreateRule={this.onCreateRule}\n                onUpdateFilter={this.onUpdateFilter}\n                onClearFilters={this.onClearFilters}\n                onReloadSavedFilter={this.onReloadSavedFilter}\n                onConditionsOpChange={this.onConditionsOpChange}\n                onDeleteFilter={this.onDeleteFilter}\n                onApplyFilter={this.onApplyFilter}\n                onScheduleAction={this.onScheduleAction}\n                onSetTransfer={this.onSetTransfer}\n                onMakeAsSplitTransaction={this.onMakeAsSplitTransaction}\n                onMakeAsNonSplitTransactions={this.onMakeAsNonSplitTransactions}\n              />\n\n              <View style={{ flex: 1 }}>\n                <TransactionList\n                  tableRef={this.table}\n                  account={account}\n                  transactions={transactions}\n                  allTransactions={allTransactions}\n                  animated={this.animated}\n                  loadMoreTransactions={() =>\n                    this.paged && this.paged.fetchNext()\n                  }\n                  accounts={accounts}\n                  category={category}\n                  categoryGroups={categoryGroups}\n                  payees={payees}\n                  balances={allBalances}\n                  showBalances={!!allBalances}\n                  showCleared={showCleared}\n                  showAccount={\n                    !accountId ||\n                    accountId === 'offbudget' ||\n                    accountId === 'budgeted' ||\n                    accountId === 'uncategorized'\n                  }\n                  isAdding={this.state.isAdding}\n                  isNew={this.isNew}\n                  isMatched={this.isMatched}\n                  isFiltered={transactionsFiltered}\n                  dateFormat={dateFormat}\n                  hideFraction={hideFraction}\n                  addNotification={addNotification}\n                  renderEmpty={() =>\n                    showEmptyMessage ? (\n                      <EmptyMessage onAdd={() => replaceModal('add-account')} />\n                    ) : !loading ? (\n                      <View\n                        style={{\n                          color: theme.tableText,\n                          marginTop: 20,\n                          textAlign: 'center',\n                          fontStyle: 'italic',\n                        }}\n                      >\n                        No transactions\n                      </View>\n                    ) : null\n                  }\n                  onSort={this.onSort}\n                  sortField={this.state.sort.field}\n                  ascDesc={this.state.sort.ascDesc}\n                  onChange={this.onTransactionsChange}\n                  onRefetch={this.refetchTransactions}\n                  onRefetchUpToRow={row =>\n                    this.paged.refetchUpToRow(row, {\n                      field: 'date',\n                      order: 'desc',\n                    })\n                  }\n                  onCloseAddTransaction={() =>\n                    this.setState({ isAdding: false })\n                  }\n                  onCreatePayee={this.onCreatePayee}\n                  onApplyFilter={this.onApplyFilter}\n                />\n              </View>\n            </View>\n          </SelectedProviderWithItems>\n        )}\n      </AllTransactions>\n    );\n  }\n}\n\nfunction AccountHack(props) {\n  const { dispatch: splitsExpandedDispatch } = useSplitsExpanded();\n  const {\n    onBatchEdit,\n    onBatchDuplicate,\n    onBatchLinkSchedule,\n    onBatchUnlinkSchedule,\n    onBatchDelete,\n  } = useTransactionBatchActions();\n\n  return (\n    <AccountInternal\n      splitsExpandedDispatch={splitsExpandedDispatch}\n      onBatchEdit={onBatchEdit}\n      onBatchDuplicate={onBatchDuplicate}\n      onBatchLinkSchedule={onBatchLinkSchedule}\n      onBatchUnlinkSchedule={onBatchUnlinkSchedule}\n      onBatchDelete={onBatchDelete}\n      {...props}\n    />\n  );\n}\n\nexport function Account() {\n  const params = useParams();\n  const location = useLocation();\n\n  const { grouped: categoryGroups } = useCategories();\n  const newTransactions = useSelector(state => state.queries.newTransactions);\n  const matchedTransactions = useSelector(\n    state => state.queries.matchedTransactions,\n  );\n  const accounts = useAccounts();\n  const payees = usePayees();\n  const failedAccounts = useFailedAccounts();\n  const dateFormat = useDateFormat() || 'MM/dd/yyyy';\n  const [hideFraction = false] = useSyncedPref('hideFraction');\n  const [expandSplits] = useSyncedPref('expand-splits');\n  const [showBalances] = useSyncedPref(`show-balances-${params.id}`);\n  const [hideCleared] = useSyncedPref(`hide-cleared-${params.id}`);\n  const [hideReconciled] = useSyncedPref(`hide-reconciled-${params.id}`);\n  const [showExtraBalances] = useSyncedPref(\n    `show-extra-balances-${params.id || 'all-accounts'}`,\n  );\n  const modalShowing = useSelector(state => state.modals.modalStack.length > 0);\n  const accountsSyncing = useSelector(state => state.account.accountsSyncing);\n  const lastUndoState = useSelector(state => state.app.lastUndoState);\n  const filterConditions = location?.state?.filterConditions || [];\n\n  const savedFiters = useFilters();\n  const actionCreators = useActions();\n\n  const transform = useDefaultSchedulesQueryTransform(params.id);\n\n  return (\n    <SchedulesProvider transform={transform}>\n      <SplitsExpandedProvider\n        initialMode={expandSplits ? 'collapse' : 'expand'}\n      >\n        <AccountHack\n          newTransactions={newTransactions}\n          matchedTransactions={matchedTransactions}\n          accounts={accounts}\n          failedAccounts={failedAccounts}\n          dateFormat={dateFormat}\n          hideFraction={hideFraction}\n          expandSplits={expandSplits}\n          showBalances={showBalances}\n          showCleared={!hideCleared}\n          showReconciled={!hideReconciled}\n          showExtraBalances={showExtraBalances}\n          payees={payees}\n          modalShowing={modalShowing}\n          accountsSyncing={accountsSyncing}\n          lastUndoState={lastUndoState}\n          filterConditions={filterConditions}\n          categoryGroups={categoryGroups}\n          {...actionCreators}\n          accountId={params.id}\n          categoryId={location?.state?.categoryId}\n          location={location}\n          savedFilters={savedFiters}\n        />\n      </SplitsExpandedProvider>\n    </SchedulesProvider>\n  );\n}\n"],"names":["SvgLeftArrow2","props","_jsx","svg","xmlns","viewBox","style","color","path","fill","d","SvgArrowDown","SvgArrowUp","SvgArrowButtonRight1","_jsxs","SvgArrowsExpand3","SvgArrowsShrink3","SvgDownloadThickBottom","SvgHyperlink2","SvgPencil1","MonthPicker","startMonth","numDisplayed","monthBounds","onSelect","hoverId","setHoverId","useState","targetMonthCount","setTargetMonthCount","currentMonth","monthUtils","firstSelectedMonth","lastSelectedMonth","range","firstSelectedIndex","Math","floor","length","lastSelectedIndex","size","setSize","containerRef","useResizeObserver","rect","width","min","max","yearHeadersShown","View","flexDirection","alignItems","justifyContent","innerRef","flex","map","month","idx","monthName","selected","lastHoverId","hovered","current","year","showYearHeader","includes","push","isMonthBudgeted","start","end","padding","textAlign","userSelect","cursor","borderRadius","border","textDecoration","theme","pageTextSubdued","styles","smallText","backgroundColor","tableBorderHover","buttonPrimaryText","filter","buttonBareBackgroundHover","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","fontWeight","onClick","onMouseEnter","onMouseLeave","position","top","left","fontSize","pageText","BudgetPageHeader","onMonthSelect","numMonths","marginLeft","flexShrink","marginRight","getScrollbarWidth","paddingTop","displayName","RenderMonths","component","Component","editingMonth","args","months","useContext","MonthsContext","index","editing","NamespaceContext","Provider","value","borderLeft","tableBorder","SidebarCategory","category","categoryGroup","dragPreview","dragging","isLast","onEditName","onSave","onDelete","onHideNewCategory","temporary","id","menuOpen","setMenuOpen","triggerRef","useRef","displayed","WebkitUserSelect","opacity","hidden","undefined","div","data-testid","textOverflow","whiteSpace","overflow","minWidth","name","ref","Button","variant","className","onPress","SvgCheveronDown","height","Popover","placement","isOpen","onOpenChange","Menu","onMenuSelect","type","items","text","NotesButton","defaultColor","pageTextLight","display","formInputTextPlaceholderSelected","tableBackground","zIndex","onKeyDown","e","key","stopPropagation","InputCell","formatter","exposed","onUpdate","onBlur","paddingLeft","borderBottomWidth","inputProps","placeholder","ExpenseCategory","cat","editingCell","dragState","MonthComponent","onEditMonth","onBudgetAction","onShowActivity","onDragChange","onReorder","item","cat_group","dragRef","useDraggable","canDrag","dropRef","dropPos","useDroppable","types","onDrop","Row","collapsed","DropHighlight","pos","offset","preview","cell","onEdit","SidebarGroup","group","onShowNewCategory","onHideNewGroup","onToggleCollapse","SvgExpandArrow","transition","transform","Text","_Fragment","is_income","tableRowHeaderBackground","ExpenseGroup","onReorderGroup","onReorderCategory","catDropRef","catDropPos","onLongHover","right","ROW_HEIGHT","categories","IncomeCategory","IncomeGroup","IncomeHeader","onShowNewGroup","margin","BudgetCategories","memo","categoryGroups","dataComponents","onSaveCategory","onSaveGroup","onDeleteCategory","onDeleteGroup","collapsedGroupIds","setCollapsedGroupIdsPref","useLocalPref","showHiddenCategories","onCollapse","isAddingGroup","setIsAddingGroup","newCategoryForGroup","setNewCategoryForGroup","useMemo","expenseGroups","incomeGroup","separateGroups","Array","prototype","concat","apply","groupCategories","x","setDragState","savedCollapsed","setSavedCollapsed","newDragState","state","hoveredId","hoveredPos","id_","_onSaveGroup","groupId","c","_onSaveCategory","marginBottom","boxShadow","cardShadow","content","find","g","ExpenseGroupComponent","ExpenseCategoryComponent","incomeHeaderHeight","IncomeHeaderComponent","IncomeGroupComponent","IncomeCategoryComponent","Error","DropHighlightPosContext","BudgetSummaries","SummaryComponent","widthState","setWidthState","spring","useSpring","config","mass","tension","friction","useCallback","prevMonth0","allMonths","unshift","subMonths","addMonths","monthWidth","useLayoutEffect","prevMonth","reversed","offsetX","from","to","css","animated","willChange","paddingRight","BudgetTotals","toggleHiddenCategories","expandAllCategories","collapseAllCategories","borderBottom","flexGrow","aria-label","SvgDotsHorizontalTriple","BudgetTable","prewarmStartMonth","grouped","useCategories","setShowHiddenCategoriesPef","setEditing","_onReorderCategory","targetId","findSortUp","targetGroup","findSortDown","_onReorderGroup","moveVertically","dir","flattened","reduce","all","isGroup","nextIdx","findIndex","next","preventDefault","shiftKey","collapsedIds","onToggleHiddenCategories","lightScrollbar","tableHeaderBackground","MonthsProvider","BudgetTotalsComponent","overflowY","overflowAnchor","getNumPossibleMonths","estimatedTableWidth","DynamicBudgetTableInner","maxMonths","setDisplayMax","useBudgetMonthCount","numPossible","maxWidth","useEffect","getValidMonth","_onMonthSelect","useHotkeys","scopes","DynamicBudgetTable","AutoSizer","BudgetInner","spreadsheet","useSpreadsheet","dispatch","useDispatch","navigate","useNavigate","summaryCollapsed","setSummaryCollapsedPref","startMonthPref","setStartMonthPref","bounds","setBounds","budgetType","useSyncedPref","maxMonthsPref","useGlobalPref","initialized","setInitialized","loadCategories","getCategories","run","send","prewarmAllMonths","unlistens","listen","tables","forEach","unlisten","then","accountId","warmingMonth","prewarmMonth","categoryNameAlreadyExistsNotification","addNotification","message","toUpperCase","createCategory","updateCategory","mustTransfer","pushModal","transferCategory","deleteCategory","createGroup","updateGroup","deleteGroup","applyBudgetAction","categoryId","goBack","filterConditions","field","op","options","sortInfo","cats","moveCandidate","list","moveCategory","moveCategoryGroup","reportComponents","rolloverComponents","table","ReportProvider","onToggleSummaryCollapse","RolloverProvider","RolloverBudgetSummary","rollover","Budget","report","IncomeHeaderMonth","page","Schedules","useActions","setFilter","scheduleData","useSchedules","schedules","statuses","onAdd","onDiscover","onAction","schedule","completed","resetNextDate","Page","header","Search","onChange","SchedulesTable","allowCompleted","GoCardlessLink","window","close","Modal","isCurrent","title","Paragraph","validForTransfer","fromTransaction","toTransaction","every","tran","transfer_id","is_child","account","amount","SplitsExpandedContext","useSplitsExpanded","data","expanded","mode","ids","has","SplitsExpandedProvider","children","initialMode","cachedState","useSelector","app","lastSplitState","reduxDispatch","useReducer","action","Set","delete","add","transitionId","setTimeout","splitState","getDisplayValue","obj","serializeTransaction","transaction","showZeroInDeposit","date","isPreviewId","_inverse","getScheduledAmount","debit","credit","isDateValid","parseISO","integerToCurrency","deserializeTransaction","originalTransaction","originalDate","realTransaction","parsed","evalArithmetic","amountToInteger","currentDay","isLastChild","transactions","trans","parent_id","selectAscDesc","ascDesc","clicked","defaultAscDesc","TransactionHeader","hasSelected","showAccount","showCategory","showBalance","showCleared","scrollWidth","onSort","dispatchSelected","useSelectedDispatch","event","tableHeaderText","borderTopWidth","borderColor","SelectCell","focused","isRangeSelect","HeaderCell","icon","getPayeePretty","payee","transferAcct","numHiddenPayees","formatPayeeName","payeeName","payeeId","startsWith","slice","StatusCell","status","isChild","isPreview","isClearedField","statusProps","getStatusProps","statusColor","noticeTextLight","errorText","warningText","pageTextLinkLight","Cell","plain","CellButton","formInputBorderSelected","visibility","disabled","Icon","marginTop","CustomCell","unexposedContent","cellValue","UnexposedCellContent","useParentPayee","payees","subtransactions","transferAccountsByTransaction","counts","mostCommonPayeeTransaction","result","sub","maxCount","mostCommonPayee","getPayeesById","numDistinctPayees","Object","keys","PayeeCell","accounts","valueStyle","importedPayee","onCreatePayee","onManagePayees","onNavigateToTransferAccount","onNavigateToSchedule","isCreatingPayee","parentPayee","transferAccount","is_parent","bare","alignSelf","buttonNormalBorder","PayeeIcons","SvgSplit","fontStyle","Tooltip","tooltip","triggerProps","delay","onExpose","shouldSaveFromKey","inputStyle","PayeeAutocomplete","showManagePayees","clearOnBlur","menuPortalTarget","scheduleId","useCachedSchedules","s","buttonStyle","scheduleIconStyle","transferIconStyle","recurring","_date","frequency","SvgArrowsSynchronize","SvgCalendar","isTemporaryId","SvgRightArrow2","Transaction","allTransactions","highlighted","added","matched","focusedField","balance","dateFormat","hideFraction","onSplit","onToggleSplit","onNotesTagClick","splitError","listContainerRef","prevShowZero","setPrevShowZero","prevTransaction","setPrevTransaction","setTransaction","showReconciliationWarning","setShowReconciliationWarning","reconciled","onCancel","onConfirm","onUpdateAfterConfirm","confirmReason","newTransaction","note","getAccountsById","offbudget","deserialized","deserializedName","imported_payee","notes","cleared","isParent","_unmatched","transfer_acct","isBudgetTransfer","isOffBudget","backgroundFocus","amountStyle","letterSpacing","runningBalance","updateId","setUpdateId","tableRowBackgroundHighlight","tableRowBackgroundHover","tableRowBackgroundHighlightText","tableText","tableTextInactive","arrowSize","isNonModal","maxHeight","shouldFlip","UNSTABLE_portalContainer","Field","DeleteCell","borderLeftWidth","lineHeight","buttonProps","formatDate","DateSelect","acctId","acct","AccountAutocomplete","includeClosedAccounts","notesTagFormatter","bind","formLabelText","upcomingText","errorBackground","warningBackground","formLabelBackground","upcomingBackground","titleFirst","readOnly","getCategoriesById","formInputTextHighlight","CategoryAutocomplete","showSplitOption","tnum","privacyFilter","activationFilters","TransactionError","error","isDeposit","onAddSplit","onDistributeRemainder","canDistributeRemainder","version","difference","isDisabled","makeTemporaryTransactions","currentAccountId","currentCategoryId","lastDate","NewTransaction","editingTransaction","onClose","childTransactions","t","emptyChildTransactions","paddingBottom","isNew","TransactionTableInner","tableNavigator","tableRef","newNavigator","renderEmpty","onScroll","createRef","isAddingPrev","usePrevious","isAdding","setScrollWidth","saveScrollWidth","parent","child","onCloseAddTransaction","noteTag","renderRow","selectedItems","showBalances","balances","isMatched","isExpanded","transactionMap","get","isChildDeposit","hasSplitError","transactionsByParent","sortField","getNavigatorProps","onCheckNewEnter","newTransactions","editingId","onAddTemporary","Table","navigator","renderItem","loadMore","loadMoreTransactions","isSelected","onCheckEnter","TransactionTable","forwardRef","setNewTransactions","prevIsAdding","setPrevIsAdding","splitsExpanded","prevSplitsExpanded","mergedRef","useMergedRefs","transactionsWithExpandedSplits","anchor","setRowAnimation","Map","acc","fromEntries","isAnchored","unanchor","useTableNavigator","getFields","shouldAdd","latestState","savePending","afterSaveFunc","_","forceRerender","useSelectedItems","fields","f","afterSave","func","metaKey","getLastTransaction","lastTransaction","isSplit","updatedFieldName","groupedTransaction","groupTransaction","onApplyRules","newTrans","ungroupTransactions","updateTransaction","deleteTransaction","diff","splitTransaction","newId","addSplitTransaction","targetTransactions","parentTransaction","siblingTransactions","emptyTransactions","remainingAmount","amountPerTransaction","remainingCents","amounts","amountIndex","transactionIndex","words","split","word","i","arr","separator","lastEmptyTag","tag","ti","validTag","span","isHovered","noteTagBackground","noteTagText","noteTagBackgroundHover","saveDiff","remoteUpdates","learnCategories","updates","saveDiffAndApply","changes","remoteDiff","applyTransactionDiff","applyChanges","TransactionList","headerContent","isFiltered","onRefetch","onApplyFilter","transactionsLatest","realizeTempTransactions","updated","sort_order","Date","now","afterRules","getChangedValues","st","selectedPayee","FilterMenu","filterId","onFilterMenuSelect","useTranslation","line","NameFilter","menuItem","setName","adding","onAddUpdate","err","inputRef","focus","form","Stack","direction","justify","align","FormField","FormLabel","htmlFor","Input","defaultValue","onChangeValue","SavedFilterMenuButton","conditions","conditionsOp","onClearFilters","onReloadSavedFilter","savedFilters","nameOpen","setNameOpen","setAdding","setErr","setMenuItem","savedFilter","response","sendCatch","filters","newSavedFilter","updatedFilter","Trans","FiltersStack","onUpdateFilter","onDeleteFilter","onConditionsOpChange","spacing","AppliedFilters","SelectedTransactionsButton","getTransaction","onShow","onDuplicate","onLinkSchedule","onUnlinkSchedule","onCreateRule","onSetTransfer","onScheduleAction","showMakeTransfer","onMakeAsSplitTransaction","onMakeAsNonSplitTransactions","selectedIds","ambiguousDuplication","some","tx","linked","canBeTransfer","fromTrans","toTrans","canMakeAsSplitTransaction","firstTransaction","areAllSameDateAndAccount","areNoSplitTransactions","areNoReconciledTransactions","canUnsplitTransactions","areAllSplitTransactions","onViewSchedule","firstId","hotKeyOptions","enabled","SelectedItemsButton","count","label","DetailedBalance","isExactBalance","format","useFormat","pillText","pillBackground","PrivacyFilter","SelectedBalance","join","rows","useSheetValue","query","q","$oneof","select","r","finalIds","splits","calculate","$sum","scheduleBalance","previewIds","_amountOp","_account","_amount","FilteredBalance","filteredAmount","MoreBalances","balanceQuery","uncleared","Balances","showExtraBalances","onToggleExtraBalances","buttonRef","isButtonHovered","useHover","CellValue","binding","getStyle","blurIntensity","ReconcilingMessage","targetBalance","onDone","onCreateTransaction","targetDiff","shadow","SvgCheckCircle1","strong","br","autoFocus","ReconcileMenu","onReconcile","queries","clearedBalance","inputValue","setInputValue","inputFocused","setInputFocused","onSubmit","currencyToInteger","InitialFocus","onEnter","AccountHeader","editingName","isNameEditable","workingHard","accountName","accountsSyncing","failedAccounts","showReconciled","showEmptyMessage","reconcileAmount","canCalculateBalance","isSorted","search","filterConditionsOp","onSearch","onAddTransaction","onShowTransactions","onDoneReconciling","onCreateReconciliationTransaction","onSaveName","onExposeName","onSync","onImport","onBatchDelete","onBatchDuplicate","onBatchEdit","onBatchLinkSchedule","onBatchUnlinkSchedule","searchInput","syncServerStatus","useSyncServerStatus","isUsingServer","isServerOffline","setExpandSplitsPref","canSync","account_id","onToggleSplits","getScrolledItem","enableOnFormTags","pageContent","gap","bank","sidebarItemBackgroundPending","sidebarItemBackgroundFailed","sidebarItemBackgroundPositive","target","onEscape","closed","AnimatedRefresh","animating","SvgAdd","FilterButton","onApply","AnimatedLoading","MenuButton","AccountMenu","canShowBalances","setTooltip","EmptyMessage","tableTextLight","AllTransactions","filtered","collapseTransactions","prependTransactions","usePreviewTransactions","prependBalances","scheduledBalances","reverse","scheduledTransaction","groupById","allBalances","getField","AccountInternal","PureComponent","constructor","paged","loading","transactionsCount","latestDate","sort","componentDidMount","maybeRefetch","refetchTransactions","onUndo","messages","focusId","msg","dataset","column","focusableMsgs","row","edit","scrollTo","setLastUndoState","initiallyLoadPayees","fetchTransactions","lastUndoState","componentDidUpdate","prevProps","setState","modalShowing","componentWillUnmount","unsubscribe","fetchAllIds","runQuery","getQuery","makeRootQuery","rootQuery","currentQuery","applyFilters","updateQuery","markAccountRead","$eq","pagedQuery","prevData","firstLoad","splitsExpandedDispatch","expandSplits","transactionCount","getTotalCount","transactionsFiltered","calculateBalances","getFilteredAmount","scrollToTop","pageCount","onlySync","mapper","UNSAFE_componentWillReceiveProps","nextProps","onSearchDone","debounce","syncAndDownload","res","Actual","openFileDialog","extensions","filename","onImported","didChange","onExport","exportedTransactions","serialize","replace","saveFile","onTransactionsChange","optimisticUpdate","_deleted","updateNewTransactions","$sumOver","flag","trim","updateAccount","savePrefs","upgradingAccountId","onUnlink","unlinkAccount","openAccountCloseModal","reopenAccount","getAccountTitle","filterName","location","getBalanceQuery","matchedTransactions","createPayee","lockTransactions","prevShowCleared","reconciliationTransactions","customName","queryFilter","onSuccess","updatedIds","uuidv4","total","makeChild","groupedTransactions","deleted","groupedTransactionsToUpdate","ungroupTransaction","makeAsNonChildTransactions","selectedChildTransactions","transactionsToSelect","checkForReconciledTransactions","a","ruleTransaction","payeeCondition","amountCondition","rule","stage","actions","splitIndex","flatMap","method","onConfirmTransfer","getPayees","fromPayee","p","toPayee","oldCondition","updatedCondition","condition","conditionOrSavedFilter","parts","customQueryFilters","cond","queryFilters","conditionsOpKey","applySort","prevField","prevAscDesc","sortAscDesc","sortPrevField","sortPrevAscDesc","sortCurrentQuery","that","orderBy","sortRootQuery","maybeSortByPreviousField","headerClicked","render","replaceModal","Navigate","SelectedProviderWithItems","registerDispatch","selectAllFilter","fetchNext","onRefetchUpToRow","refetchUpToRow","order","AccountHack","useTransactionBatchActions","Account","params","useParams","useLocation","useAccounts","usePayees","useFailedAccounts","useDateFormat","hideCleared","hideReconciled","modals","modalStack","savedFiters","useFilters","actionCreators","useDefaultSchedulesQueryTransform","SchedulesProvider"],"mappings":"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"}